  <TestCase name="getExecPlan[q93]">
    <Resource name="sql">
      <![CDATA[/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

-- start query 1 in stream 0 using template query93.tpl and seed 1200409435
select  ss_customer_sk
            ,sum(act_sales) sumsales
      from (select ss_item_sk
                  ,ss_ticket_number
                  ,ss_customer_sk
                  ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
                                                            else (ss_quantity*ss_sales_price) end act_sales
            from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
                                                               and sr_ticket_number = ss_ticket_number)
                ,reason
            where sr_reason_sk = r_reason_sk
              and r_reason_desc = 'Did not like the warranty') t
      group by ss_customer_sk
      order by sumsales, ss_customer_sk
limit 100

-- end query 1 in stream 0 using template query93.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$1], sort1=[$0], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}], sumsales=[SUM($1)])
   +- LogicalProject(ss_customer_sk=[$2], act_sales=[CASE(IS NOT NULL($32), *(-($9, $32), $12), *($9, $12))])
      +- LogicalFilter(condition=[AND(=($30, $43), =($45, _UTF-16LE'Did not like the warranty'))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[AND(=($24, $1), =($31, $8))], joinType=[left])
            :  :- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store_sales]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store_returns]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, reason]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[sumsales ASC, ss_customer_sk ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[sumsales ASC, ss_customer_sk ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[false], groupBy=[ss_customer_sk], select=[ss_customer_sk, SUM(act_sales) AS sumsales])
         +- Exchange(distribution=[hash[ss_customer_sk]])
            +- Calc(select=[ss_customer_sk, CASE(sr_return_quantity IS NOT NULL, ((ss_quantity - sr_return_quantity) * ss_sales_price), (ss_quantity * ss_sales_price)) AS act_sales])
               +- HashJoin(joinType=[InnerJoin], where=[(sr_reason_sk = r_reason_sk)], select=[ss_customer_sk, ss_quantity, ss_sales_price, sr_reason_sk, sr_return_quantity, r_reason_sk], isBroadcast=[true], build=[right])
                  :- Calc(select=[ss_customer_sk, ss_quantity, ss_sales_price, sr_reason_sk, sr_return_quantity])
                  :  +- HashJoin(joinType=[InnerJoin], where=[((sr_item_sk = ss_item_sk) AND (sr_ticket_number = ss_ticket_number))], select=[ss_item_sk, ss_customer_sk, ss_ticket_number, ss_quantity, ss_sales_price, sr_item_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity], build=[right])
                  :     :- Exchange(distribution=[hash[ss_item_sk, ss_ticket_number]])
                  :     :  +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store_sales, project=[ss_item_sk, ss_customer_sk, ss_ticket_number, ss_quantity, ss_sales_price]]], fields=[ss_item_sk, ss_customer_sk, ss_ticket_number, ss_quantity, ss_sales_price])
                  :     +- Exchange(distribution=[hash[sr_item_sk, sr_ticket_number]])
                  :        +- Calc(select=[sr_item_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity], where=[sr_reason_sk IS NOT NULL])
                  :           +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store_returns, project=[sr_item_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity]]], fields=[sr_item_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity])
                  +- Exchange(distribution=[broadcast])
                     +- Calc(select=[r_reason_sk], where=[(r_reason_desc = 'Did not like the warranty')])
                        +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, reason, project=[r_reason_sk, r_reason_desc]]], fields=[r_reason_sk, r_reason_desc])
]]>
    </Resource>
  </TestCase>
