  <TestCase name="getExecPlan[q58]">
    <Resource name="sql">
      <![CDATA[/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

-- start query 1 in stream 0 using template query58.tpl and seed 1819994127
with ss_items as
 (select i_item_id item_id
        ,sum(ss_ext_sales_price) ss_item_rev 
 from store_sales
     ,item
     ,date_dim
 where ss_item_sk = i_item_sk
   and d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-02-19'))
   and ss_sold_date_sk   = d_date_sk
 group by i_item_id),
 cs_items as
 (select i_item_id item_id
        ,sum(cs_ext_sales_price) cs_item_rev
  from catalog_sales
      ,item
      ,date_dim
 where cs_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq = (select d_week_seq 
                                      from date_dim
                                      where d_date = '1998-02-19'))
  and  cs_sold_date_sk = d_date_sk
 group by i_item_id),
 ws_items as
 (select i_item_id item_id
        ,sum(ws_ext_sales_price) ws_item_rev
  from web_sales
      ,item
      ,date_dim
 where ws_item_sk = i_item_sk
  and  d_date in (select d_date
                  from date_dim
                  where d_week_seq =(select d_week_seq 
                                     from date_dim
                                     where d_date = '1998-02-19'))
  and ws_sold_date_sk   = d_date_sk
 group by i_item_id)
  select  ss_items.item_id
       ,ss_item_rev
       ,ss_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ss_dev
       ,cs_item_rev
       ,cs_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 cs_dev
       ,ws_item_rev
       ,ws_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ws_dev
       ,(ss_item_rev+cs_item_rev+ws_item_rev)/3 average
 from ss_items,cs_items,ws_items
 where ss_items.item_id=cs_items.item_id
   and ss_items.item_id=ws_items.item_id 
   and ss_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
   and ss_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and cs_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and cs_item_rev between 0.9 * ws_item_rev and 1.1 * ws_item_rev
   and ws_item_rev between 0.9 * ss_item_rev and 1.1 * ss_item_rev
   and ws_item_rev between 0.9 * cs_item_rev and 1.1 * cs_item_rev
 order by item_id
         ,ss_item_rev
 limit 100

-- end query 1 in stream 0 using template query58.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalProject(item_id=[$0], ss_item_rev=[$1], ss_dev=[*(/(/($1, +(+($1, $3), $5)), 3), 100)], cs_item_rev=[$3], cs_dev=[*(/(/($3, +(+($1, $3), $5)), 3), 100)], ws_item_rev=[$5], ws_dev=[*(/(/($5, +(+($1, $3), $5)), 3), 100)], average=[/(+(+($1, $3), $5), 3)])
   +- LogicalFilter(condition=[AND(=($0, $2), =($0, $4), >=($1, *(0.9:DECIMAL(2, 1), $3)), <=($1, *(1.1:DECIMAL(2, 1), $3)), >=($1, *(0.9:DECIMAL(2, 1), $5)), <=($1, *(1.1:DECIMAL(2, 1), $5)), >=($3, *(0.9:DECIMAL(2, 1), $1)), <=($3, *(1.1:DECIMAL(2, 1), $1)), >=($3, *(0.9:DECIMAL(2, 1), $5)), <=($3, *(1.1:DECIMAL(2, 1), $5)), >=($5, *(0.9:DECIMAL(2, 1), $1)), <=($5, *(1.1:DECIMAL(2, 1), $1)), >=($5, *(0.9:DECIMAL(2, 1), $3)), <=($5, *(1.1:DECIMAL(2, 1), $3)))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalAggregate(group=[{0}], ss_item_rev=[SUM($1)])
         :  :  +- LogicalProject(item_id=[$24], ss_ext_sales_price=[$14])
         :  :     +- LogicalFilter(condition=[AND(=($1, $23), IN($47, {
LogicalProject(d_date=[$2])
  LogicalFilter(condition=[=($4, $SCALAR_QUERY({
LogicalProject(d_week_seq=[$4])
  LogicalFilter(condition=[=($2, _UTF-16LE'1998-02-19')])
    LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
}))])
    LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
}), =($22, $45))])
         :  :        +- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :  :- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store_sales]])
         :  :           :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, item]])
         :  :           +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
         :  +- LogicalAggregate(group=[{0}], cs_item_rev=[SUM($1)])
         :     +- LogicalProject(item_id=[$35], cs_ext_sales_price=[$22])
         :        +- LogicalFilter(condition=[AND(=($14, $34), IN($58, {
LogicalProject(d_date=[$2])
  LogicalFilter(condition=[=($4, $SCALAR_QUERY({
LogicalProject(d_week_seq=[$4])
  LogicalFilter(condition=[=($2, _UTF-16LE'1998-02-19')])
    LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
}))])
    LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
}), =($33, $56))])
         :           +- LogicalJoin(condition=[true], joinType=[inner])
         :              :- LogicalJoin(condition=[true], joinType=[inner])
         :              :  :- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, catalog_sales]])
         :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, item]])
         :              +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
         +- LogicalAggregate(group=[{0}], ws_item_rev=[SUM($1)])
            +- LogicalProject(item_id=[$35], ws_ext_sales_price=[$22])
               +- LogicalFilter(condition=[AND(=($2, $34), IN($58, {
LogicalProject(d_date=[$2])
  LogicalFilter(condition=[=($4, $SCALAR_QUERY({
LogicalProject(d_week_seq=[$4])
  LogicalFilter(condition=[=($2, _UTF-16LE'1998-02-19')])
    LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
}))])
    LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
}), =($33, $56))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, web_sales]])
                     :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, item]])
                     +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[item_id ASC, ss_item_rev ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[item_id ASC, ss_item_rev ASC], offset=[0], fetch=[100], global=[false])
      +- Calc(select=[item_id0 AS item_id, ss_item_rev, (((ss_item_rev / ((ss_item_rev + cs_item_rev) + ws_item_rev)) / 3) * 100) AS ss_dev, cs_item_rev, (((cs_item_rev / ((ss_item_rev + cs_item_rev) + ws_item_rev)) / 3) * 100) AS cs_dev, ws_item_rev, (((ws_item_rev / ((ss_item_rev + cs_item_rev) + ws_item_rev)) / 3) * 100) AS ws_dev, (((ss_item_rev + cs_item_rev) + ws_item_rev) / 3) AS average])
         +- HashJoin(joinType=[InnerJoin], where=[((item_id0 = item_id) AND (ss_item_rev >= (0.9 * ws_item_rev)) AND (ss_item_rev <= (1.1 * ws_item_rev)) AND (cs_item_rev >= (0.9 * ws_item_rev)) AND (cs_item_rev <= (1.1 * ws_item_rev)) AND (ws_item_rev >= (0.9 * ss_item_rev)) AND (ws_item_rev <= (1.1 * ss_item_rev)) AND (ws_item_rev >= (0.9 * cs_item_rev)) AND (ws_item_rev <= (1.1 * cs_item_rev)))], select=[item_id, ws_item_rev, item_id0, cs_item_rev, ss_item_rev], isBroadcast=[true], build=[right])
            :- HashAggregate(isMerge=[true], groupBy=[item_id], select=[item_id, Final_SUM(sum$0) AS ws_item_rev])
            :  +- Exchange(distribution=[hash[item_id]])
            :     +- LocalHashAggregate(groupBy=[item_id], select=[item_id, Partial_SUM(ws_ext_sales_price) AS sum$0])
            :        +- Calc(select=[i_item_id AS item_id, ws_ext_sales_price])
            :           +- HashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_ext_sales_price, ws_sold_date_sk, i_item_id, d_date_sk, d_date], isBroadcast=[true], build=[right])
            :              :- Calc(select=[ws_ext_sales_price, ws_sold_date_sk, i_item_id])
            :              :  +- HashJoin(joinType=[InnerJoin], where=[(ws_item_sk = i_item_sk)], select=[ws_item_sk, ws_ext_sales_price, ws_sold_date_sk, i_item_sk, i_item_id], build=[right])
            :              :     :- Exchange(distribution=[hash[ws_item_sk]])
            :              :     :  +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, web_sales, project=[ws_item_sk, ws_ext_sales_price, ws_sold_date_sk]]], fields=[ws_item_sk, ws_ext_sales_price, ws_sold_date_sk])
            :              :     +- Exchange(distribution=[hash[i_item_sk]])
            :              :        +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])(reuse_id=[2])
            :              +- Exchange(distribution=[broadcast])(reuse_id=[3])
            :                 +- NestedLoopJoin(joinType=[LeftSemiJoin], where=[(d_date = d_date0)], select=[d_date_sk, d_date], build=[right])
            :                    :- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
            :                    +- Exchange(distribution=[broadcast])
            :                       +- Calc(select=[d_date])
            :                          +- NestedLoopJoin(joinType=[InnerJoin], where=[(d_week_seq = $f0)], select=[d_date, d_week_seq, $f0], build=[right], singleRowJoin=[true])
            :                             :- Exchange(distribution=[any], shuffle_mode=[BATCH])
            :                             :  +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim, project=[d_date, d_week_seq]]], fields=[d_date, d_week_seq])(reuse_id=[1])
            :                             +- Exchange(distribution=[broadcast])
            :                                +- HashAggregate(isMerge=[true], select=[Final_SINGLE_VALUE(value$0, count$1) AS $f0])
            :                                   +- Exchange(distribution=[single])
            :                                      +- LocalHashAggregate(select=[Partial_SINGLE_VALUE(d_week_seq) AS (value$0, count$1)])
            :                                         +- Calc(select=[d_week_seq], where=[(d_date = '1998-02-19')])
            :                                            +- Reused(reference_id=[1])
            +- Exchange(distribution=[broadcast])
               +- Calc(select=[item_id, cs_item_rev, ss_item_rev])
                  +- SortMergeJoin(joinType=[InnerJoin], where=[((item_id0 = item_id) AND (ss_item_rev >= (0.9 * cs_item_rev)) AND (ss_item_rev <= (1.1 * cs_item_rev)) AND (cs_item_rev >= (0.9 * ss_item_rev)) AND (cs_item_rev <= (1.1 * ss_item_rev)))], select=[item_id, cs_item_rev, item_id0, ss_item_rev])
                     :- HashAggregate(isMerge=[true], groupBy=[item_id], select=[item_id, Final_SUM(sum$0) AS cs_item_rev])
                     :  +- Exchange(distribution=[hash[item_id]])
                     :     +- LocalHashAggregate(groupBy=[item_id], select=[item_id, Partial_SUM(cs_ext_sales_price) AS sum$0])
                     :        +- Calc(select=[i_item_id AS item_id, cs_ext_sales_price])
                     :           +- HashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_ext_sales_price, cs_sold_date_sk, i_item_id, d_date_sk, d_date], isBroadcast=[true], build=[right])
                     :              :- Calc(select=[cs_ext_sales_price, cs_sold_date_sk, i_item_id])
                     :              :  +- HashJoin(joinType=[InnerJoin], where=[(cs_item_sk = i_item_sk)], select=[cs_item_sk, cs_ext_sales_price, cs_sold_date_sk, i_item_sk, i_item_id], build=[right])
                     :              :     :- Exchange(distribution=[hash[cs_item_sk]])
                     :              :     :  +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, catalog_sales, project=[cs_item_sk, cs_ext_sales_price, cs_sold_date_sk]]], fields=[cs_item_sk, cs_ext_sales_price, cs_sold_date_sk])
                     :              :     +- Exchange(distribution=[hash[i_item_sk]])
                     :              :        +- Reused(reference_id=[2])
                     :              +- Reused(reference_id=[3])
                     +- HashAggregate(isMerge=[true], groupBy=[item_id], select=[item_id, Final_SUM(sum$0) AS ss_item_rev])
                        +- Exchange(distribution=[hash[item_id]])
                           +- LocalHashAggregate(groupBy=[item_id], select=[item_id, Partial_SUM(ss_ext_sales_price) AS sum$0])
                              +- Calc(select=[i_item_id AS item_id, ss_ext_sales_price])
                                 +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_ext_sales_price, ss_sold_date_sk, i_item_id, d_date_sk, d_date], isBroadcast=[true], build=[right])
                                    :- Calc(select=[ss_ext_sales_price, ss_sold_date_sk, i_item_id])
                                    :  +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, ss_ext_sales_price, ss_sold_date_sk, i_item_sk, i_item_id], build=[right])
                                    :     :- Exchange(distribution=[hash[ss_item_sk]])
                                    :     :  +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store_sales, project=[ss_item_sk, ss_ext_sales_price, ss_sold_date_sk]]], fields=[ss_item_sk, ss_ext_sales_price, ss_sold_date_sk])
                                    :     +- Exchange(distribution=[hash[i_item_sk]])
                                    :        +- Reused(reference_id=[2])
                                    +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
