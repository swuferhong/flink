  <TestCase name="getExecPlan[q27]">
    <Resource name="sql">
      <![CDATA[/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

-- start query 1 in stream 0 using template query27.tpl and seed 2017787633
select  i_item_id,
        s_state, grouping(s_state) g_state,
        avg(ss_quantity) agg1,
        avg(ss_list_price) agg2,
        avg(ss_coupon_amt) agg3,
        avg(ss_sales_price) agg4
 from store_sales, customer_demographics, date_dim, store, item
 where ss_sold_date_sk = d_date_sk and
       ss_item_sk = i_item_sk and
       ss_store_sk = s_store_sk and
       ss_cdemo_sk = cd_demo_sk and
       cd_gender = 'M' and
       cd_marital_status = 'U' and
       cd_education_status = '2 yr Degree' and
       d_year = 2001 and
       s_state in ('SD','FL', 'MI', 'LA', 'MO', 'SC')
 group by rollup (i_item_id, s_state)
 order by i_item_id
         ,s_state
 limit 100

-- end query 1 in stream 0 using template query27.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], g_state=[GROUPING($1)], agg1=[AVG($2)], agg2=[AVG($3)], agg3=[AVG($4)], agg4=[AVG($5)])
   +- LogicalProject(i_item_id=[$90], s_state=[$84], ss_quantity=[$9], ss_list_price=[$11], ss_coupon_amt=[$18], ss_sales_price=[$12])
      +- LogicalFilter(condition=[AND(=($22, $32), =($1, $89), =($6, $60), =($3, $23), =($24, _UTF-16LE'M'), =($25, _UTF-16LE'U'), =($26, _UTF-16LE'2 yr Degree'), =($38, 2001), OR(=($84, _UTF-16LE'SD'), =($84, _UTF-16LE'FL'), =($84, _UTF-16LE'MI'), =($84, _UTF-16LE'LA'), =($84, _UTF-16LE'MO'), =($84, _UTF-16LE'SC')))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store_sales]])
            :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, customer_demographics]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[i_item_id, s_state, CASE(($e = 0), 0, 1) AS g_state, agg1, agg2, agg3, agg4])
+- SortLimit(orderBy=[i_item_id ASC, s_state ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[i_item_id ASC, s_state ASC], offset=[0], fetch=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[i_item_id, s_state, $e], select=[i_item_id, s_state, $e, Final_AVG(sum$0, count$1) AS agg1, Final_AVG(sum$2, count$3) AS agg2, Final_AVG(sum$4, count$5) AS agg3, Final_AVG(sum$6, count$7) AS agg4])
            +- Exchange(distribution=[hash[i_item_id, s_state, $e]])
               +- LocalHashAggregate(groupBy=[i_item_id, s_state, $e], select=[i_item_id, s_state, $e, Partial_AVG(ss_quantity) AS (sum$0, count$1), Partial_AVG(ss_list_price) AS (sum$2, count$3), Partial_AVG(ss_coupon_amt) AS (sum$4, count$5), Partial_AVG(ss_sales_price) AS (sum$6, count$7)])
                  +- Expand(projects=[{i_item_id, s_state, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price, 0 AS $e}, {i_item_id, null AS s_state, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price, 1 AS $e}, {null AS i_item_id, null AS s_state, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price, 3 AS $e}])
                     +- Calc(select=[i_item_id, s_state, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price])
                        +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, s_state, i_item_sk, i_item_id], build=[right])
                           :- Exchange(distribution=[hash[ss_item_sk]])
                           :  +- Calc(select=[ss_item_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, s_state])
                           :     +- HashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_item_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, s_store_sk, s_state], isBroadcast=[true], build=[right])
                           :        :- Calc(select=[ss_item_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt])
                           :        :  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_item_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, ss_sold_date_sk, d_date_sk], isBroadcast=[true], build=[right])
                           :        :     :- Calc(select=[ss_item_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, ss_sold_date_sk])
                           :        :     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_cdemo_sk = cd_demo_sk)], select=[ss_item_sk, ss_cdemo_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, ss_sold_date_sk, cd_demo_sk], isBroadcast=[true], build=[right])
                           :        :     :     :- Calc(select=[ss_item_sk, ss_cdemo_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, ss_sold_date_sk], where=[ss_cdemo_sk IS NOT NULL])
                           :        :     :     :  +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store_sales, project=[ss_item_sk, ss_cdemo_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, ss_sold_date_sk]]], fields=[ss_item_sk, ss_cdemo_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, ss_sold_date_sk])
                           :        :     :     +- Exchange(distribution=[broadcast])
                           :        :     :        +- Calc(select=[cd_demo_sk], where=[(SEARCH(cd_gender, Sarg[_UTF-16LE'M']) AND SEARCH(cd_marital_status, Sarg[_UTF-16LE'U']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'2 yr Degree']))])
                           :        :     :           +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, customer_demographics, project=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status]]], fields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status])
                           :        :     +- Exchange(distribution=[broadcast])
                           :        :        +- Calc(select=[d_date_sk], where=[SEARCH(d_year, Sarg[2001])])
                           :        :           +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
                           :        +- Exchange(distribution=[broadcast])
                           :           +- Calc(select=[s_store_sk, s_state], where=[SEARCH(s_state, Sarg[_UTF-16LE'FL', _UTF-16LE'LA', _UTF-16LE'MI', _UTF-16LE'MO', _UTF-16LE'SC', _UTF-16LE'SD'])])
                           :              +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store, project=[s_store_sk, s_state]]], fields=[s_store_sk, s_state])
                           +- Exchange(distribution=[hash[i_item_sk]])
                              +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])
]]>
    </Resource>
  </TestCase>
