  <TestCase name="getExecPlan[q57]">
    <Resource name="sql">
      <![CDATA[/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

-- start query 1 in stream 0 using template query57.tpl and seed 2031708268
with v1 as(
 select i_category, i_brand,
        cc_name,
        d_year, d_moy,
        sum(cs_sales_price) sum_sales,
        avg(sum(cs_sales_price)) over
          (partition by i_category, i_brand,
                     cc_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     cc_name
           order by d_year, d_moy) rn
 from item, catalog_sales, date_dim, call_center
 where cs_item_sk = i_item_sk and
       cs_sold_date_sk = d_date_sk and
       cc_call_center_sk= cs_call_center_sk and
       (
         d_year = 2000 or
         ( d_year = 2000-1 and d_moy =12) or
         ( d_year = 2000+1 and d_moy =1)
       )
 group by i_category, i_brand,
          cc_name , d_year, d_moy),
 v2 as(
 select v1.i_category, v1.i_brand
        ,v1.d_year, v1.d_moy
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1. cc_name = v1_lag. cc_name and
       v1. cc_name = v1_lead. cc_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 2000 and
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100

-- end query 1 in stream 0 using template query57.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(i_category=[$0], i_brand=[$1], d_year=[$2], d_moy=[$3], avg_monthly_sales=[$4], sum_sales=[$5], psum=[$6], nsum=[$7])
+- LogicalSort(sort0=[$8], sort1=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
   +- LogicalProject(i_category=[$0], i_brand=[$1], d_year=[$2], d_moy=[$3], avg_monthly_sales=[$4], sum_sales=[$5], psum=[$6], nsum=[$7], EXPR$8=[-($5, $4)])
      +- LogicalFilter(condition=[AND(=($2, 2000), >($4, 0), >(CASE(>($4, 0), /(ABS(-($5, $4)), $4), null:DOUBLE), 0.1:DECIMAL(2, 1)))])
         +- LogicalProject(i_category=[$0], i_brand=[$1], d_year=[$3], d_moy=[$4], avg_monthly_sales=[$6], sum_sales=[$5], psum=[$13], nsum=[$21])
            +- LogicalFilter(condition=[AND(=($0, $8), =($0, $16), =($1, $9), =($1, $17), =($2, $10), =($2, $18), =($7, +($15, 1)), =($7, -($23, 1)))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalProject(i_category=[$0], i_brand=[$1], cc_name=[$2], d_year=[$3], d_moy=[$4], sum_sales=[$5], avg_monthly_sales=[/(CASE(>(COUNT($5) OVER (PARTITION BY $0, $1, $2, $3), 0), $SUM0($5) OVER (PARTITION BY $0, $1, $2, $3), null:DOUBLE), COUNT($5) OVER (PARTITION BY $0, $1, $2, $3))], rn=[RANK() OVER (PARTITION BY $0, $1, $2 ORDER BY $3 NULLS FIRST, $4 NULLS FIRST)])
                  :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], sum_sales=[SUM($5)])
                  :  :     +- LogicalProject(i_category=[$12], i_brand=[$8], cc_name=[$90], d_year=[$62], d_moy=[$64], cs_sales_price=[$42])
                  :  :        +- LogicalFilter(condition=[AND(=($36, $0), =($55, $56), =($84, $32), OR(=($62, 2000), AND(=($62, -(2000, 1)), =($64, 12)), AND(=($62, +(2000, 1)), =($64, 1))))])
                  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
                  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :              :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, item]])
                  :  :              :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, catalog_sales]])
                  :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
                  :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, call_center]])
                  :  +- LogicalProject(i_category=[$0], i_brand=[$1], cc_name=[$2], d_year=[$3], d_moy=[$4], sum_sales=[$5], avg_monthly_sales=[/(CASE(>(COUNT($5) OVER (PARTITION BY $0, $1, $2, $3), 0), $SUM0($5) OVER (PARTITION BY $0, $1, $2, $3), null:DOUBLE), COUNT($5) OVER (PARTITION BY $0, $1, $2, $3))], rn=[RANK() OVER (PARTITION BY $0, $1, $2 ORDER BY $3 NULLS FIRST, $4 NULLS FIRST)])
                  :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], sum_sales=[SUM($5)])
                  :        +- LogicalProject(i_category=[$12], i_brand=[$8], cc_name=[$90], d_year=[$62], d_moy=[$64], cs_sales_price=[$42])
                  :           +- LogicalFilter(condition=[AND(=($36, $0), =($55, $56), =($84, $32), OR(=($62, 2000), AND(=($62, -(2000, 1)), =($64, 12)), AND(=($62, +(2000, 1)), =($64, 1))))])
                  :              +- LogicalJoin(condition=[true], joinType=[inner])
                  :                 :- LogicalJoin(condition=[true], joinType=[inner])
                  :                 :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :                 :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, item]])
                  :                 :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, catalog_sales]])
                  :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
                  :                 +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, call_center]])
                  +- LogicalProject(i_category=[$0], i_brand=[$1], cc_name=[$2], d_year=[$3], d_moy=[$4], sum_sales=[$5], avg_monthly_sales=[/(CASE(>(COUNT($5) OVER (PARTITION BY $0, $1, $2, $3), 0), $SUM0($5) OVER (PARTITION BY $0, $1, $2, $3), null:DOUBLE), COUNT($5) OVER (PARTITION BY $0, $1, $2, $3))], rn=[RANK() OVER (PARTITION BY $0, $1, $2 ORDER BY $3 NULLS FIRST, $4 NULLS FIRST)])
                     +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], sum_sales=[SUM($5)])
                        +- LogicalProject(i_category=[$12], i_brand=[$8], cc_name=[$90], d_year=[$62], d_moy=[$64], cs_sales_price=[$42])
                           +- LogicalFilter(condition=[AND(=($36, $0), =($55, $56), =($84, $32), OR(=($62, 2000), AND(=($62, -(2000, 1)), =($64, 12)), AND(=($62, +(2000, 1)), =($64, 1))))])
                              +- LogicalJoin(condition=[true], joinType=[inner])
                                 :- LogicalJoin(condition=[true], joinType=[inner])
                                 :  :- LogicalJoin(condition=[true], joinType=[inner])
                                 :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, item]])
                                 :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, catalog_sales]])
                                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
                                 +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, call_center]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[i_category, i_brand, d_year, d_moy, avg_monthly_sales, sum_sales, psum, nsum])
+- SortLimit(orderBy=[EXPR$8 ASC, d_year ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[EXPR$8 ASC, d_year ASC], offset=[0], fetch=[100], global=[false])
         +- Calc(select=[i_category0 AS i_category, i_brand0 AS i_brand, d_year, d_moy, avg_monthly_sales, sum_sales0 AS sum_sales, sum_sales00 AS psum, sum_sales AS nsum, (sum_sales0 - avg_monthly_sales) AS EXPR$8])
            +- HashJoin(joinType=[InnerJoin], where=[((i_category0 = i_category) AND (i_brand0 = i_brand) AND (cc_name0 = cc_name) AND (rn = $f8))], select=[i_category, i_brand, cc_name, sum_sales, $f8, i_category0, i_brand0, cc_name0, d_year, d_moy, sum_sales0, avg_monthly_sales, rn, sum_sales00], isBroadcast=[true], build=[right])
               :- Exchange(distribution=[any], shuffle_mode=[BATCH])
               :  +- Calc(select=[i_category, i_brand, cc_name, sum_sales, (w1$o0 - 1) AS $f8])
               :     +- OverAggregate(partitionBy=[i_category, i_brand, cc_name, d_year], window#0=[COUNT(sum_sales) AS w1$o0, $SUM0(sum_sales) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[i_category, i_brand, cc_name, d_year, d_moy, sum_sales, w0$o1, w1$o0, w0$o0])(reuse_id=[1])
               :        +- OverAggregate(partitionBy=[i_category, i_brand, cc_name], orderBy=[d_year ASC, d_moy ASC], window#0=[RANK(*) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[i_category, i_brand, cc_name, d_year, d_moy, sum_sales, w0$o1])
               :           +- Sort(orderBy=[i_category ASC, i_brand ASC, cc_name ASC, d_year ASC, d_moy ASC])
               :              +- Exchange(distribution=[hash[i_category, i_brand, cc_name]])
               :                 +- HashAggregate(isMerge=[false], groupBy=[i_category, i_brand, cc_name, d_year, d_moy], select=[i_category, i_brand, cc_name, d_year, d_moy, SUM(cs_sales_price) AS sum_sales])
               :                    +- Exchange(distribution=[hash[i_category, i_brand, cc_name, d_year, d_moy]])
               :                       +- Calc(select=[i_category, i_brand, cc_name, d_year, d_moy, cs_sales_price])
               :                          +- HashJoin(joinType=[InnerJoin], where=[(cs_item_sk = i_item_sk)], select=[cs_item_sk, cs_sales_price, d_year, d_moy, cc_name, i_item_sk, i_brand, i_category], build=[right])
               :                             :- Exchange(distribution=[hash[cs_item_sk]])
               :                             :  +- Calc(select=[cs_item_sk, cs_sales_price, d_year, d_moy, cc_name])
               :                             :     +- HashJoin(joinType=[InnerJoin], where=[(cc_call_center_sk = cs_call_center_sk)], select=[cs_call_center_sk, cs_item_sk, cs_sales_price, d_year, d_moy, cc_call_center_sk, cc_name], isBroadcast=[true], build=[right])
               :                             :        :- Calc(select=[cs_call_center_sk, cs_item_sk, cs_sales_price, d_year, d_moy])
               :                             :        :  +- HashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_call_center_sk, cs_item_sk, cs_sales_price, cs_sold_date_sk, d_date_sk, d_year, d_moy], isBroadcast=[true], build=[right])
               :                             :        :     :- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, catalog_sales, project=[cs_call_center_sk, cs_item_sk, cs_sales_price, cs_sold_date_sk], project=[cs_call_center_sk, cs_item_sk, cs_sales_price, cs_sold_date_sk]]], fields=[cs_call_center_sk, cs_item_sk, cs_sales_price, cs_sold_date_sk], dpp=[d_date_sk])
               :                             :        :     +- Exchange(distribution=[broadcast])
               :                             :        :        +- Calc(select=[d_date_sk, d_year, d_moy], where=[((d_year = 2000) OR ((d_year = 1999) AND (d_moy = 12)) OR ((d_year = 2001) AND (d_moy = 1)))])
               :                             :        :           +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
               :                             :        +- Exchange(distribution=[broadcast])
               :                             :           +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, call_center, project=[cc_call_center_sk, cc_name]]], fields=[cc_call_center_sk, cc_name])
               :                             +- Exchange(distribution=[hash[i_item_sk]])
               :                                +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, item, project=[i_item_sk, i_brand, i_category]]], fields=[i_item_sk, i_brand, i_category])
               +- Exchange(distribution=[broadcast])
                  +- Calc(select=[i_category0 AS i_category, i_brand0 AS i_brand, cc_name0 AS cc_name, d_year, d_moy, sum_sales0 AS sum_sales, avg_monthly_sales, rn, sum_sales AS sum_sales0])
                     +- HashJoin(joinType=[InnerJoin], where=[((i_category0 = i_category) AND (i_brand0 = i_brand) AND (cc_name0 = cc_name) AND (rn = $f8))], select=[i_category, i_brand, cc_name, sum_sales, $f8, i_category0, i_brand0, cc_name0, d_year, d_moy, sum_sales0, avg_monthly_sales, rn], isBroadcast=[true], build=[right])
                        :- Exchange(distribution=[any], shuffle_mode=[BATCH])
                        :  +- Calc(select=[i_category, i_brand, cc_name, sum_sales, (w1$o0 + 1) AS $f8])
                        :     +- Reused(reference_id=[1])
                        +- Exchange(distribution=[broadcast])
                           +- Calc(select=[i_category, i_brand, cc_name, CAST(2000 AS INTEGER) AS d_year, d_moy, sum_sales, (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0) AS avg_monthly_sales, w1$o0 AS rn], where=[((d_year = 2000) AND ((CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0) > 0) AND CASE(((CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0) > 0), ((ABS((sum_sales - (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0))) / (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0)) > 0.1), false))])
                              +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
