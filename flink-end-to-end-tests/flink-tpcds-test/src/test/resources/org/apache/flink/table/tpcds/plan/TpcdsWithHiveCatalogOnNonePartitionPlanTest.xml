<?xml version="1.0" ?>
<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one
  ~ or more contributor license agreements.  See the NOTICE file
  ~ distributed with this work for additional information
  ~ regarding copyright ownership.  The ASF licenses this file
  ~ to you under the Apache License, Version 2.0 (the
  ~ "License"); you may not use this file except in compliance
  ~ with the License.  You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<Root>
  <TestCase name="getExecPlan[q10]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query10.tpl and seed 797269820
select  
  cd_gender,
  cd_marital_status,
  cd_education_status,
  count(*) cnt1,
  cd_purchase_estimate,
  count(*) cnt2,
  cd_credit_rating,
  count(*) cnt3,
  cd_dep_count,
  count(*) cnt4,
  cd_dep_employed_count,
  count(*) cnt5,
  cd_dep_college_count,
  count(*) cnt6
 from
  customer c,customer_address ca,customer_demographics
 where
  c.c_current_addr_sk = ca.ca_address_sk and
  ca_county in ('Walker County','Richland County','Gaines County','Douglas County','Dona Ana County') and
  cd_demo_sk = c.c_current_cdemo_sk and 
  exists (select *
          from store_sales,date_dim
          where c.c_customer_sk = ss_customer_sk and
                ss_sold_date_sk = d_date_sk and
                d_year = 2002 and
                d_moy between 4 and 4+3) and
   (exists (select *
            from web_sales,date_dim
            where c.c_customer_sk = ws_bill_customer_sk and
                  ws_sold_date_sk = d_date_sk and
                  d_year = 2002 and
                  d_moy between 4 ANd 4+3) or 
    exists (select * 
            from catalog_sales,date_dim
            where c.c_customer_sk = cs_ship_customer_sk and
                  cs_sold_date_sk = d_date_sk and
                  d_year = 2002 and
                  d_moy between 4 and 4+3))
 group by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 order by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
limit 100

-- end query 1 in stream 0 using template query10.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$4], sort4=[$6], sort5=[$8], sort6=[$10], sort7=[$12], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first], fetch=[100])
+- LogicalProject(cd_gender=[$0], cd_marital_status=[$1], cd_education_status=[$2], cnt1=[$8], cd_purchase_estimate=[$3], cnt2=[$8], cd_credit_rating=[$4], cnt3=[$8], cd_dep_count=[$5], cnt4=[$8], cd_dep_employed_count=[$6], cnt5=[$8], cd_dep_college_count=[$7], cnt6=[$8])
   +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], cnt6=[COUNT()])
      +- LogicalProject(cd_gender=[$32], cd_marital_status=[$33], cd_education_status=[$34], cd_purchase_estimate=[$35], cd_credit_rating=[$36], cd_dep_count=[$37], cd_dep_employed_count=[$38], cd_dep_college_count=[$39])
         +- LogicalFilter(condition=[AND(=($4, $18), OR(=($25, _UTF-16LE'Walker County'), =($25, _UTF-16LE'Richland County'), =($25, _UTF-16LE'Gaines County'), =($25, _UTF-16LE'Douglas County'), =($25, _UTF-16LE'Dona Ana County')), =($31, $2), EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $3), =($0, $23), =($29, 2002), >=($31, 4), <=($31, +(4, 3)))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
}), OR(EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $4), =($0, $34), =($40, 2002), >=($42, 4), <=($42, +(4, 3)))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
}), EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $7), =($0, $34), =($40, 2002), >=($42, 4), <=($42, +(4, 3)))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
})))], variablesSet=[[$cor0]])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
               :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
               +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[cd_gender, cd_marital_status, cd_education_status, cnt6 AS cnt1, cd_purchase_estimate, cnt6 AS cnt2, cd_credit_rating, cnt6 AS cnt3, cd_dep_count, cnt6 AS cnt4, cd_dep_employed_count, cnt6 AS cnt5, cd_dep_college_count, cnt6])
+- SortLimit(orderBy=[cd_gender ASC, cd_marital_status ASC, cd_education_status ASC, cd_purchase_estimate ASC, cd_credit_rating ASC, cd_dep_count ASC, cd_dep_employed_count ASC, cd_dep_college_count ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[cd_gender ASC, cd_marital_status ASC, cd_education_status ASC, cd_purchase_estimate ASC, cd_credit_rating ASC, cd_dep_count ASC, cd_dep_employed_count ASC, cd_dep_college_count ASC], offset=[0], fetch=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], select=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, Final_COUNT(count1$0) AS cnt6])
            +- Exchange(distribution=[hash[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count]])
               +- LocalHashAggregate(groupBy=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], select=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, Partial_COUNT(*) AS count1$0])
                  +- Calc(select=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], where=[($f10 IS NOT NULL OR $f1 IS NOT NULL)])
                     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[RightOuterJoin], where=[(c_customer_sk = cs_ship_customer_sk)], select=[cs_ship_customer_sk, $f1, c_customer_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, $f10], build=[right])\n:- Calc(select=[cs_ship_customer_sk, true AS $f1])\n:  +- HashAggregate(isMerge=[false], groupBy=[cs_ship_customer_sk], select=[cs_ship_customer_sk])\n:     +- [#2] Exchange(distribution=[hash[cs_ship_customer_sk]])\n+- [#1] Exchange(distribution=[hash[c_customer_sk]])\n])
                        :- Exchange(distribution=[hash[c_customer_sk]])
                        :  +- Calc(select=[c_customer_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, $f1 AS $f10])
                        :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(cd_demo_sk = c_current_cdemo_sk)], select=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, $f1, c_customer_sk, c_current_cdemo_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]], fields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count])\n+- [#2] Exchange(distribution=[broadcast])\n])
                        :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]], fields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count])
                        :        +- Exchange(distribution=[broadcast])
                        :           +- Calc(select=[$f1, c_customer_sk, c_current_cdemo_sk])
                        :              +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[RightOuterJoin], where=[(c_customer_sk = ws_bill_customer_sk)], select=[ws_bill_customer_sk, $f1, c_customer_sk, c_current_cdemo_sk], build=[right])\n:- Calc(select=[ws_bill_customer_sk, true AS $f1])\n:  +- HashAggregate(isMerge=[false], groupBy=[ws_bill_customer_sk], select=[ws_bill_customer_sk])\n:     +- [#2] Exchange(distribution=[hash[ws_bill_customer_sk]])\n+- [#1] Exchange(distribution=[hash[c_customer_sk]])\n])
                        :                 :- Exchange(distribution=[hash[c_customer_sk]])
                        :                 :  +- Calc(select=[c_customer_sk, c_current_cdemo_sk])
                        :                 :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(c_customer_sk = ss_customer_sk)], select=[ss_customer_sk, c_customer_sk, c_current_cdemo_sk], isBroadcast=[true], build=[right])\n:- HashAggregate(isMerge=[false], groupBy=[ss_customer_sk], select=[ss_customer_sk])\n:  +- [#2] Exchange(distribution=[hash[ss_customer_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :                 :        :- Exchange(distribution=[broadcast])
                        :                 :        :  +- Calc(select=[c_customer_sk, c_current_cdemo_sk])
                        :                 :        :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(c_current_addr_sk = ca_address_sk)], select=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, ca_address_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk]]], fields=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk])\n+- [#2] Exchange(distribution=[broadcast])\n])
                        :                 :        :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk]]], fields=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk])
                        :                 :        :        +- Exchange(distribution=[broadcast])
                        :                 :        :           +- Calc(select=[ca_address_sk], where=[SEARCH(ca_county, Sarg[_UTF-16LE'Dona Ana County', _UTF-16LE'Douglas County', _UTF-16LE'Gaines County', _UTF-16LE'Richland County', _UTF-16LE'Walker County'])])
                        :                 :        :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_county]]], fields=[ca_address_sk, ca_county])
                        :                 :        +- Exchange(distribution=[hash[ss_customer_sk]])
                        :                 :           +- Calc(select=[ss_customer_sk])
                        :                 :              +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_customer_sk, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_customer_sk], where=[ss_customer_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk]]], fields=[ss_sold_date_sk, ss_customer_sk])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :                 :                 :- Exchange(distribution=[broadcast])(reuse_id=[1])
                        :                 :                 :  +- Calc(select=[d_date_sk], where=[(SEARCH(d_year, Sarg[2002]) AND SEARCH(d_moy, Sarg[[4..7]]))])
                        :                 :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                        :                 :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk]]], fields=[ss_sold_date_sk, ss_customer_sk])
                        :                 +- Exchange(distribution=[hash[ws_bill_customer_sk]])
                        :                    +- Calc(select=[ws_bill_customer_sk])
                        :                       +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_bill_customer_sk, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ws_sold_date_sk, ws_bill_customer_sk], where=[ws_bill_customer_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_customer_sk]]], fields=[ws_sold_date_sk, ws_bill_customer_sk])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :                          :- Reused(reference_id=[1])
                        :                          +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_customer_sk]]], fields=[ws_sold_date_sk, ws_bill_customer_sk])
                        +- Exchange(distribution=[hash[cs_ship_customer_sk]])
                           +- Calc(select=[cs_ship_customer_sk])
                              +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_ship_customer_sk, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_ship_customer_sk], where=[cs_ship_customer_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_ship_customer_sk]]], fields=[cs_sold_date_sk, cs_ship_customer_sk])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                 :- Reused(reference_id=[1])
                                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_ship_customer_sk]]], fields=[cs_sold_date_sk, cs_ship_customer_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q12]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query12.tpl and seed 345591136
select  i_item_desc 
      ,i_category 
      ,i_class 
      ,i_current_price
      ,i_item_id
      ,sum(ws_ext_sales_price) as itemrevenue 
      ,sum(ws_ext_sales_price)*100/sum(sum(ws_ext_sales_price)) over
          (partition by i_class) as revenueratio
from	
	web_sales
    	,item 
    	,date_dim
where 
	ws_item_sk = i_item_sk 
  	and i_category in ('Jewelry', 'Sports', 'Books')
  	and ws_sold_date_sk = d_date_sk
	and d_date between cast('2001-01-12' as date) 
				and (cast('2001-01-12' as date) + interval '30' day)
group by 
	i_item_id
        ,i_item_desc 
        ,i_category
        ,i_class
        ,i_current_price
order by 
	i_category
        ,i_class
        ,i_item_id
        ,i_item_desc
        ,revenueratio
limit 100

-- end query 1 in stream 0 using template query12.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$1], sort1=[$2], sort2=[$4], sort3=[$0], sort4=[$6], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], fetch=[100])
+- LogicalProject(i_item_desc=[$1], i_category=[$2], i_class=[$3], i_current_price=[$4], i_item_id=[$0], itemrevenue=[$5], revenueratio=[/(*($5, 100), CASE(>(COUNT($5) OVER (PARTITION BY $3), 0), $SUM0($5) OVER (PARTITION BY $3), null:DOUBLE))])
   +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], itemrevenue=[SUM($5)])
      +- LogicalProject(i_item_id=[$35], i_item_desc=[$38], i_category=[$46], i_class=[$44], i_current_price=[$39], ws_ext_sales_price=[$23])
         +- LogicalFilter(condition=[AND(=($3, $34), OR(=($46, _UTF-16LE'Jewelry'), =($46, _UTF-16LE'Sports'), =($46, _UTF-16LE'Books')), =($0, $56), >=($58, CAST(_UTF-16LE'2001-01-12'):DATE NOT NULL), <=($58, +(CAST(_UTF-16LE'2001-01-12'):DATE NOT NULL, 2592000000:INTERVAL DAY)))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
               :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
               +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[i_category ASC, i_class ASC, i_item_id ASC, i_item_desc ASC, revenueratio ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_category ASC, i_class ASC, i_item_id ASC, i_item_desc ASC, revenueratio ASC], offset=[0], fetch=[100], global=[false])
      +- Calc(select=[i_item_desc, i_category, i_class, i_current_price, i_item_id, itemrevenue, ($6 / CASE((w0$o0 > 0), w0$o1, null:DOUBLE)) AS revenueratio])
         +- OverAggregate(partitionBy=[i_class], window#0=[COUNT(itemrevenue) AS w0$o0, $SUM0(itemrevenue) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, itemrevenue, $6, w0$o0, w0$o1])
            +- Calc(select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, itemrevenue, (itemrevenue * 100) AS $6])
               +- Sort(orderBy=[i_class ASC])
                  +- Exchange(distribution=[hash[i_class]])
                     +- HashAggregate(isMerge=[true], groupBy=[i_item_id, i_item_desc, i_current_price, i_class, i_category], select=[i_item_id, i_item_desc, i_current_price, i_class, i_category, Final_SUM(sum$0) AS itemrevenue])
                        +- Exchange(distribution=[hash[i_item_id, i_item_desc, i_current_price, i_class, i_category]])
                           +- LocalHashAggregate(groupBy=[i_item_id, i_item_desc, i_current_price, i_class, i_category], select=[i_item_id, i_item_desc, i_current_price, i_class, i_category, Partial_SUM(itemrevenue) AS sum$0])
                              +- MultipleInput(members=[\nSortMergeJoin(joinType=[InnerJoin], where=[(ws_item_sk = i_item_sk)], select=[ws_item_sk, itemrevenue, i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category])\n:- HashAggregate(isMerge=[true], groupBy=[ws_item_sk], select=[ws_item_sk, Final_SUM(sum$0) AS itemrevenue])\n:  +- [#2] Exchange(distribution=[hash[ws_item_sk]])\n+- [#1] Exchange(distribution=[hash[i_item_sk]])\n])
                                 :- Exchange(distribution=[hash[i_item_sk]])
                                 :  +- Calc(select=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category], where=[SEARCH(i_category, Sarg[_UTF-16LE'Books', _UTF-16LE'Jewelry', _UTF-16LE'Sports'])])
                                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category]]], fields=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category])
                                 +- Exchange(distribution=[hash[ws_item_sk]])
                                    +- LocalHashAggregate(groupBy=[ws_item_sk], select=[ws_item_sk, Partial_SUM(ws_ext_sales_price) AS sum$0])
                                       +- Calc(select=[ws_item_sk, ws_ext_sales_price])
                                          +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price])\n+- [#2] Exchange(distribution=[broadcast])\n])
                                             :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price])
                                             +- Exchange(distribution=[broadcast])
                                                +- Calc(select=[d_date_sk], where=[SEARCH(d_date, Sarg[[2001-01-12..2001-02-11]])])
                                                   +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q13]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query13.tpl and seed 622697896
select avg(ss_quantity)
       ,avg(ss_ext_sales_price)
       ,avg(ss_ext_wholesale_cost)
       ,sum(ss_ext_wholesale_cost)
 from store_sales
     ,store
     ,customer_demographics
     ,household_demographics
     ,customer_address
     ,date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 2001
 and((ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'M'
  and cd_education_status = '4 yr Degree'
  and ss_sales_price between 100.00 and 150.00
  and hd_dep_count = 3   
     )or
     (ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'D'
  and cd_education_status = 'Primary'
  and ss_sales_price between 50.00 and 100.00   
  and hd_dep_count = 1
     ) or 
     (ss_hdemo_sk=hd_demo_sk
  and cd_demo_sk = ss_cdemo_sk
  and cd_marital_status = 'U'
  and cd_education_status = 'Advanced Degree'
  and ss_sales_price between 150.00 and 200.00 
  and hd_dep_count = 1  
     ))
 and((ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('KY', 'GA', 'NM')
  and ss_net_profit between 100 and 200  
     ) or
     (ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('MT', 'OR', 'IN')
  and ss_net_profit between 150 and 300  
     ) or
     (ss_addr_sk = ca_address_sk
  and ca_country = 'United States'
  and ca_state in ('WI', 'MO', 'WV')
  and ss_net_profit between 50 and 250  
     ))


-- end query 1 in stream 0 using template query13.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)], EXPR$1=[AVG($1)], EXPR$2=[AVG($2)], EXPR$3=[SUM($2)])
+- LogicalProject(ss_quantity=[$10], ss_ext_sales_price=[$15], ss_ext_wholesale_cost=[$16])
   +- LogicalFilter(condition=[AND(=($23, $7), =($0, $79), =($85, 2001), OR(AND(=($5, $61), =($52, $4), =($54, _UTF-16LE'M'), =($55, _UTF-16LE'4 yr Degree'), >=($13, 100.00:DECIMAL(5, 2)), <=($13, 150.00:DECIMAL(5, 2)), =($64, 3)), AND(=($5, $61), =($52, $4), =($54, _UTF-16LE'D'), =($55, _UTF-16LE'Primary'), >=($13, 50.00:DECIMAL(4, 2)), <=($13, 100.00:DECIMAL(5, 2)), =($64, 1)), AND(=($5, $61), =($52, $4), =($54, _UTF-16LE'U'), =($55, _UTF-16LE'Advanced Degree'), >=($13, 150.00:DECIMAL(5, 2)), <=($13, 200.00:DECIMAL(5, 2)), =($64, 1))), OR(AND(=($6, $66), =($76, _UTF-16LE'United States'), OR(=($74, _UTF-16LE'KY'), =($74, _UTF-16LE'GA'), =($74, _UTF-16LE'NM')), >=($22, 100), <=($22, 200)), AND(=($6, $66), =($76, _UTF-16LE'United States'), OR(=($74, _UTF-16LE'MT'), =($74, _UTF-16LE'OR'), =($74, _UTF-16LE'IN')), >=($22, 150), <=($22, 300)), AND(=($6, $66), =($76, _UTF-16LE'United States'), OR(=($74, _UTF-16LE'WI'), =($74, _UTF-16LE'MO'), =($74, _UTF-16LE'WV')), >=($22, 50), <=($22, 250))))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
         :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
         :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
         :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
         +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
HashAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0, Final_AVG(sum$2, count$3) AS EXPR$1, Final_AVG(sum$4, count$5) AS EXPR$2, Final_SUM(sum$6) AS EXPR$3])
+- Exchange(distribution=[single])
   +- LocalHashAggregate(select=[Partial_AVG(ss_quantity) AS (sum$0, count$1), Partial_AVG(ss_ext_sales_price) AS (sum$2, count$3), Partial_AVG(ss_ext_wholesale_cost) AS (sum$4, count$5), Partial_SUM(ss_ext_wholesale_cost) AS sum$6])
      +- Calc(select=[ss_quantity, ss_ext_sales_price, ss_ext_wholesale_cost])
         +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[d_date_sk, ss_sold_date_sk, ss_quantity, ss_ext_sales_price, ss_ext_wholesale_cost], isBroadcast=[true], build=[right])\n:- Calc(select=[d_date_sk], where=[(d_year = 2001)])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :- Exchange(distribution=[broadcast])
            :  +- Calc(select=[ss_sold_date_sk, ss_quantity, ss_ext_sales_price, ss_ext_wholesale_cost])
            :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(s_store_sk = ss_store_sk)], select=[s_store_sk, ss_sold_date_sk, ss_store_sk, ss_quantity, ss_ext_sales_price, ss_ext_wholesale_cost], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk]]], fields=[s_store_sk])\n+- [#2] Exchange(distribution=[broadcast])\n])
            :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk]]], fields=[s_store_sk])
            :        +- Exchange(distribution=[broadcast])
            :           +- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_quantity, ss_ext_sales_price, ss_ext_wholesale_cost])
            :              +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[((ss_addr_sk = ca_address_sk) AND ((SEARCH(ca_state, Sarg[_UTF-16LE'GA', _UTF-16LE'KY', _UTF-16LE'NM']) AND SEARCH(ss_net_profit, Sarg[[100..200]])) OR (SEARCH(ca_state, Sarg[_UTF-16LE'IN', _UTF-16LE'MT', _UTF-16LE'OR']) AND SEARCH(ss_net_profit, Sarg[[150..300]])) OR (SEARCH(ca_state, Sarg[_UTF-16LE'MO', _UTF-16LE'WI', _UTF-16LE'WV']) AND SEARCH(ss_net_profit, Sarg[[50..250]]))))], select=[ca_address_sk, ca_state, ss_sold_date_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_ext_sales_price, ss_ext_wholesale_cost, ss_net_profit], isBroadcast=[true], build=[right])\n:- Calc(select=[ca_address_sk, ca_state], where=[(SEARCH(ca_country, Sarg[_UTF-16LE'United States']) AND SEARCH(ca_state, Sarg[_UTF-16LE'GA', _UTF-16LE'IN', _UTF-16LE'KY', _UTF-16LE'MO', _UTF-16LE'MT', _UTF-16LE'NM', _UTF-16LE'OR', _UTF-16LE'WI', _UTF-16LE'WV']))])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state, ca_country]]], fields=[ca_address_sk, ca_state, ca_country])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :                 :- Exchange(distribution=[broadcast])
            :                 :  +- Calc(select=[ss_sold_date_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_ext_sales_price, ss_ext_wholesale_cost, ss_net_profit])
            :                 :     +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[((ss_hdemo_sk = hd_demo_sk) AND ((SEARCH(cd_marital_status, Sarg[_UTF-16LE'M']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'4 yr Degree']) AND SEARCH(ss_sales_price, Sarg[[100.00..150.00]]) AND SEARCH(hd_dep_count, Sarg[3])) OR (SEARCH(cd_marital_status, Sarg[_UTF-16LE'D']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'Primary']) AND SEARCH(ss_sales_price, Sarg[[50.00..100.00]]) AND SEARCH(hd_dep_count, Sarg[1])) OR (SEARCH(cd_marital_status, Sarg[_UTF-16LE'U']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'Advanced Degree']) AND SEARCH(ss_sales_price, Sarg[[150.00..200.00]]) AND SEARCH(hd_dep_count, Sarg[1]))))], select=[ss_sold_date_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_ext_sales_price, ss_ext_wholesale_cost, ss_net_profit, cd_marital_status, cd_education_status, hd_demo_sk, hd_dep_count], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_ext_sales_price, ss_ext_wholesale_cost, ss_net_profit, cd_marital_status, cd_education_status])\n:  +- HashJoin(joinType=[InnerJoin], where=[((cd_demo_sk = ss_cdemo_sk) AND ((SEARCH(cd_marital_status, Sarg[_UTF-16LE'M']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'4 yr Degree']) AND SEARCH(ss_sales_price, Sarg[[100.00..150.00]])) OR (SEARCH(cd_marital_status, Sarg[_UTF-16LE'D']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'Primary']) AND SEARCH(ss_sales_price, Sarg[[50.00..100.00]])) OR (SEARCH(cd_marital_status, Sarg[_UTF-16LE'U']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'Advanced Degree']) AND SEARCH(ss_sales_price, Sarg[[150.00..200.00]]))))], select=[ss_sold_date_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_ext_sales_price, ss_ext_wholesale_cost, ss_net_profit, cd_demo_sk, cd_marital_status, cd_education_status], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_ext_sales_price, ss_ext_wholesale_cost, ss_net_profit], where=[((SEARCH(ss_net_profit, Sarg[[100..200]]) OR SEARCH(ss_net_profit, Sarg[[150..300]]) OR SEARCH(ss_net_profit, Sarg[[50..250]])) AND (SEARCH(ss_sales_price, Sarg[[100.00..150.00]]) OR SEARCH(ss_sales_price, Sarg[[50.00..100.00]]) OR SEARCH(ss_sales_price, Sarg[[150.00..200.00]])) AND ss_store_sk IS NOT NULL)])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_ext_sales_price, ss_ext_wholesale_cost, ss_net_profit]]], fields=[ss_sold_date_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_ext_sales_price, ss_ext_wholesale_cost, ss_net_profit])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :                 :        :- Exchange(distribution=[broadcast])
            :                 :        :  +- Calc(select=[hd_demo_sk, hd_dep_count], where=[SEARCH(hd_dep_count, Sarg[1, 3])])
            :                 :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, household_demographics, project=[hd_demo_sk, hd_dep_count]]], fields=[hd_demo_sk, hd_dep_count])
            :                 :        :- Exchange(distribution=[broadcast])
            :                 :        :  +- Calc(select=[cd_demo_sk, cd_marital_status, cd_education_status], where=[((SEARCH(cd_marital_status, Sarg[_UTF-16LE'M']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'4 yr Degree'])) OR (SEARCH(cd_marital_status, Sarg[_UTF-16LE'D']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'Primary'])) OR (SEARCH(cd_marital_status, Sarg[_UTF-16LE'U']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'Advanced Degree'])))])
            :                 :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk, cd_marital_status, cd_education_status]]], fields=[cd_demo_sk, cd_marital_status, cd_education_status])
            :                 :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_ext_sales_price, ss_ext_wholesale_cost, ss_net_profit]]], fields=[ss_sold_date_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_ext_sales_price, ss_ext_wholesale_cost, ss_net_profit])
            :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state, ca_country]]], fields=[ca_address_sk, ca_state, ca_country])
            +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q14a]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query14.tpl and seed 1819994127
with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
 (select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1999 and 2001
       union all
       select cs_quantity quantity
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  channel, i_brand_id,i_class_id,i_category_id,sum(sales), sum(number_sales)
 from(
       select 'store' channel, i_brand_id,i_class_id
             ,i_category_id,sum(ss_quantity*ss_list_price) sales
             , count(*) number_sales
       from store_sales
           ,item
           ,date_dim
       where ss_item_sk in (select ss_item_sk from cross_items)
         and ss_item_sk = i_item_sk
         and ss_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)
       union all
       select 'catalog' channel, i_brand_id,i_class_id,i_category_id, sum(cs_quantity*cs_list_price) sales, count(*) number_sales
       from catalog_sales
           ,item
           ,date_dim
       where cs_item_sk in (select ss_item_sk from cross_items)
         and cs_item_sk = i_item_sk
         and cs_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(cs_quantity*cs_list_price) > (select average_sales from avg_sales)
       union all
       select 'web' channel, i_brand_id,i_class_id,i_category_id, sum(ws_quantity*ws_list_price) sales , count(*) number_sales
       from web_sales
           ,item
           ,date_dim
       where ws_item_sk in (select ss_item_sk from cross_items)
         and ws_item_sk = i_item_sk
         and ws_sold_date_sk = d_date_sk
         and d_year = 1998+2
         and d_moy = 11
       group by i_brand_id,i_class_id,i_category_id
       having sum(ws_quantity*ws_list_price) > (select average_sales from avg_sales)
 ) y
 group by rollup (channel, i_brand_id,i_class_id,i_category_id)
 order by channel,i_brand_id,i_class_id,i_category_id
 limit 100
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2, 3}], groups=[[{0, 1, 2, 3}, {0, 1, 2}, {0, 1}, {0}, {}]], EXPR$4=[SUM($4)], EXPR$5=[SUM($5)])
   +- LogicalUnion(all=[true])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(channel=[_UTF-16LE'store'], i_brand_id=[$0], i_class_id=[$1], i_category_id=[$2], sales=[$3], number_sales=[$4])
      :  :  +- LogicalFilter(condition=[>($3, $SCALAR_QUERY({
LogicalProject(average_sales=[$0])
  LogicalAggregate(group=[{}], average_sales=[AVG($0)])
    LogicalProject($f0=[*($0, $1)])
      LogicalUnion(all=[true])
        LogicalUnion(all=[true])
          LogicalProject(quantity=[$10], list_price=[$12])
            LogicalFilter(condition=[AND(=($0, $23), >=($29, 1999), <=($29, 2001))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
          LogicalProject(quantity=[$18], list_price=[$20])
            LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
        LogicalProject(quantity=[$18], list_price=[$20])
          LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
}))])
      :  :     +- LogicalAggregate(group=[{0, 1, 2}], sales=[SUM($3)], number_sales=[COUNT()])
      :  :        +- LogicalProject(i_brand_id=[$30], i_class_id=[$32], i_category_id=[$34], $f3=[*($10, $12)])
      :  :           +- LogicalFilter(condition=[AND(IN($2, {
LogicalProject(ss_item_sk=[$0])
  LogicalFilter(condition=[AND(=($7, $22), =($9, $23), =($11, $24))])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
      LogicalIntersect(all=[false])
        LogicalIntersect(all=[false])
          LogicalProject(brand_id=[$30], class_id=[$32], category_id=[$34])
            LogicalFilter(condition=[AND(=($2, $23), =($0, $45), >=($51, 1999), <=($51, +(1999, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
          LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
            LogicalFilter(condition=[AND(=($15, $34), =($0, $56), >=($62, 1999), <=($62, +(1999, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
        LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
          LogicalFilter(condition=[AND(=($3, $34), =($0, $56), >=($62, 1999), <=($62, +(1999, 2)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
}), =($2, $23), =($0, $45), =($51, +(1998, 2)), =($53, 11))])
      :  :              +- LogicalJoin(condition=[true], joinType=[inner])
      :  :                 :- LogicalJoin(condition=[true], joinType=[inner])
      :  :                 :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
      :  :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
      :  :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      :  +- LogicalProject(channel=[_UTF-16LE'catalog'], i_brand_id=[$0], i_class_id=[$1], i_category_id=[$2], sales=[$3], number_sales=[$4])
      :     +- LogicalFilter(condition=[>($3, $SCALAR_QUERY({
LogicalProject(average_sales=[$0])
  LogicalAggregate(group=[{}], average_sales=[AVG($0)])
    LogicalProject($f0=[*($0, $1)])
      LogicalUnion(all=[true])
        LogicalUnion(all=[true])
          LogicalProject(quantity=[$10], list_price=[$12])
            LogicalFilter(condition=[AND(=($0, $23), >=($29, 1999), <=($29, 2001))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
          LogicalProject(quantity=[$18], list_price=[$20])
            LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
        LogicalProject(quantity=[$18], list_price=[$20])
          LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
}))])
      :        +- LogicalAggregate(group=[{0, 1, 2}], sales=[SUM($3)], number_sales=[COUNT()])
      :           +- LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45], $f3=[*($18, $20)])
      :              +- LogicalFilter(condition=[AND(IN($15, {
LogicalProject(ss_item_sk=[$0])
  LogicalFilter(condition=[AND(=($7, $22), =($9, $23), =($11, $24))])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
      LogicalIntersect(all=[false])
        LogicalIntersect(all=[false])
          LogicalProject(brand_id=[$30], class_id=[$32], category_id=[$34])
            LogicalFilter(condition=[AND(=($2, $23), =($0, $45), >=($51, 1999), <=($51, +(1999, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
          LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
            LogicalFilter(condition=[AND(=($15, $34), =($0, $56), >=($62, 1999), <=($62, +(1999, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
        LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
          LogicalFilter(condition=[AND(=($3, $34), =($0, $56), >=($62, 1999), <=($62, +(1999, 2)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
}), =($15, $34), =($0, $56), =($62, +(1998, 2)), =($64, 11))])
      :                 +- LogicalJoin(condition=[true], joinType=[inner])
      :                    :- LogicalJoin(condition=[true], joinType=[inner])
      :                    :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
      :                    :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
      :                    +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      +- LogicalProject(channel=[_UTF-16LE'web'], i_brand_id=[$0], i_class_id=[$1], i_category_id=[$2], sales=[$3], number_sales=[$4])
         +- LogicalFilter(condition=[>($3, $SCALAR_QUERY({
LogicalProject(average_sales=[$0])
  LogicalAggregate(group=[{}], average_sales=[AVG($0)])
    LogicalProject($f0=[*($0, $1)])
      LogicalUnion(all=[true])
        LogicalUnion(all=[true])
          LogicalProject(quantity=[$10], list_price=[$12])
            LogicalFilter(condition=[AND(=($0, $23), >=($29, 1999), <=($29, 2001))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
          LogicalProject(quantity=[$18], list_price=[$20])
            LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
        LogicalProject(quantity=[$18], list_price=[$20])
          LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
}))])
            +- LogicalAggregate(group=[{0, 1, 2}], sales=[SUM($3)], number_sales=[COUNT()])
               +- LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45], $f3=[*($18, $20)])
                  +- LogicalFilter(condition=[AND(IN($3, {
LogicalProject(ss_item_sk=[$0])
  LogicalFilter(condition=[AND(=($7, $22), =($9, $23), =($11, $24))])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
      LogicalIntersect(all=[false])
        LogicalIntersect(all=[false])
          LogicalProject(brand_id=[$30], class_id=[$32], category_id=[$34])
            LogicalFilter(condition=[AND(=($2, $23), =($0, $45), >=($51, 1999), <=($51, +(1999, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
          LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
            LogicalFilter(condition=[AND(=($15, $34), =($0, $56), >=($62, 1999), <=($62, +(1999, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
        LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
          LogicalFilter(condition=[AND(=($3, $34), =($0, $56), >=($62, 1999), <=($62, +(1999, 2)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
}), =($3, $34), =($0, $56), =($62, +(1998, 2)), =($64, 11))])
                     +- LogicalJoin(condition=[true], joinType=[inner])
                        :- LogicalJoin(condition=[true], joinType=[inner])
                        :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                        :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                        +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[channel, i_brand_id, i_class_id, i_category_id, EXPR$4, EXPR$5])
+- SortLimit(orderBy=[channel ASC, i_brand_id ASC, i_class_id ASC, i_category_id ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[channel ASC, i_brand_id ASC, i_class_id ASC, i_category_id ASC], offset=[0], fetch=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[channel, i_brand_id, i_class_id, i_category_id, $e], select=[channel, i_brand_id, i_class_id, i_category_id, $e, Final_SUM(sum$0) AS EXPR$4, Final_SUM(sum$1) AS EXPR$5])
            +- Exchange(distribution=[hash[channel, i_brand_id, i_class_id, i_category_id, $e]])
               +- LocalHashAggregate(groupBy=[channel, i_brand_id, i_class_id, i_category_id, $e], select=[channel, i_brand_id, i_class_id, i_category_id, $e, Partial_SUM(sales) AS sum$0, Partial_SUM(number_sales) AS sum$1])
                  +- Expand(projects=[{channel, i_brand_id, i_class_id, i_category_id, sales, number_sales, 0 AS $e}, {channel, i_brand_id, i_class_id, null AS i_category_id, sales, number_sales, 1 AS $e}, {channel, i_brand_id, null AS i_class_id, null AS i_category_id, sales, number_sales, 3 AS $e}, {channel, null AS i_brand_id, null AS i_class_id, null AS i_category_id, sales, number_sales, 7 AS $e}, {null AS channel, null AS i_brand_id, null AS i_class_id, null AS i_category_id, sales, number_sales, 15 AS $e}])
                     +- MultipleInput(readOrder=[0,0,0,1,1,1], members=[\nUnion(all=[true], union=[channel, i_brand_id, i_class_id, i_category_id, sales, number_sales])\n:- Union(all=[true], union=[channel, i_brand_id, i_class_id, i_category_id, sales, number_sales])\n:  :- Calc(select=['store' AS channel, i_brand_id, i_class_id, i_category_id, sales, number_sales])\n:  :  +- NestedLoopJoin(joinType=[InnerJoin], where=[(sales > $f0)], select=[i_brand_id, i_class_id, i_category_id, sales, number_sales, $f0], build=[right], singleRowJoin=[true])\n:  :     :- HashAggregate(isMerge=[true], groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Final_SUM(sum$0) AS sales, Final_COUNT(count1$1) AS number_sales])\n:  :     :  +- [#5] Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])\n:  :     +- [#1] Exchange(distribution=[broadcast])\n:  +- Calc(select=['catalog' AS channel, i_brand_id, i_class_id, i_category_id, sales, number_sales])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[(sales > $f0)], select=[i_brand_id, i_class_id, i_category_id, sales, number_sales, $f0], build=[right], singleRowJoin=[true])\n:        :- HashAggregate(isMerge=[true], groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Final_SUM(sum$0) AS sales, Final_COUNT(count1$1) AS number_sales])\n:        :  +- [#6] Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])\n:        +- [#1] Exchange(distribution=[broadcast])\n+- Calc(select=['web' AS channel, i_brand_id, i_class_id, i_category_id, sales, number_sales])\n   +- NestedLoopJoin(joinType=[InnerJoin], where=[(sales > $f0)], select=[i_brand_id, i_class_id, i_category_id, sales, number_sales, $f0], build=[right], singleRowJoin=[true])\n      :- HashAggregate(isMerge=[true], groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Final_SUM(sum$0) AS sales, Final_COUNT(count1$1) AS number_sales])\n      :  +- [#4] Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])\n      +- [#1] Exchange(distribution=[broadcast])\n])
                        :- Exchange(distribution=[broadcast])(reuse_id=[2])
                        :  +- HashAggregate(isMerge=[false], select=[SINGLE_VALUE(average_sales) AS $f0])
                        :     +- HashAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS average_sales])
                        :        +- Exchange(distribution=[single])
                        :           +- LocalHashAggregate(select=[Partial_AVG($f0) AS (sum$0, count$1)])
                        :              +- MultipleInput(readOrder=[1,0,0,0,1,1], members=[\nUnion(all=[true], union=[$f0])\n:- Union(all=[true], union=[$f0])\n:  :- Calc(select=[(ss_quantity * ss_list_price) AS $f0])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_quantity, ss_list_price, d_date_sk], isBroadcast=[true], build=[right])\n:  :     :- Calc(select=[ss_sold_date_sk, ss_quantity, ss_list_price], where=[ss_sold_date_sk IS NOT NULL])\n:  :     :  +- [#5] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_quantity, ss_list_price]]], fields=[ss_sold_date_sk, ss_quantity, ss_list_price])\n:  :     +- [#3] Exchange(distribution=[broadcast])\n:  +- Calc(select=[(cs_quantity * cs_list_price) AS $f0])\n:     +- HashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_quantity, cs_list_price, d_date_sk], isBroadcast=[true], build=[right])\n:        :- Calc(select=[cs_sold_date_sk, cs_quantity, cs_list_price], where=[cs_sold_date_sk IS NOT NULL])\n:        :  +- [#6] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_quantity, cs_list_price]]], fields=[cs_sold_date_sk, cs_quantity, cs_list_price])\n:        +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[(ws_quantity * ws_list_price) AS $f0])\n   +- HashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_quantity, ws_list_price, d_date_sk], isBroadcast=[true], build=[right])\n      :- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_quantity, ws_list_price]]], fields=[ws_sold_date_sk, ws_quantity, ws_list_price])\n      +- [#2] Exchange(distribution=[broadcast])\n])
                        :                 :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_quantity, ws_list_price]]], fields=[ws_sold_date_sk, ws_quantity, ws_list_price])
                        :                 :- Exchange(distribution=[broadcast])(reuse_id=[1])
                        :                 :  +- Calc(select=[d_date_sk], where=[SEARCH(d_year, Sarg[[1998..2000]])])
                        :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
                        :                 :- Exchange(distribution=[broadcast])(reuse_id=[3])
                        :                 :  +- Calc(select=[d_date_sk], where=[SEARCH(d_year, Sarg[[1999..2001]])])
                        :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
                        :                 :- Reused(reference_id=[1])
                        :                 :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_quantity, ss_list_price]]], fields=[ss_sold_date_sk, ss_quantity, ss_list_price])
                        :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_quantity, cs_list_price]]], fields=[cs_sold_date_sk, cs_quantity, cs_list_price])
                        :- Reused(reference_id=[2])
                        :- Reused(reference_id=[2])
                        :- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
                        :  +- LocalHashAggregate(groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Partial_SUM($f3) AS sum$0, Partial_COUNT(*) AS count1$1])
                        :     +- Calc(select=[i_brand_id, i_class_id, i_category_id, (ws_quantity * ws_list_price) AS $f3])
                        :        +- HashJoin(joinType=[InnerJoin], where=[(ws_item_sk = i_item_sk)], select=[ws_item_sk, ws_quantity, ws_list_price, i_item_sk, i_brand_id, i_class_id, i_category_id], build=[right])
                        :           :- Exchange(distribution=[hash[ws_item_sk]])
                        :           :  +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[LeftSemiJoin], where=[(ws_item_sk = ss_item_sk)], select=[ws_item_sk, ws_quantity, ws_list_price], isBroadcast=[true], build=[right], tryDistinctBuildRow=[true])\n:- Calc(select=[ws_item_sk, ws_quantity, ws_list_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_quantity, ws_list_price, d_date_sk], isBroadcast=[true], build=[right])\n:     :- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_quantity, ws_list_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_quantity, ws_list_price])\n:     +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :           :     :- Exchange(distribution=[broadcast])(reuse_id=[4])
                        :           :     :  +- LocalHashAggregate(groupBy=[ss_item_sk], select=[ss_item_sk])
                        :           :     :     +- Calc(select=[i_item_sk AS ss_item_sk])
                        :           :     :        +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[((i_brand_id0 = i_brand_id) AND (i_class_id0 = i_class_id) AND (i_category_id0 = i_category_id))], select=[i_brand_id, i_class_id, i_category_id, i_item_sk, i_brand_id0, i_class_id0, i_category_id0], isBroadcast=[true], build=[left])\n:- [#1] Exchange(distribution=[broadcast])\n+- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_class_id, i_category_id]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])\n])
                        :           :     :           :- Exchange(distribution=[broadcast])
                        :           :     :           :  +- MultipleInput(readOrder=[2,0,0,1], members=[\nHashJoin(joinType=[LeftSemiJoin], where=[(((i_brand_id = i_brand_id0) OR (i_brand_id IS NULL AND i_brand_id0 IS NULL)) AND ((i_class_id = i_class_id0) OR (i_class_id IS NULL AND i_class_id0 IS NULL)) AND ((i_category_id = i_category_id0) OR (i_category_id IS NULL AND i_category_id0 IS NULL)))], select=[i_brand_id, i_class_id, i_category_id], build=[left], tryDistinctBuildRow=[true])\n:- HashAggregate(isMerge=[false], groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, i_item_sk, i_brand_id, i_class_id, i_category_id], isBroadcast=[true], build=[left])\n:     :- [#2] Exchange(distribution=[broadcast])\n:     +- HashJoin(joinType=[LeftSemiJoin], where=[(((i_brand_id = i_brand_id0) OR (i_brand_id IS NULL AND i_brand_id0 IS NULL)) AND ((i_class_id = i_class_id0) OR (i_class_id IS NULL AND i_class_id0 IS NULL)) AND ((i_category_id = i_category_id0) OR (i_category_id IS NULL AND i_category_id0 IS NULL)))], select=[i_item_sk, i_brand_id, i_class_id, i_category_id], build=[left], tryDistinctBuildRow=[true])\n:        :- [#3] Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])\n:        +- [#4] Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])\n+- [#1] Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])\n])
                        :           :     :           :     :- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
                        :           :     :           :     :  +- LocalHashAggregate(groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id])
                        :           :     :           :     :     +- Calc(select=[i_brand_id, i_class_id, i_category_id])
                        :           :     :           :     :        +- HashJoin(joinType=[InnerJoin], where=[(ws_item_sk = i_item_sk)], select=[ws_item_sk, i_item_sk, i_brand_id, i_class_id, i_category_id], build=[right])
                        :           :     :           :     :           :- Exchange(distribution=[hash[ws_item_sk]])
                        :           :     :           :     :           :  +- Calc(select=[ws_item_sk])
                        :           :     :           :     :           :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_item_sk, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk]]], fields=[ws_sold_date_sk, ws_item_sk])\n+- [#2] Exchange(distribution=[broadcast])\n])
                        :           :     :           :     :           :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk]]], fields=[ws_sold_date_sk, ws_item_sk])
                        :           :     :           :     :           :        +- Reused(reference_id=[3])
                        :           :     :           :     :           +- Exchange(distribution=[hash[i_item_sk]])
                        :           :     :           :     :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_class_id, i_category_id]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
                        :           :     :           :     :- Exchange(distribution=[broadcast])
                        :           :     :           :     :  +- HashAggregate(isMerge=[true], groupBy=[ss_item_sk], select=[ss_item_sk])
                        :           :     :           :     :     +- Exchange(distribution=[hash[ss_item_sk]])
                        :           :     :           :     :        +- LocalHashAggregate(groupBy=[ss_item_sk], select=[ss_item_sk])
                        :           :     :           :     :           +- Calc(select=[ss_item_sk])
                        :           :     :           :     :              +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_item_sk], where=[ss_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk]]], fields=[ss_sold_date_sk, ss_item_sk])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :           :     :           :     :                 :- Reused(reference_id=[3])
                        :           :     :           :     :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk]]], fields=[ss_sold_date_sk, ss_item_sk])
                        :           :     :           :     :- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
                        :           :     :           :     :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_class_id, i_category_id]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
                        :           :     :           :     +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
                        :           :     :           :        +- LocalHashAggregate(groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id])
                        :           :     :           :           +- Calc(select=[i_brand_id, i_class_id, i_category_id])
                        :           :     :           :              +- HashJoin(joinType=[InnerJoin], where=[(cs_item_sk = i_item_sk)], select=[cs_item_sk, i_item_sk, i_brand_id, i_class_id, i_category_id], build=[right])
                        :           :     :           :                 :- Exchange(distribution=[hash[cs_item_sk]])
                        :           :     :           :                 :  +- Calc(select=[cs_item_sk])
                        :           :     :           :                 :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_item_sk, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_item_sk], where=[cs_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_item_sk]]], fields=[cs_sold_date_sk, cs_item_sk])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :           :     :           :                 :        :- Reused(reference_id=[3])
                        :           :     :           :                 :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_item_sk]]], fields=[cs_sold_date_sk, cs_item_sk])
                        :           :     :           :                 +- Exchange(distribution=[hash[i_item_sk]])
                        :           :     :           :                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_class_id, i_category_id]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
                        :           :     :           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_class_id, i_category_id]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
                        :           :     :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_quantity, ws_list_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_quantity, ws_list_price])
                        :           :     +- Exchange(distribution=[broadcast])(reuse_id=[5])
                        :           :        +- Calc(select=[d_date_sk], where=[((d_year = 2000) AND (d_moy = 11))])
                        :           :           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                        :           +- Exchange(distribution=[hash[i_item_sk]])
                        :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_class_id, i_category_id]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
                        :- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
                        :  +- LocalHashAggregate(groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Partial_SUM($f3) AS sum$0, Partial_COUNT(*) AS count1$1])
                        :     +- Calc(select=[i_brand_id, i_class_id, i_category_id, (ss_quantity * ss_list_price) AS $f3])
                        :        +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, ss_quantity, ss_list_price, i_item_sk, i_brand_id, i_class_id, i_category_id], build=[right])
                        :           :- Exchange(distribution=[hash[ss_item_sk]])
                        :           :  +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[LeftSemiJoin], where=[(ss_item_sk = ss_item_sk0)], select=[ss_item_sk, ss_quantity, ss_list_price], isBroadcast=[true], build=[right], tryDistinctBuildRow=[true])\n:- Calc(select=[ss_item_sk, ss_quantity, ss_list_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price], where=[ss_sold_date_sk IS NOT NULL])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :           :     :- Reused(reference_id=[4])
                        :           :     :- Reused(reference_id=[5])
                        :           :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price])
                        :           +- Exchange(distribution=[hash[i_item_sk]])
                        :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_class_id, i_category_id]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
                        +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
                           +- LocalHashAggregate(groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Partial_SUM($f3) AS sum$0, Partial_COUNT(*) AS count1$1])
                              +- Calc(select=[i_brand_id, i_class_id, i_category_id, (cs_quantity * cs_list_price) AS $f3])
                                 +- HashJoin(joinType=[InnerJoin], where=[(cs_item_sk = i_item_sk)], select=[cs_item_sk, cs_quantity, cs_list_price, i_item_sk, i_brand_id, i_class_id, i_category_id], build=[right])
                                    :- Exchange(distribution=[hash[cs_item_sk]])
                                    :  +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[LeftSemiJoin], where=[(cs_item_sk = ss_item_sk)], select=[cs_item_sk, cs_quantity, cs_list_price], isBroadcast=[true], build=[right], tryDistinctBuildRow=[true])\n:- Calc(select=[cs_item_sk, cs_quantity, cs_list_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_list_price, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_list_price], where=[cs_sold_date_sk IS NOT NULL])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_list_price]]], fields=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_list_price])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                    :     :- Reused(reference_id=[4])
                                    :     :- Reused(reference_id=[5])
                                    :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_list_price]]], fields=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_list_price])
                                    +- Exchange(distribution=[hash[i_item_sk]])
                                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_class_id, i_category_id]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q14b]">
    <Resource name="sql">
      <![CDATA[with  cross_items as
 (select i_item_sk ss_item_sk
 from item,
 (select iss.i_brand_id brand_id
     ,iss.i_class_id class_id
     ,iss.i_category_id category_id
 from store_sales
     ,item iss
     ,date_dim d1
 where ss_item_sk = iss.i_item_sk
   and ss_sold_date_sk = d1.d_date_sk
   and d1.d_year between 1999 AND 1999 + 2
 intersect
 select ics.i_brand_id
     ,ics.i_class_id
     ,ics.i_category_id
 from catalog_sales
     ,item ics
     ,date_dim d2
 where cs_item_sk = ics.i_item_sk
   and cs_sold_date_sk = d2.d_date_sk
   and d2.d_year between 1999 AND 1999 + 2
 intersect
 select iws.i_brand_id
     ,iws.i_class_id
     ,iws.i_category_id
 from web_sales
     ,item iws
     ,date_dim d3
 where ws_item_sk = iws.i_item_sk
   and ws_sold_date_sk = d3.d_date_sk
   and d3.d_year between 1999 AND 1999 + 2) x
 where i_brand_id = brand_id
      and i_class_id = class_id
      and i_category_id = category_id
),
 avg_sales as
(select avg(quantity*list_price) average_sales
  from (select ss_quantity quantity
             ,ss_list_price list_price
       from store_sales
           ,date_dim
       where ss_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2
       union all
       select cs_quantity quantity
             ,cs_list_price list_price
       from catalog_sales
           ,date_dim
       where cs_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2
       union all
       select ws_quantity quantity
             ,ws_list_price list_price
       from web_sales
           ,date_dim
       where ws_sold_date_sk = d_date_sk
         and d_year between 1998 and 1998 + 2) x)
  select  * from
 (select 'store' channel, i_brand_id,i_class_id,i_category_id
        ,sum(ss_quantity*ss_list_price) sales, count(*) number_sales
 from store_sales
     ,item
     ,date_dim
 where ss_item_sk in (select ss_item_sk from cross_items)
   and ss_item_sk = i_item_sk
   and ss_sold_date_sk = d_date_sk
   and d_week_seq = (select d_week_seq
                     from date_dim
                     where d_year = 1998 + 1
                       and d_moy = 12
                       and d_dom = 16)
 group by i_brand_id,i_class_id,i_category_id
 having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) this_year,
 (select 'store' channel, i_brand_id,i_class_id
        ,i_category_id, sum(ss_quantity*ss_list_price) sales, count(*) number_sales
 from store_sales
     ,item
     ,date_dim
 where ss_item_sk in (select ss_item_sk from cross_items)
   and ss_item_sk = i_item_sk
   and ss_sold_date_sk = d_date_sk
   and d_week_seq = (select d_week_seq
                     from date_dim
                     where d_year = 1998
                       and d_moy = 12
                       and d_dom = 16)
 group by i_brand_id,i_class_id,i_category_id
 having sum(ss_quantity*ss_list_price) > (select average_sales from avg_sales)) last_year
 where this_year.i_brand_id= last_year.i_brand_id
   and this_year.i_class_id = last_year.i_class_id
   and this_year.i_category_id = last_year.i_category_id
 order by this_year.channel, this_year.i_brand_id, this_year.i_class_id, this_year.i_category_id
 limit 100
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalProject(channel=[$0], i_brand_id=[$1], i_class_id=[$2], i_category_id=[$3], sales=[$4], number_sales=[$5], channel0=[$6], i_brand_id0=[$7], i_class_id0=[$8], i_category_id0=[$9], sales0=[$10], number_sales0=[$11])
   +- LogicalFilter(condition=[AND(=($1, $7), =($2, $8), =($3, $9))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(channel=[_UTF-16LE'store'], i_brand_id=[$0], i_class_id=[$1], i_category_id=[$2], sales=[$3], number_sales=[$4])
         :  +- LogicalFilter(condition=[>($3, $SCALAR_QUERY({
LogicalProject(average_sales=[$0])
  LogicalAggregate(group=[{}], average_sales=[AVG($0)])
    LogicalProject($f0=[*($0, $1)])
      LogicalUnion(all=[true])
        LogicalUnion(all=[true])
          LogicalProject(quantity=[$10], list_price=[$12])
            LogicalFilter(condition=[AND(=($0, $23), >=($29, 1998), <=($29, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
          LogicalProject(quantity=[$18], list_price=[$20])
            LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
        LogicalProject(quantity=[$18], list_price=[$20])
          LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
}))])
         :     +- LogicalAggregate(group=[{0, 1, 2}], sales=[SUM($3)], number_sales=[COUNT()])
         :        +- LogicalProject(i_brand_id=[$30], i_class_id=[$32], i_category_id=[$34], $f3=[*($10, $12)])
         :           +- LogicalFilter(condition=[AND(IN($2, {
LogicalProject(ss_item_sk=[$0])
  LogicalFilter(condition=[AND(=($7, $22), =($9, $23), =($11, $24))])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
      LogicalIntersect(all=[false])
        LogicalIntersect(all=[false])
          LogicalProject(brand_id=[$30], class_id=[$32], category_id=[$34])
            LogicalFilter(condition=[AND(=($2, $23), =($0, $45), >=($51, 1999), <=($51, +(1999, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
          LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
            LogicalFilter(condition=[AND(=($15, $34), =($0, $56), >=($62, 1999), <=($62, +(1999, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
        LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
          LogicalFilter(condition=[AND(=($3, $34), =($0, $56), >=($62, 1999), <=($62, +(1999, 2)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
}), =($2, $23), =($0, $45), =($49, $SCALAR_QUERY({
LogicalProject(d_week_seq=[$4])
  LogicalFilter(condition=[AND(=($6, +(1998, 1)), =($8, 12), =($9, 16))])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
})))])
         :              +- LogicalJoin(condition=[true], joinType=[inner])
         :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :                 :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
         :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         +- LogicalProject(channel=[_UTF-16LE'store'], i_brand_id=[$0], i_class_id=[$1], i_category_id=[$2], sales=[$3], number_sales=[$4])
            +- LogicalFilter(condition=[>($3, $SCALAR_QUERY({
LogicalProject(average_sales=[$0])
  LogicalAggregate(group=[{}], average_sales=[AVG($0)])
    LogicalProject($f0=[*($0, $1)])
      LogicalUnion(all=[true])
        LogicalUnion(all=[true])
          LogicalProject(quantity=[$10], list_price=[$12])
            LogicalFilter(condition=[AND(=($0, $23), >=($29, 1998), <=($29, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
          LogicalProject(quantity=[$18], list_price=[$20])
            LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
        LogicalProject(quantity=[$18], list_price=[$20])
          LogicalFilter(condition=[AND(=($0, $34), >=($40, 1998), <=($40, +(1998, 2)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
}))])
               +- LogicalAggregate(group=[{0, 1, 2}], sales=[SUM($3)], number_sales=[COUNT()])
                  +- LogicalProject(i_brand_id=[$30], i_class_id=[$32], i_category_id=[$34], $f3=[*($10, $12)])
                     +- LogicalFilter(condition=[AND(IN($2, {
LogicalProject(ss_item_sk=[$0])
  LogicalFilter(condition=[AND(=($7, $22), =($9, $23), =($11, $24))])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
      LogicalIntersect(all=[false])
        LogicalIntersect(all=[false])
          LogicalProject(brand_id=[$30], class_id=[$32], category_id=[$34])
            LogicalFilter(condition=[AND(=($2, $23), =($0, $45), >=($51, 1999), <=($51, +(1999, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
          LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
            LogicalFilter(condition=[AND(=($15, $34), =($0, $56), >=($62, 1999), <=($62, +(1999, 2)))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
        LogicalProject(i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45])
          LogicalFilter(condition=[AND(=($3, $34), =($0, $56), >=($62, 1999), <=($62, +(1999, 2)))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
}), =($2, $23), =($0, $45), =($49, $SCALAR_QUERY({
LogicalProject(d_week_seq=[$4])
  LogicalFilter(condition=[AND(=($6, 1998), =($8, 12), =($9, 16))])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
})))])
                        +- LogicalJoin(condition=[true], joinType=[inner])
                           :- LogicalJoin(condition=[true], joinType=[inner])
                           :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[channel ASC, i_brand_id ASC, i_class_id ASC, i_category_id ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[channel ASC, i_brand_id ASC, i_class_id ASC, i_category_id ASC], offset=[0], fetch=[100], global=[false])
      +- Calc(select=['store' AS channel, i_brand_id, i_class_id, i_category_id, sales, number_sales, 'store' AS channel0, i_brand_id0, i_class_id0, i_category_id0, sales0, number_sales0])
         +- HashJoin(joinType=[InnerJoin], where=[((i_brand_id = i_brand_id0) AND (i_class_id = i_class_id0) AND (i_category_id = i_category_id0))], select=[i_brand_id, i_class_id, i_category_id, sales, number_sales, i_brand_id0, i_class_id0, i_category_id0, sales0, number_sales0], isBroadcast=[true], build=[right])
            :- Exchange(distribution=[any])
            :  +- Calc(select=[i_brand_id, i_class_id, i_category_id, sales, number_sales])
            :     +- MultipleInput(readOrder=[0,1], members=[\nNestedLoopJoin(joinType=[InnerJoin], where=[(sales > $f0)], select=[i_brand_id, i_class_id, i_category_id, sales, number_sales, $f0], build=[right], singleRowJoin=[true])\n:- HashAggregate(isMerge=[true], groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Final_SUM(sum$0) AS sales, Final_COUNT(count1$1) AS number_sales])\n:  +- [#2] Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :        :- Exchange(distribution=[broadcast])(reuse_id=[3])
            :        :  +- HashAggregate(isMerge=[false], select=[SINGLE_VALUE(average_sales) AS $f0])
            :        :     +- HashAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS average_sales])
            :        :        +- Exchange(distribution=[single])
            :        :           +- LocalHashAggregate(select=[Partial_AVG($f0) AS (sum$0, count$1)])
            :        :              +- MultipleInput(readOrder=[1,0,0,0,1,1], members=[\nUnion(all=[true], union=[$f0])\n:- Union(all=[true], union=[$f0])\n:  :- Calc(select=[(ss_quantity * ss_list_price) AS $f0])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_quantity, ss_list_price, d_date_sk], isBroadcast=[true], build=[right])\n:  :     :- Calc(select=[ss_sold_date_sk, ss_quantity, ss_list_price], where=[ss_sold_date_sk IS NOT NULL])\n:  :     :  +- [#5] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_quantity, ss_list_price]]], fields=[ss_sold_date_sk, ss_quantity, ss_list_price])\n:  :     +- [#2] Exchange(distribution=[broadcast])\n:  +- Calc(select=[(cs_quantity * cs_list_price) AS $f0])\n:     +- HashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_quantity, cs_list_price, d_date_sk], isBroadcast=[true], build=[right])\n:        :- Calc(select=[cs_sold_date_sk, cs_quantity, cs_list_price], where=[cs_sold_date_sk IS NOT NULL])\n:        :  +- [#6] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_quantity, cs_list_price]]], fields=[cs_sold_date_sk, cs_quantity, cs_list_price])\n:        +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[(ws_quantity * ws_list_price) AS $f0])\n   +- HashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_quantity, ws_list_price, d_date_sk], isBroadcast=[true], build=[right])\n      :- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_quantity, ws_list_price]]], fields=[ws_sold_date_sk, ws_quantity, ws_list_price])\n      +- [#2] Exchange(distribution=[broadcast])\n])
            :        :                 :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_quantity, ws_list_price]]], fields=[ws_sold_date_sk, ws_quantity, ws_list_price])
            :        :                 :- Exchange(distribution=[broadcast])(reuse_id=[1])
            :        :                 :  +- Calc(select=[d_date_sk], where=[SEARCH(d_year, Sarg[[1998..2000]])])
            :        :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
            :        :                 :- Reused(reference_id=[1])
            :        :                 :- Reused(reference_id=[1])
            :        :                 :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_quantity, ss_list_price]]], fields=[ss_sold_date_sk, ss_quantity, ss_list_price])
            :        :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_quantity, cs_list_price]]], fields=[cs_sold_date_sk, cs_quantity, cs_list_price])
            :        +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
            :           +- LocalHashAggregate(groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Partial_SUM($f3) AS sum$0, Partial_COUNT(*) AS count1$1])
            :              +- Calc(select=[i_brand_id, i_class_id, i_category_id, (ss_quantity * ss_list_price) AS $f3])
            :                 +- NestedLoopJoin(joinType=[InnerJoin], where=[(d_week_seq = $f0)], select=[ss_quantity, ss_list_price, i_brand_id, i_class_id, i_category_id, d_week_seq, $f0], build=[right], singleRowJoin=[true])
            :                    :- Calc(select=[ss_quantity, ss_list_price, i_brand_id, i_class_id, i_category_id, d_week_seq])(reuse_id=[4])
            :                    :  +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, ss_quantity, ss_list_price, d_week_seq, i_item_sk, i_brand_id, i_class_id, i_category_id], build=[right])
            :                    :     :- Exchange(distribution=[hash[ss_item_sk]])
            :                    :     :  +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[LeftSemiJoin], where=[(ss_item_sk = ss_item_sk0)], select=[ss_item_sk, ss_quantity, ss_list_price, d_week_seq], isBroadcast=[true], build=[right], tryDistinctBuildRow=[true])\n:- Calc(select=[ss_item_sk, ss_quantity, ss_list_price, d_week_seq])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price, d_date_sk, d_week_seq], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price], where=[ss_sold_date_sk IS NOT NULL])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :                    :     :     :- Exchange(distribution=[broadcast])
            :                    :     :     :  +- LocalHashAggregate(groupBy=[ss_item_sk], select=[ss_item_sk])
            :                    :     :     :     +- Calc(select=[i_item_sk AS ss_item_sk])
            :                    :     :     :        +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[((i_brand_id0 = i_brand_id) AND (i_class_id0 = i_class_id) AND (i_category_id0 = i_category_id))], select=[i_brand_id, i_class_id, i_category_id, i_item_sk, i_brand_id0, i_class_id0, i_category_id0], isBroadcast=[true], build=[left])\n:- [#1] Exchange(distribution=[broadcast])\n+- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_class_id, i_category_id]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])\n])
            :                    :     :     :           :- Exchange(distribution=[broadcast])
            :                    :     :     :           :  +- MultipleInput(readOrder=[2,0,0,1], members=[\nHashJoin(joinType=[LeftSemiJoin], where=[(((i_brand_id = i_brand_id0) OR (i_brand_id IS NULL AND i_brand_id0 IS NULL)) AND ((i_class_id = i_class_id0) OR (i_class_id IS NULL AND i_class_id0 IS NULL)) AND ((i_category_id = i_category_id0) OR (i_category_id IS NULL AND i_category_id0 IS NULL)))], select=[i_brand_id, i_class_id, i_category_id], build=[left], tryDistinctBuildRow=[true])\n:- HashAggregate(isMerge=[false], groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, i_item_sk, i_brand_id, i_class_id, i_category_id], isBroadcast=[true], build=[left])\n:     :- [#2] Exchange(distribution=[broadcast])\n:     +- HashJoin(joinType=[LeftSemiJoin], where=[(((i_brand_id = i_brand_id0) OR (i_brand_id IS NULL AND i_brand_id0 IS NULL)) AND ((i_class_id = i_class_id0) OR (i_class_id IS NULL AND i_class_id0 IS NULL)) AND ((i_category_id = i_category_id0) OR (i_category_id IS NULL AND i_category_id0 IS NULL)))], select=[i_item_sk, i_brand_id, i_class_id, i_category_id], build=[left], tryDistinctBuildRow=[true])\n:        :- [#3] Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])\n:        +- [#4] Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])\n+- [#1] Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])\n])
            :                    :     :     :           :     :- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
            :                    :     :     :           :     :  +- LocalHashAggregate(groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id])
            :                    :     :     :           :     :     +- Calc(select=[i_brand_id, i_class_id, i_category_id])
            :                    :     :     :           :     :        +- HashJoin(joinType=[InnerJoin], where=[(ws_item_sk = i_item_sk)], select=[ws_item_sk, i_item_sk, i_brand_id, i_class_id, i_category_id], build=[right])
            :                    :     :     :           :     :           :- Exchange(distribution=[hash[ws_item_sk]])
            :                    :     :     :           :     :           :  +- Calc(select=[ws_item_sk])
            :                    :     :     :           :     :           :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_item_sk, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk]]], fields=[ws_sold_date_sk, ws_item_sk])\n+- [#2] Exchange(distribution=[broadcast])\n])
            :                    :     :     :           :     :           :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk]]], fields=[ws_sold_date_sk, ws_item_sk])
            :                    :     :     :           :     :           :        +- Exchange(distribution=[broadcast])(reuse_id=[2])
            :                    :     :     :           :     :           :           +- Calc(select=[d_date_sk], where=[SEARCH(d_year, Sarg[[1999..2001]])])
            :                    :     :     :           :     :           :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
            :                    :     :     :           :     :           +- Exchange(distribution=[hash[i_item_sk]])
            :                    :     :     :           :     :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_class_id, i_category_id]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
            :                    :     :     :           :     :- Exchange(distribution=[broadcast])
            :                    :     :     :           :     :  +- HashAggregate(isMerge=[true], groupBy=[ss_item_sk], select=[ss_item_sk])
            :                    :     :     :           :     :     +- Exchange(distribution=[hash[ss_item_sk]])
            :                    :     :     :           :     :        +- LocalHashAggregate(groupBy=[ss_item_sk], select=[ss_item_sk])
            :                    :     :     :           :     :           +- Calc(select=[ss_item_sk])
            :                    :     :     :           :     :              +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_item_sk], where=[ss_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk]]], fields=[ss_sold_date_sk, ss_item_sk])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :                    :     :     :           :     :                 :- Reused(reference_id=[2])
            :                    :     :     :           :     :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk]]], fields=[ss_sold_date_sk, ss_item_sk])
            :                    :     :     :           :     :- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
            :                    :     :     :           :     :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_class_id, i_category_id]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
            :                    :     :     :           :     +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
            :                    :     :     :           :        +- LocalHashAggregate(groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id])
            :                    :     :     :           :           +- Calc(select=[i_brand_id, i_class_id, i_category_id])
            :                    :     :     :           :              +- HashJoin(joinType=[InnerJoin], where=[(cs_item_sk = i_item_sk)], select=[cs_item_sk, i_item_sk, i_brand_id, i_class_id, i_category_id], build=[right])
            :                    :     :     :           :                 :- Exchange(distribution=[hash[cs_item_sk]])
            :                    :     :     :           :                 :  +- Calc(select=[cs_item_sk])
            :                    :     :     :           :                 :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_item_sk, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_item_sk], where=[cs_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_item_sk]]], fields=[cs_sold_date_sk, cs_item_sk])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :                    :     :     :           :                 :        :- Reused(reference_id=[2])
            :                    :     :     :           :                 :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_item_sk]]], fields=[cs_sold_date_sk, cs_item_sk])
            :                    :     :     :           :                 +- Exchange(distribution=[hash[i_item_sk]])
            :                    :     :     :           :                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_class_id, i_category_id]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
            :                    :     :     :           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_class_id, i_category_id]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
            :                    :     :     :- Exchange(distribution=[broadcast])
            :                    :     :     :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_week_seq]]], fields=[d_date_sk, d_week_seq])
            :                    :     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_list_price])
            :                    :     +- Exchange(distribution=[hash[i_item_sk]])
            :                    :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_class_id, i_category_id]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id])
            :                    +- Exchange(distribution=[broadcast])
            :                       +- HashAggregate(isMerge=[true], select=[Final_SINGLE_VALUE(value$0, count$1) AS $f0])
            :                          +- Exchange(distribution=[single])
            :                             +- LocalHashAggregate(select=[Partial_SINGLE_VALUE(d_week_seq) AS (value$0, count$1)])
            :                                +- Calc(select=[d_week_seq], where=[((d_year = 1999) AND (d_moy = 12) AND (d_dom = 16))])
            :                                   +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_week_seq, d_year, d_moy, d_dom]]], fields=[d_week_seq, d_year, d_moy, d_dom])
            +- Exchange(distribution=[broadcast])
               +- Calc(select=[i_brand_id, i_class_id, i_category_id, sales, number_sales])
                  +- MultipleInput(readOrder=[0,1], members=[\nNestedLoopJoin(joinType=[InnerJoin], where=[(sales > $f0)], select=[i_brand_id, i_class_id, i_category_id, sales, number_sales, $f0], build=[right], singleRowJoin=[true])\n:- HashAggregate(isMerge=[true], groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Final_SUM(sum$0) AS sales, Final_COUNT(count1$1) AS number_sales])\n:  +- [#2] Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :- Reused(reference_id=[3])
                     +- Exchange(distribution=[hash[i_brand_id, i_class_id, i_category_id]])
                        +- LocalHashAggregate(groupBy=[i_brand_id, i_class_id, i_category_id], select=[i_brand_id, i_class_id, i_category_id, Partial_SUM($f3) AS sum$0, Partial_COUNT(*) AS count1$1])
                           +- Calc(select=[i_brand_id, i_class_id, i_category_id, (ss_quantity * ss_list_price) AS $f3])
                              +- NestedLoopJoin(joinType=[InnerJoin], where=[(d_week_seq = $f0)], select=[ss_quantity, ss_list_price, i_brand_id, i_class_id, i_category_id, d_week_seq, $f0], build=[right], singleRowJoin=[true])
                                 :- Reused(reference_id=[4])
                                 +- Exchange(distribution=[broadcast])
                                    +- HashAggregate(isMerge=[true], select=[Final_SINGLE_VALUE(value$0, count$1) AS $f0])
                                       +- Exchange(distribution=[single])
                                          +- LocalHashAggregate(select=[Partial_SINGLE_VALUE(d_week_seq) AS (value$0, count$1)])
                                             +- Calc(select=[d_week_seq], where=[((d_year = 1998) AND (d_moy = 12) AND (d_dom = 16))])
                                                +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_week_seq, d_year, d_moy, d_dom]]], fields=[d_week_seq, d_year, d_moy, d_dom])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q15]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query15.tpl and seed 1819994127
select  ca_zip
       ,sum(cs_sales_price)
 from catalog_sales
     ,customer
     ,customer_address
     ,date_dim
 where cs_bill_customer_sk = c_customer_sk
 	and c_current_addr_sk = ca_address_sk 
 	and ( substr(ca_zip,1,5) in ('85669', '86197','88274','83405','86475',
                                   '85392', '85460', '80348', '81792')
 	      or ca_state in ('CA','WA','GA')
 	      or cs_sales_price > 500)
 	and cs_sold_date_sk = d_date_sk
 	and d_qoy = 2 and d_year = 2000
 group by ca_zip
 order by ca_zip
 limit 100

-- end query 1 in stream 0 using template query15.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
   +- LogicalProject(ca_zip=[$61], cs_sales_price=[$21])
      +- LogicalFilter(condition=[AND(=($3, $34), =($38, $52), OR(=(SUBSTR($61, 1, 5), _UTF-16LE'85669'), =(SUBSTR($61, 1, 5), _UTF-16LE'86197'), =(SUBSTR($61, 1, 5), _UTF-16LE'88274'), =(SUBSTR($61, 1, 5), _UTF-16LE'83405'), =(SUBSTR($61, 1, 5), _UTF-16LE'86475'), =(SUBSTR($61, 1, 5), _UTF-16LE'85392'), =(SUBSTR($61, 1, 5), _UTF-16LE'85460'), =(SUBSTR($61, 1, 5), _UTF-16LE'80348'), =(SUBSTR($61, 1, 5), _UTF-16LE'81792'), =($60, _UTF-16LE'CA'), =($60, _UTF-16LE'WA'), =($60, _UTF-16LE'GA'), >($21, 500)), =($0, $65), =($75, 2), =($71, 2000))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[ca_zip ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[ca_zip ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[ca_zip], select=[ca_zip, Final_SUM(sum$0) AS EXPR$1])
         +- Exchange(distribution=[hash[ca_zip]])
            +- LocalHashAggregate(groupBy=[ca_zip], select=[ca_zip, Partial_SUM(cs_sales_price) AS sum$0])
               +- Calc(select=[ca_zip, cs_sales_price])
                  +- HashJoin(joinType=[InnerJoin], where=[((cs_bill_customer_sk = c_customer_sk) AND (SEARCH(ca_state, Sarg[_UTF-16LE'CA', _UTF-16LE'GA', _UTF-16LE'WA']) OR SEARCH(cs_sales_price, Sarg[(500..+∞)]) OR SEARCH(SUBSTR(ca_zip, 1, 5), Sarg[_UTF-16LE'80348', _UTF-16LE'81792', _UTF-16LE'83405', _UTF-16LE'85392', _UTF-16LE'85460', _UTF-16LE'85669', _UTF-16LE'86197', _UTF-16LE'86475', _UTF-16LE'88274'])))], select=[cs_bill_customer_sk, cs_sales_price, c_customer_sk, ca_state, ca_zip], build=[right])
                     :- Exchange(distribution=[hash[cs_bill_customer_sk]])
                     :  +- Calc(select=[cs_bill_customer_sk, cs_sales_price])
                     :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_bill_customer_sk, cs_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_bill_customer_sk, cs_sales_price], where=[cs_bill_customer_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_customer_sk, cs_sales_price]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :        :- Exchange(distribution=[broadcast])
                     :        :  +- Calc(select=[d_date_sk], where=[((d_qoy = 2) AND (d_year = 2000))])
                     :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_qoy]]], fields=[d_date_sk, d_year, d_qoy])
                     :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_customer_sk, cs_sales_price]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_sales_price])
                     +- Exchange(distribution=[hash[c_customer_sk]])
                        +- Calc(select=[c_customer_sk, ca_state, ca_zip])
                           +- HashJoin(joinType=[InnerJoin], where=[(c_current_addr_sk = ca_address_sk)], select=[c_customer_sk, c_current_addr_sk, ca_address_sk, ca_state, ca_zip], build=[right])
                              :- Exchange(distribution=[hash[c_current_addr_sk]])
                              :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_current_addr_sk]]], fields=[c_customer_sk, c_current_addr_sk])
                              +- Exchange(distribution=[hash[ca_address_sk]])
                                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state, ca_zip]]], fields=[ca_address_sk, ca_state, ca_zip])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q16]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query16.tpl and seed 171719422
select  
   count(distinct cs_order_number) as `order count`
  ,sum(cs_ext_ship_cost) as `total shipping cost`
  ,sum(cs_net_profit) as `total net profit`
from
   catalog_sales cs1
  ,date_dim
  ,customer_address
  ,call_center
where
    d_date between '2001-4-01' and 
           (cast('2001-4-01' as date) + interval '60' day)
and cs1.cs_ship_date_sk = d_date_sk
and cs1.cs_ship_addr_sk = ca_address_sk
and ca_state = 'NY'
and cs1.cs_call_center_sk = cc_call_center_sk
and cc_county in ('Ziebach County','Levy County','Huron County','Franklin Parish',
                  'Daviess County'
)
and exists (select *
            from catalog_sales cs2
            where cs1.cs_order_number = cs2.cs_order_number
              and cs1.cs_warehouse_sk <> cs2.cs_warehouse_sk)
and not exists(select *
               from catalog_returns cr1
               where cs1.cs_order_number = cr1.cr_order_number)
order by count(distinct cs_order_number)
limit 100

-- end query 1 in stream 0 using template query16.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{}], order count=[COUNT(DISTINCT $0)], total shipping cost=[SUM($1)], total net profit=[SUM($2)])
   +- LogicalProject(cs_order_number=[$17], cs_ext_ship_cost=[$28], cs_net_profit=[$33])
      +- LogicalFilter(condition=[AND(>=($36, CAST(_UTF-16LE'2001-4-01'):DATE NOT NULL), <=($36, +(CAST(_UTF-16LE'2001-4-01'):DATE NOT NULL, 5184000000:INTERVAL DAY)), =($2, $34), =($10, $62), =($70, _UTF-16LE'NY'), =($11, $75), OR(=($100, _UTF-16LE'Ziebach County'), =($100, _UTF-16LE'Levy County'), =($100, _UTF-16LE'Huron County'), =($100, _UTF-16LE'Franklin Parish'), =($100, _UTF-16LE'Daviess County')), EXISTS({
LogicalFilter(condition=[AND(=($cor0.cs_order_number, $17), <>($cor0.cs_warehouse_sk, $14))])
  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
}), NOT(EXISTS({
LogicalFilter(condition=[=($cor0.cs_order_number, $16)])
  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns]])
})))], variablesSet=[[$cor0]])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, call_center]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[order count ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[order count ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS order count, Final_MIN(min$1) AS total shipping cost, Final_MIN(min$2) AS total net profit])
         +- Exchange(distribution=[single])
            +- LocalHashAggregate(select=[Partial_COUNT(cs_order_number) FILTER $g_0 AS count$0, Partial_MIN(total shipping cost) FILTER $g_1 AS min$1, Partial_MIN(total net profit) FILTER $g_1 AS min$2])
               +- Calc(select=[cs_order_number, total shipping cost, total net profit, (CASE(($e = 0), 0, 1) = 0) AS $g_0, (CASE(($e = 0), 0, 1) = 1) AS $g_1])
                  +- HashAggregate(isMerge=[true], groupBy=[cs_order_number, $e], select=[cs_order_number, $e, Final_SUM(sum$0) AS total shipping cost, Final_SUM(sum$1) AS total net profit])
                     +- Exchange(distribution=[hash[cs_order_number, $e]])
                        +- LocalHashAggregate(groupBy=[cs_order_number, $e], select=[cs_order_number, $e, Partial_SUM(cs_ext_ship_cost) AS sum$0, Partial_SUM(cs_net_profit) AS sum$1])
                           +- Expand(projects=[{cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit, 0 AS $e}, {cs_warehouse_sk, null AS cs_order_number, cs_ext_ship_cost, cs_net_profit, 1 AS $e}])
                              +- MultipleInput(readOrder=[2,0,1], members=[\nHashJoin(joinType=[LeftAntiJoin], where=[(cs_order_number = cr_order_number)], select=[cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit], build=[left], tryDistinctBuildRow=[true])\n:- HashJoin(joinType=[LeftSemiJoin], where=[((cs_order_number = cs_order_number0) AND (cs_warehouse_sk <> cs_warehouse_sk0))], select=[cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit], build=[left])\n:  :- [#2] Exchange(distribution=[hash[cs_order_number]])\n:  +- [#3] Exchange(distribution=[hash[cs_order_number]])\n+- [#1] Exchange(distribution=[hash[cr_order_number]])\n])
                                 :- Exchange(distribution=[hash[cr_order_number]])
                                 :  +- LocalHashAggregate(groupBy=[cr_order_number], select=[cr_order_number])
                                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns, project=[cr_order_number]]], fields=[cr_order_number])
                                 :- Exchange(distribution=[hash[cs_order_number]])
                                 :  +- Calc(select=[cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit])
                                 :     +- MultipleInput(readOrder=[0,0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_call_center_sk = cc_call_center_sk)], select=[cs_call_center_sk, cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit, cc_call_center_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_call_center_sk, cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit])\n:  +- HashJoin(joinType=[InnerJoin], where=[(cs_ship_date_sk = d_date_sk)], select=[cs_ship_date_sk, cs_call_center_sk, cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[cs_ship_date_sk, cs_call_center_sk, cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(cs_ship_addr_sk = ca_address_sk)], select=[cs_ship_date_sk, cs_ship_addr_sk, cs_call_center_sk, cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit, ca_address_sk], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[cs_ship_date_sk, cs_ship_addr_sk, cs_call_center_sk, cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit], where=[cs_ship_date_sk IS NOT NULL])\n:     :     :  +- [#4] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_ship_date_sk, cs_ship_addr_sk, cs_call_center_sk, cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit]]], fields=[cs_ship_date_sk, cs_ship_addr_sk, cs_call_center_sk, cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                 :        :- Exchange(distribution=[broadcast])
                                 :        :  +- Calc(select=[cc_call_center_sk], where=[SEARCH(cc_county, Sarg[_UTF-16LE'Daviess County', _UTF-16LE'Franklin Parish', _UTF-16LE'Huron County', _UTF-16LE'Levy County', _UTF-16LE'Ziebach County'])])
                                 :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, call_center, project=[cc_call_center_sk, cc_county]]], fields=[cc_call_center_sk, cc_county])
                                 :        :- Exchange(distribution=[broadcast])
                                 :        :  +- Calc(select=[d_date_sk], where=[SEARCH(d_date, Sarg[[2001-04-01..2001-05-31]])])
                                 :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
                                 :        :- Exchange(distribution=[broadcast])
                                 :        :  +- Calc(select=[ca_address_sk], where=[SEARCH(ca_state, Sarg[_UTF-16LE'NY'])])
                                 :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state]]], fields=[ca_address_sk, ca_state])
                                 :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_ship_date_sk, cs_ship_addr_sk, cs_call_center_sk, cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit]]], fields=[cs_ship_date_sk, cs_ship_addr_sk, cs_call_center_sk, cs_warehouse_sk, cs_order_number, cs_ext_ship_cost, cs_net_profit])
                                 +- Exchange(distribution=[hash[cs_order_number]])
                                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_warehouse_sk, cs_order_number]]], fields=[cs_warehouse_sk, cs_order_number])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q17]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query17.tpl and seed 1819994127
select  i_item_id
       ,i_item_desc
       ,s_state
       ,count(ss_quantity) as store_sales_quantitycount
       ,avg(ss_quantity) as store_sales_quantityave
       ,stddev_samp(ss_quantity) as store_sales_quantitystdev
       ,stddev_samp(ss_quantity)/avg(ss_quantity) as store_sales_quantitycov
       ,count(sr_return_quantity) as_store_returns_quantitycount
       ,avg(sr_return_quantity) as_store_returns_quantityave
       ,stddev_samp(sr_return_quantity) as_store_returns_quantitystdev
       ,stddev_samp(sr_return_quantity)/avg(sr_return_quantity) as store_returns_quantitycov
       ,count(cs_quantity) as catalog_sales_quantitycount ,avg(cs_quantity) as catalog_sales_quantityave
       ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitystdev
       ,stddev_samp(cs_quantity)/avg(cs_quantity) as catalog_sales_quantitycov
 from store_sales
     ,store_returns
     ,catalog_sales
     ,date_dim d1
     ,date_dim d2
     ,date_dim d3
     ,store
     ,item
 where d1.d_quarter_name = '2000Q1'
   and d1.d_date_sk = ss_sold_date_sk
   and i_item_sk = ss_item_sk
   and s_store_sk = ss_store_sk
   and ss_customer_sk = sr_customer_sk
   and ss_item_sk = sr_item_sk
   and ss_ticket_number = sr_ticket_number
   and sr_returned_date_sk = d2.d_date_sk
   and d2.d_quarter_name in ('2000Q1','2000Q2','2000Q3')
   and sr_customer_sk = cs_bill_customer_sk
   and sr_item_sk = cs_item_sk
   and cs_sold_date_sk = d3.d_date_sk
   and d3.d_quarter_name in ('2000Q1','2000Q2','2000Q3')
 group by i_item_id
         ,i_item_desc
         ,s_state
 order by i_item_id
         ,i_item_desc
         ,s_state
limit 100

-- end query 1 in stream 0 using template query17.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalProject(i_item_id=[$0], i_item_desc=[$1], s_state=[$2], store_sales_quantitycount=[$3], store_sales_quantityave=[$4], store_sales_quantitystdev=[$5], store_sales_quantitycov=[/($5, $4)], as_store_returns_quantitycount=[$6], as_store_returns_quantityave=[$7], as_store_returns_quantitystdev=[$8], store_returns_quantitycov=[/($8, $7)], catalog_sales_quantitycount=[$9], catalog_sales_quantityave=[$10], catalog_sales_quantitystdev=[/($11, $10)], catalog_sales_quantitycov=[/($11, $10)])
   +- LogicalAggregate(group=[{0, 1, 2}], store_sales_quantitycount=[COUNT($3)], store_sales_quantityave=[AVG($3)], store_sales_quantitystdev=[STDDEV_SAMP($3)], as_store_returns_quantitycount=[COUNT($4)], as_store_returns_quantityave=[AVG($4)], as_store_returns_quantitystdev=[STDDEV_SAMP($4)], catalog_sales_quantitycount=[COUNT($5)], catalog_sales_quantityave=[AVG($5)], agg#8=[STDDEV_SAMP($5)])
      +- LogicalProject(i_item_id=[$191], i_item_desc=[$194], s_state=[$185], ss_quantity=[$10], sr_return_quantity=[$33], cs_quantity=[$61])
         +- LogicalFilter(condition=[AND(=($92, _UTF-16LE'2000Q1'), =($77, $0), =($190, $2), =($161, $7), =($3, $26), =($2, $25), =($9, $32), =($23, $105), OR(=($120, _UTF-16LE'2000Q1'), =($120, _UTF-16LE'2000Q2'), =($120, _UTF-16LE'2000Q3')), =($26, $46), =($25, $58), =($43, $133), OR(=($148, _UTF-16LE'2000Q1'), =($148, _UTF-16LE'2000Q2'), =($148, _UTF-16LE'2000Q3')))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
               :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
               :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
               :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
               :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
               :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
               :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
               +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[i_item_id, i_item_desc, s_state, store_sales_quantitycount, CAST(($f4 / store_sales_quantitycount) AS INTEGER) AS store_sales_quantityave, CAST(POWER((($f5 - (($f4 * $f4) / store_sales_quantitycount)) / CASE((store_sales_quantitycount = 1), null:BIGINT, (store_sales_quantitycount - 1))), 0.5) AS INTEGER) AS store_sales_quantitystdev, (CAST(POWER((($f5 - (($f4 * $f4) / store_sales_quantitycount)) / CASE((store_sales_quantitycount = 1), null:BIGINT, (store_sales_quantitycount - 1))), 0.5) AS INTEGER) / CAST(($f4 / store_sales_quantitycount) AS INTEGER)) AS store_sales_quantitycov, as_store_returns_quantitycount, CAST(($f7 / as_store_returns_quantitycount) AS INTEGER) AS as_store_returns_quantityave, CAST(POWER((($f8 - (($f7 * $f7) / as_store_returns_quantitycount)) / CASE((as_store_returns_quantitycount = 1), null:BIGINT, (as_store_returns_quantitycount - 1))), 0.5) AS INTEGER) AS as_store_returns_quantitystdev, (CAST(POWER((($f8 - (($f7 * $f7) / as_store_returns_quantitycount)) / CASE((as_store_returns_quantitycount = 1), null:BIGINT, (as_store_returns_quantitycount - 1))), 0.5) AS INTEGER) / CAST(($f7 / as_store_returns_quantitycount) AS INTEGER)) AS store_returns_quantitycov, catalog_sales_quantitycount, CAST(($f10 / catalog_sales_quantitycount) AS INTEGER) AS catalog_sales_quantityave, (CAST(POWER((($f11 - (($f10 * $f10) / catalog_sales_quantitycount)) / CASE((catalog_sales_quantitycount = 1), null:BIGINT, (catalog_sales_quantitycount - 1))), 0.5) AS INTEGER) / CAST(($f10 / catalog_sales_quantitycount) AS INTEGER)) AS catalog_sales_quantitystdev, (CAST(POWER((($f11 - (($f10 * $f10) / catalog_sales_quantitycount)) / CASE((catalog_sales_quantitycount = 1), null:BIGINT, (catalog_sales_quantitycount - 1))), 0.5) AS INTEGER) / CAST(($f10 / catalog_sales_quantitycount) AS INTEGER)) AS catalog_sales_quantitycov])
+- SortLimit(orderBy=[i_item_id ASC, i_item_desc ASC, s_state ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[i_item_id ASC, i_item_desc ASC, s_state ASC], offset=[0], fetch=[100], global=[false])
         +- HashAggregate(isMerge=[false], groupBy=[i_item_id, i_item_desc, s_state], select=[i_item_id, i_item_desc, s_state, COUNT(ss_quantity) AS store_sales_quantitycount, SUM(ss_quantity) AS $f4, SUM($f6) AS $f5, COUNT(sr_return_quantity) AS as_store_returns_quantitycount, SUM(sr_return_quantity) AS $f7, SUM($f7) AS $f8, COUNT(cs_quantity) AS catalog_sales_quantitycount, SUM(cs_quantity) AS $f10, SUM($f8) AS $f11])
            +- Calc(select=[i_item_id, i_item_desc, s_state, ss_quantity, sr_return_quantity, cs_quantity, (ss_quantity * ss_quantity) AS $f6, (sr_return_quantity * sr_return_quantity) AS $f7, (cs_quantity * cs_quantity) AS $f8])
               +- Exchange(distribution=[hash[i_item_id, i_item_desc, s_state]])
                  +- MultipleInput(readOrder=[0,0,0,2,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(s_store_sk = ss_store_sk)], select=[cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc, s_store_sk, s_state], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc])\n:  +- HashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[cs_sold_date_sk, cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(cs_item_sk = i_item_sk)], select=[cs_sold_date_sk, cs_item_sk, cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity, i_item_sk, i_item_id, i_item_desc], build=[right])\n:     :     :- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity])\n:     :     :  +- HashJoin(joinType=[InnerJoin], where=[((sr_customer_sk = cs_bill_customer_sk) AND (cs_item_sk = ss_item_sk))], select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, ss_item_sk, ss_store_sk, ss_quantity, sr_customer_sk, sr_return_quantity], build=[right])\n:     :     :     :- [#4] Exchange(distribution=[hash[cs_item_sk]])\n:     :     :     +- Calc(select=[ss_item_sk, ss_store_sk, ss_quantity, sr_customer_sk, sr_return_quantity])\n:     :     :        +- HashJoin(joinType=[InnerJoin], where=[(d_date_sk = ss_sold_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, sr_customer_sk, sr_return_quantity, d_date_sk], isBroadcast=[true], build=[right])\n:     :     :           :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, sr_customer_sk, sr_return_quantity])\n:     :     :           :  +- HashJoin(joinType=[InnerJoin], where=[((ss_customer_sk = sr_customer_sk) AND (ss_item_sk = sr_item_sk) AND (ss_ticket_number = sr_ticket_number))], select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_quantity, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity], build=[right])\n:     :     :           :     :- [#6] Exchange(distribution=[hash[ss_item_sk]])\n:     :     :           :     +- [#7] Exchange(distribution=[hash[sr_item_sk]])\n:     :     :           +- [#5] Exchange(distribution=[broadcast])\n:     :     +- [#3] Exchange(distribution=[hash[i_item_sk]])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :- Exchange(distribution=[broadcast])
                     :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_state]]], fields=[s_store_sk, s_state])
                     :- Exchange(distribution=[broadcast])(reuse_id=[1])
                     :  +- Calc(select=[d_date_sk], where=[SEARCH(d_quarter_name, Sarg[_UTF-16LE'2000Q1', _UTF-16LE'2000Q2', _UTF-16LE'2000Q3'])])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_quarter_name]]], fields=[d_date_sk, d_quarter_name])
                     :- Exchange(distribution=[hash[i_item_sk]])
                     :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id, i_item_desc]]], fields=[i_item_sk, i_item_id, i_item_desc])
                     :- Exchange(distribution=[hash[cs_item_sk]])
                     :  +- Calc(select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity], where=[cs_bill_customer_sk IS NOT NULL])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity])
                     :- Exchange(distribution=[broadcast])
                     :  +- Calc(select=[d_date_sk], where=[SEARCH(d_quarter_name, Sarg[_UTF-16LE'2000Q1'])])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_quarter_name]]], fields=[d_date_sk, d_quarter_name])
                     :- Exchange(distribution=[hash[ss_item_sk]])
                     :  +- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_quantity], where=[ss_customer_sk IS NOT NULL])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_quantity]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_quantity])
                     +- Exchange(distribution=[hash[sr_item_sk]])
                        +- Calc(select=[sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity])
                           +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(sr_returned_date_sk = d_date_sk)], select=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity], where=[sr_customer_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity]]], fields=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity])\n+- [#1] Exchange(distribution=[broadcast])\n])
                              :- Reused(reference_id=[1])
                              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity]]], fields=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q18]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query18.tpl and seed 1978355063
select  i_item_id,
        ca_country,
        ca_state, 
        ca_county,
        avg(cast(cs_quantity as decimal(12,2))) agg1,
        avg( cast(cs_list_price as decimal(12,2))) agg2,
        avg( cast(cs_coupon_amt as decimal(12,2))) agg3,
        avg( cast(cs_sales_price as decimal(12,2))) agg4,
        avg( cast(cs_net_profit as decimal(12,2))) agg5,
        avg( cast(c_birth_year as decimal(12,2))) agg6,
        avg( cast(cd1.cd_dep_count as decimal(12,2))) agg7
 from catalog_sales, customer_demographics cd1, 
      customer_demographics cd2, customer, customer_address, date_dim, item
 where cs_sold_date_sk = d_date_sk and
       cs_item_sk = i_item_sk and
       cs_bill_cdemo_sk = cd1.cd_demo_sk and
       cs_bill_customer_sk = c_customer_sk and
       cd1.cd_gender = 'M' and 
       cd1.cd_education_status = 'College' and
       c_current_cdemo_sk = cd2.cd_demo_sk and
       c_current_addr_sk = ca_address_sk and
       c_birth_month in (9,5,12,4,1,10) and
       d_year = 2001 and
       ca_state in ('ND','WI','AL'
                   ,'NC','OK','MS','TN')
 group by rollup (i_item_id, ca_country, ca_state, ca_county)
 order by ca_country,
        ca_state, 
        ca_county,
	i_item_id
 limit 100

-- end query 1 in stream 0 using template query18.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$1], sort1=[$2], sort2=[$3], sort3=[$0], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2, 3}], groups=[[{0, 1, 2, 3}, {0, 1, 2}, {0, 1}, {0}, {}]], agg1=[AVG($4)], agg2=[AVG($5)], agg3=[AVG($6)], agg4=[AVG($7)], agg5=[AVG($8)], agg6=[AVG($9)], agg7=[AVG($10)])
   +- LogicalProject(i_item_id=[$112], ca_country=[$80], ca_state=[$78], ca_county=[$77], $f4=[CAST($18):DECIMAL(12, 2)], $f5=[CAST($20):DECIMAL(12, 2)], $f6=[CAST($27):DECIMAL(12, 2)], $f7=[CAST($21):DECIMAL(12, 2)], $f8=[CAST($33):DECIMAL(12, 2)], $f9=[CAST($65):DECIMAL(12, 2)], $f10=[CAST($40):DECIMAL(12, 2)])
      +- LogicalFilter(condition=[AND(=($0, $83), =($15, $111), =($4, $34), =($3, $52), =($35, _UTF-16LE'M'), =($37, _UTF-16LE'College'), =($54, $43), =($56, $70), OR(=($64, 9), =($64, 5), =($64, 12), =($64, 4), =($64, 1), =($64, 10)), =($89, 2001), OR(=($78, _UTF-16LE'ND'), =($78, _UTF-16LE'WI'), =($78, _UTF-16LE'AL'), =($78, _UTF-16LE'NC'), =($78, _UTF-16LE'OK'), =($78, _UTF-16LE'MS'), =($78, _UTF-16LE'TN')))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
            :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
            :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
            :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[i_item_id, ca_country, ca_state, ca_county, agg1, agg2, agg3, agg4, agg5, agg6, agg7])
+- SortLimit(orderBy=[ca_country ASC, ca_state ASC, ca_county ASC, i_item_id ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[ca_country ASC, ca_state ASC, ca_county ASC, i_item_id ASC], offset=[0], fetch=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[i_item_id, ca_country, ca_state, ca_county, $e], select=[i_item_id, ca_country, ca_state, ca_county, $e, Final_AVG(sum$0, count$1) AS agg1, Final_AVG(sum$2, count$3) AS agg2, Final_AVG(sum$4, count$5) AS agg3, Final_AVG(sum$6, count$7) AS agg4, Final_AVG(sum$8, count$9) AS agg5, Final_AVG(sum$10, count$11) AS agg6, Final_AVG(sum$12, count$13) AS agg7])
            +- Exchange(distribution=[hash[i_item_id, ca_country, ca_state, ca_county, $e]])
               +- LocalHashAggregate(groupBy=[i_item_id, ca_country, ca_state, ca_county, $e], select=[i_item_id, ca_country, ca_state, ca_county, $e, Partial_AVG($f4) AS (sum$0, count$1), Partial_AVG($f5) AS (sum$2, count$3), Partial_AVG($f6) AS (sum$4, count$5), Partial_AVG($f7) AS (sum$6, count$7), Partial_AVG($f8) AS (sum$8, count$9), Partial_AVG($f9) AS (sum$10, count$11), Partial_AVG($f10) AS (sum$12, count$13)])
                  +- Expand(projects=[{i_item_id, ca_country, ca_state, ca_county, $f4, $f5, $f6, $f7, $f8, $f9, $f10, 0 AS $e}, {i_item_id, ca_country, ca_state, null AS ca_county, $f4, $f5, $f6, $f7, $f8, $f9, $f10, 1 AS $e}, {i_item_id, ca_country, null AS ca_state, null AS ca_county, $f4, $f5, $f6, $f7, $f8, $f9, $f10, 3 AS $e}, {i_item_id, null AS ca_country, null AS ca_state, null AS ca_county, $f4, $f5, $f6, $f7, $f8, $f9, $f10, 7 AS $e}, {null AS i_item_id, null AS ca_country, null AS ca_state, null AS ca_county, $f4, $f5, $f6, $f7, $f8, $f9, $f10, 15 AS $e}])
                     +- Calc(select=[i_item_id, ca_country, ca_state, ca_county, CAST(cs_quantity AS DECIMAL(12, 2)) AS $f4, CAST(cs_list_price AS DECIMAL(12, 2)) AS $f5, CAST(cs_coupon_amt AS DECIMAL(12, 2)) AS $f6, CAST(cs_sales_price AS DECIMAL(12, 2)) AS $f7, CAST(cs_net_profit AS DECIMAL(12, 2)) AS $f8, CAST(c_birth_year AS DECIMAL(12, 2)) AS $f9, CAST(cd_dep_count AS DECIMAL(12, 2)) AS $f10])
                        +- HashJoin(joinType=[InnerJoin], where=[(cs_item_sk = i_item_sk)], select=[cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit, cd_dep_count, c_birth_year, ca_county, ca_state, ca_country, i_item_sk, i_item_id], build=[right])
                           :- Exchange(distribution=[hash[cs_item_sk]])
                           :  +- Calc(select=[cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit, cd_dep_count, c_birth_year, ca_county, ca_state, ca_country])
                           :     +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit, cd_dep_count, c_birth_year, ca_county, ca_state, ca_country, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit, cd_dep_count, c_birth_year, ca_county, ca_state, ca_country])\n:  +- HashJoin(joinType=[InnerJoin], where=[(cs_bill_customer_sk = c_customer_sk)], select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit, cd_dep_count, c_customer_sk, c_birth_year, ca_county, ca_state, ca_country], build=[right])\n:     :- [#2] Exchange(distribution=[hash[cs_bill_customer_sk]])\n:     +- [#3] Exchange(distribution=[hash[c_customer_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                           :        :- Exchange(distribution=[broadcast])
                           :        :  +- Calc(select=[d_date_sk], where=[SEARCH(d_year, Sarg[2001])])
                           :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
                           :        :- Exchange(distribution=[hash[cs_bill_customer_sk]])
                           :        :  +- Calc(select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit, cd_dep_count])
                           :        :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_bill_cdemo_sk = cd_demo_sk)], select=[cs_sold_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit, cd_demo_sk, cd_dep_count], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit], where=[cs_bill_cdemo_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit])\n+- [#1] Exchange(distribution=[broadcast])\n])
                           :        :        :- Exchange(distribution=[broadcast])
                           :        :        :  +- Calc(select=[cd_demo_sk, cd_dep_count], where=[(SEARCH(cd_gender, Sarg[_UTF-16LE'M']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'College']))])
                           :        :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk, cd_gender, cd_education_status, cd_dep_count]]], fields=[cd_demo_sk, cd_gender, cd_education_status, cd_dep_count])
                           :        :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_bill_cdemo_sk, cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cs_net_profit])
                           :        +- Exchange(distribution=[hash[c_customer_sk]])
                           :           +- Calc(select=[c_customer_sk, c_birth_year, ca_county, ca_state, ca_country])
                           :              +- HashJoin(joinType=[InnerJoin], where=[(c_current_cdemo_sk = cd_demo_sk)], select=[c_customer_sk, c_current_cdemo_sk, c_birth_year, ca_county, ca_state, ca_country, cd_demo_sk], build=[right])
                           :                 :- Exchange(distribution=[hash[c_current_cdemo_sk]])
                           :                 :  +- Calc(select=[c_customer_sk, c_current_cdemo_sk, c_birth_year, ca_county, ca_state, ca_country])
                           :                 :     +- HashJoin(joinType=[InnerJoin], where=[(c_current_addr_sk = ca_address_sk)], select=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, c_birth_year, ca_address_sk, ca_county, ca_state, ca_country], build=[right])
                           :                 :        :- Exchange(distribution=[hash[c_current_addr_sk]])
                           :                 :        :  +- Calc(select=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, c_birth_year], where=[SEARCH(c_birth_month, Sarg[1, 4, 5, 9, 10, 12])])
                           :                 :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, c_birth_month, c_birth_year]]], fields=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, c_birth_month, c_birth_year])
                           :                 :        +- Exchange(distribution=[hash[ca_address_sk]])
                           :                 :           +- Calc(select=[ca_address_sk, ca_county, ca_state, ca_country], where=[SEARCH(ca_state, Sarg[_UTF-16LE'AL', _UTF-16LE'MS', _UTF-16LE'NC', _UTF-16LE'ND', _UTF-16LE'OK', _UTF-16LE'TN', _UTF-16LE'WI'])])
                           :                 :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_county, ca_state, ca_country]]], fields=[ca_address_sk, ca_county, ca_state, ca_country])
                           :                 +- Exchange(distribution=[hash[cd_demo_sk]])
                           :                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk]]], fields=[cd_demo_sk])
                           +- Exchange(distribution=[hash[i_item_sk]])
                              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q19]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query19.tpl and seed 1930872976
select  i_brand_id brand_id, i_brand brand, i_manufact_id, i_manufact,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item,customer,customer_address,store
 where d_date_sk = ss_sold_date_sk
   and ss_item_sk = i_item_sk
   and i_manager_id=7
   and d_moy=11
   and d_year=1999
   and ss_customer_sk = c_customer_sk 
   and c_current_addr_sk = ca_address_sk
   and substr(ca_zip,1,5) <> substr(s_zip,1,5) 
   and ss_store_sk = s_store_sk 
 group by i_brand
      ,i_brand_id
      ,i_manufact_id
      ,i_manufact
 order by ext_price desc
         ,i_brand
         ,i_brand_id
         ,i_manufact_id
         ,i_manufact
limit 100 

-- end query 1 in stream 0 using template query19.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$4], sort1=[$1], sort2=[$0], sort3=[$2], sort4=[$3], dir0=[DESC-nulls-last], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], fetch=[100])
+- LogicalProject(brand_id=[$1], brand=[$0], i_manufact_id=[$2], i_manufact=[$3], ext_price=[$4])
   +- LogicalAggregate(group=[{0, 1, 2, 3}], ext_price=[SUM($4)])
      +- LogicalProject(brand=[$59], brand_id=[$58], i_manufact_id=[$64], i_manufact=[$65], ss_ext_sales_price=[$43])
         +- LogicalFilter(condition=[AND(=($0, $28), =($30, $51), =($71, 7), =($8, 11), =($6, 1999), =($31, $73), =($77, $91), <>(SUBSTR($100, 1, 5), SUBSTR($129, 1, 5)), =($35, $104))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
               :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
               :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
               :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
               :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
               +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[brand_id, brand, i_manufact_id, i_manufact, ext_price])
+- SortLimit(orderBy=[ext_price DESC, brand ASC, brand_id ASC, i_manufact_id ASC, i_manufact ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[ext_price DESC, brand ASC, brand_id ASC, i_manufact_id ASC, i_manufact ASC], offset=[0], fetch=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[brand, brand_id, i_manufact_id, i_manufact], select=[brand, brand_id, i_manufact_id, i_manufact, Final_SUM(sum$0) AS ext_price])
            +- Exchange(distribution=[hash[brand, brand_id, i_manufact_id, i_manufact]])
               +- LocalHashAggregate(groupBy=[brand, brand_id, i_manufact_id, i_manufact], select=[brand, brand_id, i_manufact_id, i_manufact, Partial_SUM(ss_ext_sales_price) AS sum$0])
                  +- Calc(select=[i_brand AS brand, i_brand_id AS brand_id, i_manufact_id, i_manufact, ss_ext_sales_price])
                     +- HashJoin(joinType=[InnerJoin], where=[((SUBSTR(ca_zip, 1, 5) <> SUBSTR(s_zip, 1, 5)) AND (c_current_addr_sk = ca_address_sk))], select=[c_current_addr_sk, ss_ext_sales_price, i_brand_id, i_brand, i_manufact_id, i_manufact, s_zip, ca_address_sk, ca_zip], build=[right])
                        :- Exchange(distribution=[hash[c_current_addr_sk]])
                        :  +- Calc(select=[c_current_addr_sk, ss_ext_sales_price, i_brand_id, i_brand, i_manufact_id, i_manufact, s_zip])
                        :     +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[c_current_addr_sk, ss_store_sk, ss_ext_sales_price, i_brand_id, i_brand, i_manufact_id, i_manufact, s_store_sk, s_zip], isBroadcast=[true], build=[right])\n:- Calc(select=[c_current_addr_sk, ss_store_sk, ss_ext_sales_price, i_brand_id, i_brand, i_manufact_id, i_manufact])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_customer_sk = c_customer_sk)], select=[c_customer_sk, c_current_addr_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price, i_brand_id, i_brand, i_manufact_id, i_manufact], build=[left])\n:     :- [#2] Exchange(distribution=[hash[c_customer_sk]])\n:     +- [#3] Exchange(distribution=[hash[ss_customer_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :        :- Exchange(distribution=[broadcast])
                        :        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_zip]]], fields=[s_store_sk, s_zip])
                        :        :- Exchange(distribution=[hash[c_customer_sk]])
                        :        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_current_addr_sk]]], fields=[c_customer_sk, c_current_addr_sk])
                        :        +- Exchange(distribution=[hash[ss_customer_sk]])
                        :           +- Calc(select=[ss_customer_sk, ss_store_sk, ss_ext_sales_price, i_brand_id, i_brand, i_manufact_id, i_manufact])
                        :              +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(d_date_sk = ss_sold_date_sk)], select=[ss_sold_date_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price, i_brand_id, i_brand, i_manufact_id, i_manufact, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price, i_brand_id, i_brand, i_manufact_id, i_manufact])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price, i_item_sk, i_brand_id, i_brand, i_manufact_id, i_manufact], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price], where=[ss_sold_date_sk IS NOT NULL])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :                 :- Exchange(distribution=[broadcast])
                        :                 :  +- Calc(select=[d_date_sk], where=[((d_moy = 11) AND (d_year = 1999))])
                        :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                        :                 :- Exchange(distribution=[broadcast])
                        :                 :  +- Calc(select=[i_item_sk, i_brand_id, i_brand, i_manufact_id, i_manufact], where=[(i_manager_id = 7)])
                        :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_brand, i_manufact_id, i_manufact, i_manager_id]]], fields=[i_item_sk, i_brand_id, i_brand, i_manufact_id, i_manufact, i_manager_id])
                        :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price])
                        +- Exchange(distribution=[hash[ca_address_sk]])
                           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_zip]]], fields=[ca_address_sk, ca_zip])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q1]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query1.tpl and seed 2031708268
with customer_total_return as
(select sr_customer_sk as ctr_customer_sk
,sr_store_sk as ctr_store_sk
,sum(sr_fee) as ctr_total_return
from store_returns
,date_dim
where sr_returned_date_sk = d_date_sk
and d_year =2000
group by sr_customer_sk
,sr_store_sk)
 select  c_customer_id
from customer_total_return ctr1
,store
,customer
where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
from customer_total_return ctr2
where ctr1.ctr_store_sk = ctr2.ctr_store_sk)
and s_store_sk = ctr1.ctr_store_sk
and s_state = 'NM'
and ctr1.ctr_customer_sk = c_customer_sk
order by c_customer_id
limit 100

-- end query 1 in stream 0 using template query1.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalProject(c_customer_id=[$33])
   +- LogicalFilter(condition=[AND(>($2, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*($0, 1.2:DECIMAL(2, 1))])
  LogicalAggregate(group=[{}], agg#0=[AVG($0)])
    LogicalProject(ctr_total_return=[$2])
      LogicalFilter(condition=[=($cor0.ctr_store_sk, $1)])
        LogicalAggregate(group=[{0, 1}], ctr_total_return=[SUM($2)])
          LogicalProject(ctr_customer_sk=[$3], ctr_store_sk=[$7], sr_fee=[$14])
            LogicalFilter(condition=[AND(=($0, $20), =($26, 2000))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
})), =($3, $1), =($27, _UTF-16LE'NM'), =($0, $32))], variablesSet=[[$cor0]])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalAggregate(group=[{0, 1}], ctr_total_return=[SUM($2)])
         :  :  +- LogicalProject(ctr_customer_sk=[$3], ctr_store_sk=[$7], sr_fee=[$14])
         :  :     +- LogicalFilter(condition=[AND(=($0, $20), =($26, 2000))])
         :  :        +- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
         :  :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
         +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[c_customer_id])
+- SortLimit(orderBy=[c_customer_id ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[c_customer_id ASC], offset=[0], fetch=[100], global=[false])
         +- HashJoin(joinType=[InnerJoin], where=[(ctr_customer_sk = c_customer_sk)], select=[c_customer_sk, c_customer_id, ctr_customer_sk], build=[right])
            :- Exchange(distribution=[hash[c_customer_sk]])
            :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_customer_id]]], fields=[c_customer_sk, c_customer_id])
            +- Exchange(distribution=[hash[ctr_customer_sk]])
               +- Calc(select=[ctr_customer_sk])
                  +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[((ctr_total_return > ($f1 * 1.2)) AND (ctr_store_sk = ctr_store_sk0))], select=[ctr_customer_sk, ctr_store_sk, ctr_total_return, ctr_store_sk0, $f1], isBroadcast=[true], build=[right])\n:- Calc(select=[ctr_customer_sk, ctr_store_sk, ctr_total_return])\n:  +- HashJoin(joinType=[InnerJoin], where=[(s_store_sk = ctr_store_sk)], select=[ctr_customer_sk, ctr_store_sk, ctr_total_return, s_store_sk], isBroadcast=[true], build=[right])\n:     :- HashAggregate(isMerge=[false], groupBy=[ctr_customer_sk, ctr_store_sk], select=[ctr_customer_sk, ctr_store_sk, SUM(sr_fee) AS ctr_total_return])\n:     :  +- [#3] Exchange(distribution=[hash[ctr_customer_sk, ctr_store_sk]])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :- Exchange(distribution=[broadcast])
                     :  +- HashAggregate(isMerge=[true], groupBy=[ctr_store_sk], select=[ctr_store_sk, Final_AVG(sum$0, count$1) AS $f1])
                     :     +- Exchange(distribution=[hash[ctr_store_sk]])
                     :        +- LocalHashAggregate(groupBy=[ctr_store_sk], select=[ctr_store_sk, Partial_AVG(ctr_total_return) AS (sum$0, count$1)])
                     :           +- Calc(select=[ctr_store_sk, ctr_total_return])
                     :              +- HashAggregate(isMerge=[false], groupBy=[ctr_customer_sk, ctr_store_sk], select=[ctr_customer_sk, ctr_store_sk, SUM(sr_fee) AS ctr_total_return])
                     :                 +- Exchange(distribution=[hash[ctr_customer_sk, ctr_store_sk]])
                     :                    +- Calc(select=[sr_customer_sk AS ctr_customer_sk, sr_store_sk AS ctr_store_sk, sr_fee])
                     :                       +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(sr_returned_date_sk = d_date_sk)], select=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_fee, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_fee], where=[(sr_returned_date_sk IS NOT NULL AND sr_store_sk IS NOT NULL)])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_fee]]], fields=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_fee])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :                          :- Exchange(distribution=[broadcast])(reuse_id=[1])
                     :                          :  +- Calc(select=[d_date_sk], where=[(d_year = 2000)])
                     :                          :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
                     :                          +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_fee]]], fields=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_fee])
                     :- Exchange(distribution=[broadcast])
                     :  +- Calc(select=[s_store_sk], where=[(s_state = 'NM')])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_state]]], fields=[s_store_sk, s_state])
                     +- Exchange(distribution=[hash[ctr_customer_sk, ctr_store_sk]])
                        +- Calc(select=[sr_customer_sk AS ctr_customer_sk, sr_store_sk AS ctr_store_sk, sr_fee])
                           +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(sr_returned_date_sk = d_date_sk)], select=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_fee, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_fee], where=[sr_returned_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_fee]]], fields=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_fee])\n+- [#1] Exchange(distribution=[broadcast])\n])
                              :- Reused(reference_id=[1])
                              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_fee]]], fields=[sr_returned_date_sk, sr_customer_sk, sr_store_sk, sr_fee])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q20]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query20.tpl and seed 345591136
select  i_item_desc 
       ,i_category 
       ,i_class 
       ,i_current_price
       ,sum(cs_ext_sales_price) as itemrevenue 
       ,sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) over
           (partition by i_class) as revenueratio
 from catalog_sales
     ,item 
     ,date_dim
 where cs_item_sk = i_item_sk 
   and i_category in ('Jewelry', 'Sports', 'Books')
   and cs_sold_date_sk = d_date_sk
 and d_date between cast('2001-01-12' as date) 
 				and (cast('2001-01-12' as date) + interval '30' day)
 group by i_item_id
         ,i_item_desc 
         ,i_category
         ,i_class
         ,i_current_price
 order by i_category
         ,i_class
         ,i_item_id
         ,i_item_desc
         ,revenueratio
limit 100

-- end query 1 in stream 0 using template query20.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(i_item_desc=[$0], i_category=[$1], i_class=[$2], i_current_price=[$3], itemrevenue=[$4], revenueratio=[$5])
+- LogicalSort(sort0=[$1], sort1=[$2], sort2=[$6], sort3=[$0], sort4=[$5], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], fetch=[100])
   +- LogicalProject(i_item_desc=[$1], i_category=[$2], i_class=[$3], i_current_price=[$4], itemrevenue=[$5], revenueratio=[/(*($5, 100), CASE(>(COUNT($5) OVER (PARTITION BY $3), 0), $SUM0($5) OVER (PARTITION BY $3), null:DOUBLE))], i_item_id=[$0])
      +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], itemrevenue=[SUM($5)])
         +- LogicalProject(i_item_id=[$35], i_item_desc=[$38], i_category=[$46], i_class=[$44], i_current_price=[$39], cs_ext_sales_price=[$23])
            +- LogicalFilter(condition=[AND(=($15, $34), OR(=($46, _UTF-16LE'Jewelry'), =($46, _UTF-16LE'Sports'), =($46, _UTF-16LE'Books')), =($0, $56), >=($58, CAST(_UTF-16LE'2001-01-12'):DATE NOT NULL), <=($58, +(CAST(_UTF-16LE'2001-01-12'):DATE NOT NULL, 2592000000:INTERVAL DAY)))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
                  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[i_item_desc, i_category, i_class, i_current_price, itemrevenue, revenueratio])
+- SortLimit(orderBy=[i_category ASC, i_class ASC, i_item_id ASC, i_item_desc ASC, revenueratio ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[i_category ASC, i_class ASC, i_item_id ASC, i_item_desc ASC, revenueratio ASC], offset=[0], fetch=[100], global=[false])
         +- Calc(select=[i_item_desc, i_category, i_class, i_current_price, itemrevenue, ($6 / CASE((w0$o0 > 0), w0$o1, null:DOUBLE)) AS revenueratio, i_item_id])
            +- OverAggregate(partitionBy=[i_class], window#0=[COUNT(itemrevenue) AS w0$o0, $SUM0(itemrevenue) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, itemrevenue, $6, w0$o0, w0$o1])
               +- Calc(select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, itemrevenue, (itemrevenue * 100) AS $6])
                  +- Sort(orderBy=[i_class ASC])
                     +- Exchange(distribution=[hash[i_class]])
                        +- HashAggregate(isMerge=[true], groupBy=[i_item_id, i_item_desc, i_current_price, i_class, i_category], select=[i_item_id, i_item_desc, i_current_price, i_class, i_category, Final_SUM(sum$0) AS itemrevenue])
                           +- Exchange(distribution=[hash[i_item_id, i_item_desc, i_current_price, i_class, i_category]])
                              +- LocalHashAggregate(groupBy=[i_item_id, i_item_desc, i_current_price, i_class, i_category], select=[i_item_id, i_item_desc, i_current_price, i_class, i_category, Partial_SUM(itemrevenue) AS sum$0])
                                 +- MultipleInput(members=[\nSortMergeJoin(joinType=[InnerJoin], where=[(cs_item_sk = i_item_sk)], select=[cs_item_sk, itemrevenue, i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category])\n:- HashAggregate(isMerge=[true], groupBy=[cs_item_sk], select=[cs_item_sk, Final_SUM(sum$0) AS itemrevenue])\n:  +- [#2] Exchange(distribution=[hash[cs_item_sk]])\n+- [#1] Exchange(distribution=[hash[i_item_sk]])\n])
                                    :- Exchange(distribution=[hash[i_item_sk]])
                                    :  +- Calc(select=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category], where=[SEARCH(i_category, Sarg[_UTF-16LE'Books', _UTF-16LE'Jewelry', _UTF-16LE'Sports'])])
                                    :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category]]], fields=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category])
                                    +- Exchange(distribution=[hash[cs_item_sk]])
                                       +- LocalHashAggregate(groupBy=[cs_item_sk], select=[cs_item_sk, Partial_SUM(cs_ext_sales_price) AS sum$0])
                                          +- Calc(select=[cs_item_sk, cs_ext_sales_price])
                                             +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price], where=[cs_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price]]], fields=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                                :- Exchange(distribution=[broadcast])
                                                :  +- Calc(select=[d_date_sk], where=[SEARCH(d_date, Sarg[[2001-01-12..2001-02-11]])])
                                                :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
                                                +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price]]], fields=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q21]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query21.tpl and seed 1819994127
select  *
 from(select w_warehouse_name
            ,i_item_id
            ,sum(case when (cast(d_date as date) < cast ('1998-04-08' as date))
	                then inv_quantity_on_hand 
                      else 0 end) as inv_before
            ,sum(case when (cast(d_date as date) >= cast ('1998-04-08' as date))
                      then inv_quantity_on_hand 
                      else 0 end) as inv_after
   from inventory
       ,warehouse
       ,item
       ,date_dim
   where i_current_price between 0.99 and 1.49
     and i_item_sk          = inv_item_sk
     and inv_warehouse_sk   = w_warehouse_sk
     and inv_date_sk    = d_date_sk
     and d_date between (cast ('1998-04-08' as date) - interval '30' day)
                    and (cast ('1998-04-08' as date) + interval '30' day)
   group by w_warehouse_name, i_item_id) x
 where (case when inv_before > 0 
             then inv_after / inv_before 
             else null
             end) between 2.0/3.0 and 3.0/2.0
 order by w_warehouse_name
         ,i_item_id
 limit 100

-- end query 1 in stream 0 using template query21.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalProject(w_warehouse_name=[$0], i_item_id=[$1], inv_before=[$2], inv_after=[$3])
   +- LogicalFilter(condition=[AND(>=(CASE(>($2, 0), /($3, $2), null:INTEGER), /(2.0:DECIMAL(2, 1), 3.0:DECIMAL(2, 1))), <=(CASE(>($2, 0), /($3, $2), null:INTEGER), /(3.0:DECIMAL(2, 1), 2.0:DECIMAL(2, 1))))])
      +- LogicalAggregate(group=[{0, 1}], inv_before=[SUM($2)], inv_after=[SUM($3)])
         +- LogicalProject(w_warehouse_name=[$6], i_item_id=[$19], $f2=[CASE(<($42, 1998-04-08), $3, 0)], $f3=[CASE(>=($42, 1998-04-08), $3, 0)])
            +- LogicalFilter(condition=[AND(>=($23, 0.99:DECIMAL(3, 2)), <=($23, 1.49:DECIMAL(3, 2)), =($18, $1), =($2, $4), =($0, $40), >=($42, -(CAST(_UTF-16LE'1998-04-08'):DATE NOT NULL, 2592000000:INTERVAL DAY)), <=($42, +(CAST(_UTF-16LE'1998-04-08'):DATE NOT NULL, 2592000000:INTERVAL DAY)))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, inventory]])
                  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, warehouse]])
                  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[w_warehouse_name ASC, i_item_id ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[w_warehouse_name ASC, i_item_id ASC], offset=[0], fetch=[100], global=[false])
      +- Calc(select=[w_warehouse_name, i_item_id, inv_before, inv_after], where=[(CASE((inv_before > 0), ((inv_after / inv_before) >= 0.666667), false) AND CASE((inv_before > 0), ((inv_after / inv_before) <= 1.500000), false))])
         +- HashAggregate(isMerge=[true], groupBy=[w_warehouse_name, i_item_id], select=[w_warehouse_name, i_item_id, Final_SUM(sum$0) AS inv_before, Final_SUM(sum$1) AS inv_after])
            +- Exchange(distribution=[hash[w_warehouse_name, i_item_id]])
               +- LocalHashAggregate(groupBy=[w_warehouse_name, i_item_id], select=[w_warehouse_name, i_item_id, Partial_SUM($f2) AS sum$0, Partial_SUM($f3) AS sum$1])
                  +- Calc(select=[w_warehouse_name, i_item_id, CASE((d_date < 1998-04-08), inv_quantity_on_hand, 0) AS $f2, CASE((d_date >= 1998-04-08), inv_quantity_on_hand, 0) AS $f3])
                     +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(inv_warehouse_sk = w_warehouse_sk)], select=[inv_warehouse_sk, inv_quantity_on_hand, i_item_id, d_date, w_warehouse_sk, w_warehouse_name], isBroadcast=[true], build=[right])\n:- Calc(select=[inv_warehouse_sk, inv_quantity_on_hand, i_item_id, d_date])\n:  +- HashJoin(joinType=[InnerJoin], where=[(inv_date_sk = d_date_sk)], select=[inv_date_sk, inv_warehouse_sk, inv_quantity_on_hand, i_item_id, d_date_sk, d_date], isBroadcast=[true], build=[right])\n:     :- Calc(select=[inv_date_sk, inv_warehouse_sk, inv_quantity_on_hand, i_item_id])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(i_item_sk = inv_item_sk)], select=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand, i_item_sk, i_item_id], isBroadcast=[true], build=[right])\n:     :     :- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, inventory]], fields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :- Exchange(distribution=[broadcast])
                        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, warehouse, project=[w_warehouse_sk, w_warehouse_name]]], fields=[w_warehouse_sk, w_warehouse_name])
                        :- Exchange(distribution=[broadcast])
                        :  +- Calc(select=[d_date_sk, d_date], where=[SEARCH(d_date, Sarg[[1998-03-09..1998-05-08]])])
                        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
                        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, inventory]], fields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])
                        +- Exchange(distribution=[broadcast])
                           +- Calc(select=[i_item_sk, i_item_id], where=[SEARCH(i_current_price, Sarg[[0.99..1.49]])])
                              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id, i_current_price]]], fields=[i_item_sk, i_item_id, i_current_price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q23a]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query23.tpl and seed 2031708268
with frequent_ss_items as
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3)
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim
       where d_year = 1999
         and d_moy = 1
         and cs_sold_date_sk = d_date_sk
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales
           ,date_dim
       where d_year = 1999
         and d_moy = 1
         and ws_sold_date_sk = d_date_sk
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(fetch=[100])
+- LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
   +- LogicalUnion(all=[true])
      :- LogicalProject(sales=[*($18, $20)])
      :  +- LogicalFilter(condition=[AND(=($40, 1999), =($42, 1), =($0, $34), IN($15, {
LogicalProject(item_sk=[$1])
  LogicalFilter(condition=[>($3, 4)])
    LogicalAggregate(group=[{0, 1, 2}], cnt=[COUNT()])
      LogicalProject(itemdesc=[SUBSTR($55, 1, 30)], item_sk=[$51], solddate=[$25])
        LogicalFilter(condition=[AND(=($0, $23), =($2, $51), OR(=($29, 1999), =($29, +(1999, 1)), =($29, +(1999, 2)), =($29, +(1999, 3))))])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
}), IN($3, {
LogicalProject(c_customer_sk=[$0])
  LogicalFilter(condition=[>($1, *(/(95, 100.0:DECIMAL(4, 1)), $SCALAR_QUERY({
LogicalProject(tpcds_cmax=[$0])
  LogicalAggregate(group=[{}], tpcds_cmax=[MAX($0)])
    LogicalProject(csales=[$1])
      LogicalAggregate(group=[{0}], csales=[SUM($1)])
        LogicalProject(c_customer_sk=[$23], $f1=[*($10, $13)])
          LogicalFilter(condition=[AND(=($3, $23), =($0, $41), OR(=($47, 1999), =($47, +(1999, 1)), =($47, +(1999, 2)), =($47, +(1999, 3))))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
})))])
    LogicalAggregate(group=[{0}], ssales=[SUM($1)])
      LogicalProject(c_customer_sk=[$23], $f1=[*($10, $13)])
        LogicalFilter(condition=[=($3, $23)])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
            LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
}))])
      :     +- LogicalJoin(condition=[true], joinType=[inner])
      :        :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
      :        +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      +- LogicalProject(sales=[*($18, $20)])
         +- LogicalFilter(condition=[AND(=($40, 1999), =($42, 1), =($0, $34), IN($3, {
LogicalProject(item_sk=[$1])
  LogicalFilter(condition=[>($3, 4)])
    LogicalAggregate(group=[{0, 1, 2}], cnt=[COUNT()])
      LogicalProject(itemdesc=[SUBSTR($55, 1, 30)], item_sk=[$51], solddate=[$25])
        LogicalFilter(condition=[AND(=($0, $23), =($2, $51), OR(=($29, 1999), =($29, +(1999, 1)), =($29, +(1999, 2)), =($29, +(1999, 3))))])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
}), IN($4, {
LogicalProject(c_customer_sk=[$0])
  LogicalFilter(condition=[>($1, *(/(95, 100.0:DECIMAL(4, 1)), $SCALAR_QUERY({
LogicalProject(tpcds_cmax=[$0])
  LogicalAggregate(group=[{}], tpcds_cmax=[MAX($0)])
    LogicalProject(csales=[$1])
      LogicalAggregate(group=[{0}], csales=[SUM($1)])
        LogicalProject(c_customer_sk=[$23], $f1=[*($10, $13)])
          LogicalFilter(condition=[AND(=($3, $23), =($0, $41), OR(=($47, 1999), =($47, +(1999, 1)), =($47, +(1999, 2)), =($47, +(1999, 3))))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
})))])
    LogicalAggregate(group=[{0}], ssales=[SUM($1)])
      LogicalProject(c_customer_sk=[$23], $f1=[*($10, $13)])
        LogicalFilter(condition=[=($3, $23)])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
            LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
}))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
               +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Limit(offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- Limit(offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS EXPR$0])
         +- Exchange(distribution=[single])
            +- LocalHashAggregate(select=[Partial_SUM(sales) AS sum$0])
               +- MultipleInput(readOrder=[2,2,0,1,0], members=[\nUnion(all=[true], union=[sales])\n:- Calc(select=[(cs_quantity * cs_list_price) AS sales])\n:  +- HashJoin(joinType=[LeftSemiJoin], where=[(cs_bill_customer_sk = c_customer_sk)], select=[cs_bill_customer_sk, cs_quantity, cs_list_price], build=[right], tryDistinctBuildRow=[true])\n:     :- [#1] Exchange(distribution=[hash[cs_bill_customer_sk]])\n:     +- LocalHashAggregate(groupBy=[c_customer_sk], select=[c_customer_sk])(reuse_id=[1])\n:        +- Calc(select=[c_customer_sk])\n:           +- NestedLoopJoin(joinType=[InnerJoin], where=[(ssales > (0.950000 * $f0))], select=[c_customer_sk, ssales, $f0], build=[right], singleRowJoin=[true])\n:              :- HashAggregate(isMerge=[false], groupBy=[c_customer_sk], select=[c_customer_sk, SUM($f1) AS ssales])\n:              :  +- Calc(select=[c_customer_sk, (ss_quantity * ss_sales_price) AS $f1])\n:              :     +- HashJoin(joinType=[InnerJoin], where=[(ss_customer_sk = c_customer_sk)], select=[ss_customer_sk, ss_quantity, ss_sales_price, c_customer_sk], build=[right])\n:              :        :- [#4] Exchange(distribution=[hash[ss_customer_sk]])\n:              :        +- [#5] Exchange(distribution=[hash[c_customer_sk]])\n:              +- [#3] Exchange(distribution=[broadcast])\n+- Calc(select=[(ws_quantity * ws_list_price) AS sales])\n   +- HashJoin(joinType=[LeftSemiJoin], where=[(ws_bill_customer_sk = c_customer_sk)], select=[ws_bill_customer_sk, ws_quantity, ws_list_price], build=[right], tryDistinctBuildRow=[true])\n      :- [#2] Exchange(distribution=[hash[ws_bill_customer_sk]])\n      +- Reused(reference_id=[1])\n])
                  :- Exchange(distribution=[hash[cs_bill_customer_sk]])
                  :  +- Calc(select=[cs_bill_customer_sk, cs_quantity, cs_list_price])
                  :     +- HashJoin(joinType=[LeftSemiJoin], where=[(cs_item_sk = item_sk)], select=[cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price], build=[right], tryDistinctBuildRow=[true])
                  :        :- Exchange(distribution=[hash[cs_item_sk]])
                  :        :  +- Calc(select=[cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price])
                  :        :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price], where=[cs_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :        :        :- Exchange(distribution=[broadcast])(reuse_id=[1])
                  :        :        :  +- Calc(select=[d_date_sk], where=[((d_year = 1999) AND (d_moy = 1))])
                  :        :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                  :        :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price])
                  :        +- Exchange(distribution=[hash[item_sk]])(reuse_id=[2])
                  :           +- LocalHashAggregate(groupBy=[item_sk], select=[item_sk])
                  :              +- Calc(select=[item_sk], where=[(cnt > 4)])
                  :                 +- HashAggregate(isMerge=[true], groupBy=[itemdesc, item_sk, solddate], select=[itemdesc, item_sk, solddate, Final_COUNT(count1$0) AS cnt])
                  :                    +- Exchange(distribution=[hash[itemdesc, item_sk, solddate]])
                  :                       +- LocalHashAggregate(groupBy=[itemdesc, item_sk, solddate], select=[itemdesc, item_sk, solddate, Partial_COUNT(*) AS count1$0])
                  :                          +- Calc(select=[SUBSTR(i_item_desc, 1, 30) AS itemdesc, i_item_sk AS item_sk, d_date AS solddate])
                  :                             +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, d_date, i_item_sk, i_item_desc], build=[right])
                  :                                :- Exchange(distribution=[hash[ss_item_sk]])
                  :                                :  +- Calc(select=[ss_item_sk, d_date])
                  :                                :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, d_date_sk, d_date], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_item_sk], where=[ss_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk]]], fields=[ss_sold_date_sk, ss_item_sk])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :                                :        :- Exchange(distribution=[broadcast])
                  :                                :        :  +- Calc(select=[d_date_sk, d_date], where=[SEARCH(d_year, Sarg[1999, 2000, 2001, 2002])])
                  :                                :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date, d_year]]], fields=[d_date_sk, d_date, d_year])
                  :                                :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk]]], fields=[ss_sold_date_sk, ss_item_sk])
                  :                                +- Exchange(distribution=[hash[i_item_sk]])
                  :                                   +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_desc]]], fields=[i_item_sk, i_item_desc])
                  :- Exchange(distribution=[hash[ws_bill_customer_sk]])
                  :  +- Calc(select=[ws_bill_customer_sk, ws_quantity, ws_list_price])
                  :     +- HashJoin(joinType=[LeftSemiJoin], where=[(ws_item_sk = item_sk)], select=[ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price], build=[right], tryDistinctBuildRow=[true])
                  :        :- Exchange(distribution=[hash[ws_item_sk]])
                  :        :  +- Calc(select=[ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price])
                  :        :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price])\n+- [#2] Exchange(distribution=[broadcast])\n])
                  :        :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price])
                  :        :        +- Reused(reference_id=[1])
                  :        +- Reused(reference_id=[2])
                  :- Exchange(distribution=[broadcast])
                  :  +- HashAggregate(isMerge=[false], select=[SINGLE_VALUE(tpcds_cmax) AS $f0])
                  :     +- HashAggregate(isMerge=[true], select=[Final_MAX(max$0) AS tpcds_cmax])
                  :        +- Exchange(distribution=[single])
                  :           +- LocalHashAggregate(select=[Partial_MAX(csales) AS max$0])
                  :              +- Calc(select=[csales])
                  :                 +- HashAggregate(isMerge=[false], groupBy=[c_customer_sk], select=[c_customer_sk, SUM($f1) AS csales])
                  :                    +- Calc(select=[c_customer_sk, (ss_quantity * ss_sales_price) AS $f1])
                  :                       +- HashJoin(joinType=[InnerJoin], where=[(ss_customer_sk = c_customer_sk)], select=[ss_customer_sk, ss_quantity, ss_sales_price, c_customer_sk], build=[right])
                  :                          :- Exchange(distribution=[hash[ss_customer_sk]])
                  :                          :  +- Calc(select=[ss_customer_sk, ss_quantity, ss_sales_price])
                  :                          :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price], where=[ss_customer_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :                          :        :- Exchange(distribution=[broadcast])
                  :                          :        :  +- Calc(select=[d_date_sk], where=[SEARCH(d_year, Sarg[1999, 2000, 2001, 2002])])
                  :                          :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
                  :                          :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price])
                  :                          +- Exchange(distribution=[hash[c_customer_sk]])
                  :                             +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk]]], fields=[c_customer_sk])
                  :- Exchange(distribution=[hash[ss_customer_sk]])
                  :  +- Calc(select=[ss_customer_sk, ss_quantity, ss_sales_price], where=[ss_customer_sk IS NOT NULL])
                  :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_customer_sk, ss_quantity, ss_sales_price]]], fields=[ss_customer_sk, ss_quantity, ss_sales_price])
                  +- Exchange(distribution=[hash[c_customer_sk]])
                     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk]]], fields=[c_customer_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q23b]">
    <Resource name="sql">
      <![CDATA[with frequent_ss_items as
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk
    and d_year in (1999,1999 + 1,1999 + 2,1999 + 3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3)
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
 from max_store_sales))
  select  c_last_name,c_first_name,sales
 from ((select c_last_name,c_first_name,sum(cs_quantity*cs_list_price) sales
        from catalog_sales
            ,customer
            ,date_dim
        where d_year = 1999
         and d_moy = 1
         and cs_sold_date_sk = d_date_sk
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer)
         and cs_bill_customer_sk = c_customer_sk
       group by c_last_name,c_first_name)
      union all
      (select c_last_name,c_first_name,sum(ws_quantity*ws_list_price) sales
       from web_sales
           ,customer
           ,date_dim
       where d_year = 1999
         and d_moy = 1
         and ws_sold_date_sk = d_date_sk
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer)
         and ws_bill_customer_sk = c_customer_sk
       group by c_last_name,c_first_name)) y
     order by c_last_name,c_first_name,sales
  limit 100
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalProject(c_last_name=[$0], c_first_name=[$1], sales=[$2])
   +- LogicalUnion(all=[true])
      :- LogicalAggregate(group=[{0, 1}], sales=[SUM($2)])
      :  +- LogicalProject(c_last_name=[$43], c_first_name=[$42], $f2=[*($18, $20)])
      :     +- LogicalFilter(condition=[AND(=($58, 1999), =($60, 1), =($0, $52), IN($15, {
LogicalProject(item_sk=[$1])
  LogicalFilter(condition=[>($3, 4)])
    LogicalAggregate(group=[{0, 1, 2}], cnt=[COUNT()])
      LogicalProject(itemdesc=[SUBSTR($55, 1, 30)], item_sk=[$51], solddate=[$25])
        LogicalFilter(condition=[AND(=($0, $23), =($2, $51), OR(=($29, 1999), =($29, +(1999, 1)), =($29, +(1999, 2)), =($29, +(1999, 3))))])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
}), IN($3, {
LogicalProject(c_customer_sk=[$0])
  LogicalFilter(condition=[>($1, *(/(95, 100.0:DECIMAL(4, 1)), $SCALAR_QUERY({
LogicalProject(tpcds_cmax=[$0])
  LogicalAggregate(group=[{}], tpcds_cmax=[MAX($0)])
    LogicalProject(csales=[$1])
      LogicalAggregate(group=[{0}], csales=[SUM($1)])
        LogicalProject(c_customer_sk=[$23], $f1=[*($10, $13)])
          LogicalFilter(condition=[AND(=($3, $23), =($0, $41), OR(=($47, 1999), =($47, +(1999, 1)), =($47, +(1999, 2)), =($47, +(1999, 3))))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
})))])
    LogicalAggregate(group=[{0}], ssales=[SUM($1)])
      LogicalProject(c_customer_sk=[$23], $f1=[*($10, $13)])
        LogicalFilter(condition=[=($3, $23)])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
            LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
}), =($3, $34))])
      :        +- LogicalJoin(condition=[true], joinType=[inner])
      :           :- LogicalJoin(condition=[true], joinType=[inner])
      :           :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
      :           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
      :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      +- LogicalAggregate(group=[{0, 1}], sales=[SUM($2)])
         +- LogicalProject(c_last_name=[$43], c_first_name=[$42], $f2=[*($18, $20)])
            +- LogicalFilter(condition=[AND(=($58, 1999), =($60, 1), =($0, $52), IN($3, {
LogicalProject(item_sk=[$1])
  LogicalFilter(condition=[>($3, 4)])
    LogicalAggregate(group=[{0, 1, 2}], cnt=[COUNT()])
      LogicalProject(itemdesc=[SUBSTR($55, 1, 30)], item_sk=[$51], solddate=[$25])
        LogicalFilter(condition=[AND(=($0, $23), =($2, $51), OR(=($29, 1999), =($29, +(1999, 1)), =($29, +(1999, 2)), =($29, +(1999, 3))))])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
}), IN($4, {
LogicalProject(c_customer_sk=[$0])
  LogicalFilter(condition=[>($1, *(/(95, 100.0:DECIMAL(4, 1)), $SCALAR_QUERY({
LogicalProject(tpcds_cmax=[$0])
  LogicalAggregate(group=[{}], tpcds_cmax=[MAX($0)])
    LogicalProject(csales=[$1])
      LogicalAggregate(group=[{0}], csales=[SUM($1)])
        LogicalProject(c_customer_sk=[$23], $f1=[*($10, $13)])
          LogicalFilter(condition=[AND(=($3, $23), =($0, $41), OR(=($47, 1999), =($47, +(1999, 1)), =($47, +(1999, 2)), =($47, +(1999, 3))))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
})))])
    LogicalAggregate(group=[{0}], ssales=[SUM($1)])
      LogicalProject(c_customer_sk=[$23], $f1=[*($10, $13)])
        LogicalFilter(condition=[=($3, $23)])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
            LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
}), =($4, $34))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
                  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[c_last_name ASC, c_first_name ASC, sales ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[c_last_name ASC, c_first_name ASC, sales ASC], offset=[0], fetch=[100], global=[false])
      +- Union(all=[true], union=[c_last_name, c_first_name, sales])
         :- HashAggregate(isMerge=[false], groupBy=[c_last_name, c_first_name], select=[c_last_name, c_first_name, SUM($f2) AS sales])
         :  +- Exchange(distribution=[hash[c_last_name, c_first_name]])
         :     +- Calc(select=[c_last_name, c_first_name, (cs_quantity * cs_list_price) AS $f2])
         :        +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_bill_customer_sk = c_customer_sk)], select=[cs_bill_customer_sk, cs_quantity, cs_list_price, c_customer_sk, c_first_name, c_last_name], build=[right])\n:- HashJoin(joinType=[LeftSemiJoin], where=[(cs_bill_customer_sk = c_customer_sk)], select=[cs_bill_customer_sk, cs_quantity, cs_list_price], build=[right], tryDistinctBuildRow=[true])\n:  :- [#2] Exchange(distribution=[hash[cs_bill_customer_sk]])\n:  +- [#3] LocalHashAggregate(groupBy=[c_customer_sk], select=[c_customer_sk])\n+- [#1] Exchange(distribution=[hash[c_customer_sk]])\n])
         :           :- Exchange(distribution=[hash[c_customer_sk]])
         :           :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_first_name, c_last_name]]], fields=[c_customer_sk, c_first_name, c_last_name])
         :           :- Exchange(distribution=[hash[cs_bill_customer_sk]])
         :           :  +- Calc(select=[cs_bill_customer_sk, cs_quantity, cs_list_price])
         :           :     +- HashJoin(joinType=[LeftSemiJoin], where=[(cs_item_sk = item_sk)], select=[cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price], build=[right], tryDistinctBuildRow=[true])
         :           :        :- Exchange(distribution=[hash[cs_item_sk]])
         :           :        :  +- Calc(select=[cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price])
         :           :        :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price], where=[cs_bill_customer_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
         :           :        :        :- Exchange(distribution=[broadcast])(reuse_id=[1])
         :           :        :        :  +- Calc(select=[d_date_sk], where=[((d_year = 1999) AND (d_moy = 1))])
         :           :        :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
         :           :        :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_list_price])
         :           :        +- Exchange(distribution=[hash[item_sk]])(reuse_id=[2])
         :           :           +- LocalHashAggregate(groupBy=[item_sk], select=[item_sk])
         :           :              +- Calc(select=[item_sk], where=[(cnt > 4)])
         :           :                 +- HashAggregate(isMerge=[true], groupBy=[itemdesc, item_sk, solddate], select=[itemdesc, item_sk, solddate, Final_COUNT(count1$0) AS cnt])
         :           :                    +- Exchange(distribution=[hash[itemdesc, item_sk, solddate]])
         :           :                       +- LocalHashAggregate(groupBy=[itemdesc, item_sk, solddate], select=[itemdesc, item_sk, solddate, Partial_COUNT(*) AS count1$0])
         :           :                          +- Calc(select=[SUBSTR(i_item_desc, 1, 30) AS itemdesc, i_item_sk AS item_sk, d_date AS solddate])
         :           :                             +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, d_date, i_item_sk, i_item_desc], build=[right])
         :           :                                :- Exchange(distribution=[hash[ss_item_sk]])
         :           :                                :  +- Calc(select=[ss_item_sk, d_date])
         :           :                                :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, d_date_sk, d_date], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_item_sk], where=[ss_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk]]], fields=[ss_sold_date_sk, ss_item_sk])\n+- [#1] Exchange(distribution=[broadcast])\n])
         :           :                                :        :- Exchange(distribution=[broadcast])
         :           :                                :        :  +- Calc(select=[d_date_sk, d_date], where=[SEARCH(d_year, Sarg[1999, 2000, 2001, 2002])])
         :           :                                :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date, d_year]]], fields=[d_date_sk, d_date, d_year])
         :           :                                :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk]]], fields=[ss_sold_date_sk, ss_item_sk])
         :           :                                +- Exchange(distribution=[hash[i_item_sk]])
         :           :                                   +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_desc]]], fields=[i_item_sk, i_item_desc])
         :           +- LocalHashAggregate(groupBy=[c_customer_sk], select=[c_customer_sk])(reuse_id=[3])
         :              +- Calc(select=[c_customer_sk])
         :                 +- MultipleInput(readOrder=[0,1,0], members=[\nNestedLoopJoin(joinType=[InnerJoin], where=[(ssales > (0.950000 * $f0))], select=[c_customer_sk, ssales, $f0], build=[right], singleRowJoin=[true])\n:- HashAggregate(isMerge=[false], groupBy=[c_customer_sk], select=[c_customer_sk, SUM($f1) AS ssales])\n:  +- Calc(select=[c_customer_sk, (ss_quantity * ss_sales_price) AS $f1])\n:     +- HashJoin(joinType=[InnerJoin], where=[(ss_customer_sk = c_customer_sk)], select=[ss_customer_sk, ss_quantity, ss_sales_price, c_customer_sk], build=[right])\n:        :- [#2] Exchange(distribution=[hash[ss_customer_sk]])\n:        +- [#3] Exchange(distribution=[hash[c_customer_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
         :                    :- Exchange(distribution=[broadcast])
         :                    :  +- HashAggregate(isMerge=[false], select=[SINGLE_VALUE(tpcds_cmax) AS $f0])
         :                    :     +- HashAggregate(isMerge=[true], select=[Final_MAX(max$0) AS tpcds_cmax])
         :                    :        +- Exchange(distribution=[single])
         :                    :           +- LocalHashAggregate(select=[Partial_MAX(csales) AS max$0])
         :                    :              +- Calc(select=[csales])
         :                    :                 +- HashAggregate(isMerge=[false], groupBy=[c_customer_sk], select=[c_customer_sk, SUM($f1) AS csales])
         :                    :                    +- Calc(select=[c_customer_sk, (ss_quantity * ss_sales_price) AS $f1])
         :                    :                       +- HashJoin(joinType=[InnerJoin], where=[(ss_customer_sk = c_customer_sk)], select=[ss_customer_sk, ss_quantity, ss_sales_price, c_customer_sk], build=[right])
         :                    :                          :- Exchange(distribution=[hash[ss_customer_sk]])
         :                    :                          :  +- Calc(select=[ss_customer_sk, ss_quantity, ss_sales_price])
         :                    :                          :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price], where=[ss_customer_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
         :                    :                          :        :- Exchange(distribution=[broadcast])
         :                    :                          :        :  +- Calc(select=[d_date_sk], where=[SEARCH(d_year, Sarg[1999, 2000, 2001, 2002])])
         :                    :                          :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
         :                    :                          :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_quantity, ss_sales_price])
         :                    :                          +- Exchange(distribution=[hash[c_customer_sk]])
         :                    :                             +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk]]], fields=[c_customer_sk])
         :                    :- Exchange(distribution=[hash[ss_customer_sk]])
         :                    :  +- Calc(select=[ss_customer_sk, ss_quantity, ss_sales_price], where=[ss_customer_sk IS NOT NULL])
         :                    :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_customer_sk, ss_quantity, ss_sales_price]]], fields=[ss_customer_sk, ss_quantity, ss_sales_price])
         :                    +- Exchange(distribution=[hash[c_customer_sk]])
         :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk]]], fields=[c_customer_sk])
         +- HashAggregate(isMerge=[false], groupBy=[c_last_name, c_first_name], select=[c_last_name, c_first_name, SUM($f2) AS sales])
            +- Exchange(distribution=[hash[c_last_name, c_first_name]])
               +- Calc(select=[c_last_name, c_first_name, (ws_quantity * ws_list_price) AS $f2])
                  +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_bill_customer_sk = c_customer_sk)], select=[ws_bill_customer_sk, ws_quantity, ws_list_price, c_customer_sk, c_first_name, c_last_name], build=[right])\n:- HashJoin(joinType=[LeftSemiJoin], where=[(ws_bill_customer_sk = c_customer_sk)], select=[ws_bill_customer_sk, ws_quantity, ws_list_price], build=[right], tryDistinctBuildRow=[true])\n:  :- [#2] Exchange(distribution=[hash[ws_bill_customer_sk]])\n:  +- [#3] LocalHashAggregate(groupBy=[c_customer_sk], select=[c_customer_sk])\n+- [#1] Exchange(distribution=[hash[c_customer_sk]])\n])
                     :- Exchange(distribution=[hash[c_customer_sk]])
                     :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_first_name, c_last_name]]], fields=[c_customer_sk, c_first_name, c_last_name])
                     :- Exchange(distribution=[hash[ws_bill_customer_sk]])
                     :  +- Calc(select=[ws_bill_customer_sk, ws_quantity, ws_list_price])
                     :     +- HashJoin(joinType=[LeftSemiJoin], where=[(ws_item_sk = item_sk)], select=[ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price], build=[right], tryDistinctBuildRow=[true])
                     :        :- Exchange(distribution=[hash[ws_item_sk]])
                     :        :  +- Calc(select=[ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price])
                     :        :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price])\n+- [#2] Exchange(distribution=[broadcast])\n])
                     :        :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_list_price])
                     :        :        +- Reused(reference_id=[1])
                     :        +- Reused(reference_id=[2])
                     +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q24]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query24.tpl and seed 1220860970
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_current_addr_sk = ca_address_sk
  and c_birth_country <> upper(ca_country)
  and s_zip = ca_zip
and s_market_id=7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'orchid'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)


-- end query 1 in stream 0 using template query24.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalFilter(condition=[>($3, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(0.05:DECIMAL(3, 2), $0)])
  LogicalAggregate(group=[{}], agg#0=[AVG($0)])
    LogicalProject(netpaid=[$10])
      LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}], netpaid=[SUM($10)])
        LogicalProject(c_last_name=[$103], c_first_name=[$102], s_store_name=[$48], ca_state=[$120], s_state=[$67], i_color=[$89], i_current_price=[$77], i_manager_id=[$92], i_units=[$90], i_size=[$87], ss_sales_price=[$13])
          LogicalFilter(condition=[AND(=($9, $32), =($2, $25), =($3, $94), =($2, $72), =($7, $43), =($98, $112), <>($108, UPPER($122)), =($68, $121), =($53, 7))])
            LogicalJoin(condition=[true], joinType=[inner])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalJoin(condition=[true], joinType=[inner])
                    LogicalJoin(condition=[true], joinType=[inner])
                      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
                    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
              LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
}))])
+- LogicalAggregate(group=[{0, 1, 2}], paid=[SUM($3)])
   +- LogicalProject(c_last_name=[$0], c_first_name=[$1], s_store_name=[$2], netpaid=[$10])
      +- LogicalFilter(condition=[=($5, _UTF-16LE'orchid')])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}], netpaid=[SUM($10)])
            +- LogicalProject(c_last_name=[$103], c_first_name=[$102], s_store_name=[$48], ca_state=[$120], s_state=[$67], i_color=[$89], i_current_price=[$77], i_manager_id=[$92], i_units=[$90], i_size=[$87], ss_sales_price=[$13])
               +- LogicalFilter(condition=[AND(=($9, $32), =($2, $25), =($3, $94), =($2, $72), =($7, $43), =($98, $112), <>($108, UPPER($122)), =($68, $121), =($53, 7))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                     :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
                     :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
                     :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                     :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
                     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[c_last_name, c_first_name, s_store_name, paid])
+- NestedLoopJoin(joinType=[InnerJoin], where=[(paid > $f0)], select=[c_last_name, c_first_name, s_store_name, paid, $f0], build=[right], singleRowJoin=[true])
   :- Exchange(distribution=[any])
   :  +- HashAggregate(isMerge=[false], groupBy=[c_last_name, c_first_name, s_store_name], select=[c_last_name, c_first_name, s_store_name, SUM(netpaid) AS paid])
   :     +- Exchange(distribution=[hash[c_last_name, c_first_name, s_store_name]])
   :        +- Calc(select=[c_last_name, c_first_name, s_store_name, netpaid])
   :           +- HashAggregate(isMerge=[true], groupBy=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size], select=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size, Final_SUM(sum$0) AS netpaid])
   :              +- Exchange(distribution=[hash[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size]])
   :                 +- LocalHashAggregate(groupBy=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size], select=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size, Partial_SUM(ss_sales_price) AS sum$0])
   :                    +- Calc(select=[c_last_name, c_first_name, s_store_name, ca_state, s_state, CAST('orchid' AS VARCHAR(2147483647)) AS i_color, i_current_price, i_manager_id, i_units, i_size, ss_sales_price])
   :                       +- HashJoin(joinType=[InnerJoin], where=[(sr_item_sk = i_item_sk)], select=[sr_item_sk, ss_sales_price, c_first_name, c_last_name, ca_state, s_store_name, s_state, i_item_sk, i_current_price, i_size, i_units, i_manager_id], isBroadcast=[true], build=[right])
   :                          :- Calc(select=[sr_item_sk, ss_sales_price, c_first_name, c_last_name, ca_state, s_store_name, s_state])(reuse_id=[1])
   :                          :  +- HashJoin(joinType=[InnerJoin], where=[((ss_ticket_number = sr_ticket_number) AND (ss_item_sk = sr_item_sk))], select=[sr_item_sk, sr_ticket_number, ss_item_sk, ss_ticket_number, ss_sales_price, c_first_name, c_last_name, ca_state, s_store_name, s_state], build=[right])
   :                          :     :- Exchange(distribution=[hash[sr_item_sk]])
   :                          :     :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_item_sk, sr_ticket_number]]], fields=[sr_item_sk, sr_ticket_number])
   :                          :     +- Exchange(distribution=[hash[ss_item_sk]])
   :                          :        +- Calc(select=[ss_item_sk, ss_ticket_number, ss_sales_price, c_first_name, c_last_name, ca_state, s_store_name, s_state])
   :                          :           +- HashJoin(joinType=[InnerJoin], where=[((ss_customer_sk = c_customer_sk) AND (ss_store_sk = s_store_sk))], select=[ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_sales_price, c_customer_sk, c_first_name, c_last_name, ca_state, s_store_sk, s_store_name, s_state], build=[right])
   :                          :              :- Exchange(distribution=[hash[ss_customer_sk, ss_store_sk]])
   :                          :              :  +- Calc(select=[ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_sales_price], where=[(ss_customer_sk IS NOT NULL AND ss_store_sk IS NOT NULL)])
   :                          :              :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_sales_price]]], fields=[ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_sales_price])
   :                          :              +- Exchange(distribution=[hash[c_customer_sk, s_store_sk]])
   :                          :                 +- Calc(select=[c_customer_sk, c_first_name, c_last_name, ca_state, s_store_sk, s_store_name, s_state])
   :                          :                    +- HashJoin(joinType=[InnerJoin], where=[((c_current_addr_sk = ca_address_sk) AND (c_birth_country <> UPPER(ca_country)))], select=[c_customer_sk, c_current_addr_sk, c_first_name, c_last_name, c_birth_country, ca_address_sk, ca_state, ca_country, s_store_sk, s_store_name, s_state], build=[right])
   :                          :                       :- Exchange(distribution=[hash[c_current_addr_sk]])
   :                          :                       :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_current_addr_sk, c_first_name, c_last_name, c_birth_country]]], fields=[c_customer_sk, c_current_addr_sk, c_first_name, c_last_name, c_birth_country])
   :                          :                       +- Exchange(distribution=[hash[ca_address_sk]])
   :                          :                          +- Calc(select=[ca_address_sk, ca_state, ca_country, s_store_sk, s_store_name, s_state])
   :                          :                             +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(s_zip = ca_zip)], select=[ca_address_sk, ca_state, ca_zip, ca_country, s_store_sk, s_store_name, s_state, s_zip], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state, ca_zip, ca_country]]], fields=[ca_address_sk, ca_state, ca_zip, ca_country])\n+- [#2] Exchange(distribution=[broadcast])\n])
   :                          :                                :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state, ca_zip, ca_country]]], fields=[ca_address_sk, ca_state, ca_zip, ca_country])
   :                          :                                +- Exchange(distribution=[broadcast])
   :                          :                                   +- Calc(select=[s_store_sk, s_store_name, s_state, s_zip], where=[(s_market_id = 7)])
   :                          :                                      +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_store_name, s_market_id, s_state, s_zip]]], fields=[s_store_sk, s_store_name, s_market_id, s_state, s_zip])
   :                          +- Exchange(distribution=[broadcast])
   :                             +- Calc(select=[i_item_sk, i_current_price, i_size, i_units, i_manager_id], where=[(i_color = 'orchid')])
   :                                +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_current_price, i_size, i_color, i_units, i_manager_id]]], fields=[i_item_sk, i_current_price, i_size, i_color, i_units, i_manager_id])
   +- Exchange(distribution=[broadcast])
      +- HashAggregate(isMerge=[false], select=[SINGLE_VALUE(EXPR$0) AS $f0])
         +- Calc(select=[(0.05 * $f0) AS EXPR$0])
            +- HashAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS $f0])
               +- Exchange(distribution=[single])
                  +- LocalHashAggregate(select=[Partial_AVG(netpaid) AS (sum$0, count$1)])
                     +- Calc(select=[netpaid])
                        +- HashAggregate(isMerge=[false], groupBy=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size], select=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size, SUM(ss_sales_price) AS netpaid])
                           +- Exchange(distribution=[hash[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size]])
                              +- Calc(select=[c_last_name, c_first_name, s_store_name, ca_state, s_state, i_color, i_current_price, i_manager_id, i_units, i_size, ss_sales_price])
                                 +- HashJoin(joinType=[InnerJoin], where=[(sr_item_sk = i_item_sk)], select=[sr_item_sk, ss_sales_price, c_first_name, c_last_name, ca_state, s_store_name, s_state, i_item_sk, i_current_price, i_size, i_color, i_units, i_manager_id], build=[right])
                                    :- Reused(reference_id=[1])
                                    +- Exchange(distribution=[hash[i_item_sk]])
                                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_current_price, i_size, i_color, i_units, i_manager_id]]], fields=[i_item_sk, i_current_price, i_size, i_color, i_units, i_manager_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q25]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query25.tpl and seed 1819994127
select  
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 ,sum(ss_net_profit) as store_sales_profit
 ,sum(sr_net_loss) as store_returns_loss
 ,sum(cs_net_profit) as catalog_sales_profit
 from
 store_sales
 ,store_returns
 ,catalog_sales
 ,date_dim d1
 ,date_dim d2
 ,date_dim d3
 ,store
 ,item
 where
 d1.d_moy = 4
 and d1.d_year = 2000
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk = ss_item_sk
 and s_store_sk = ss_store_sk
 and ss_customer_sk = sr_customer_sk
 and ss_item_sk = sr_item_sk
 and ss_ticket_number = sr_ticket_number
 and sr_returned_date_sk = d2.d_date_sk
 and d2.d_moy               between 4 and  10
 and d2.d_year              = 2000
 and sr_customer_sk = cs_bill_customer_sk
 and sr_item_sk = cs_item_sk
 and cs_sold_date_sk = d3.d_date_sk
 and d3.d_moy               between 4 and  10 
 and d3.d_year              = 2000
 group by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 order by
 i_item_id
 ,i_item_desc
 ,s_store_id
 ,s_store_name
 limit 100

-- end query 1 in stream 0 using template query25.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2, 3}], store_sales_profit=[SUM($4)], store_returns_loss=[SUM($5)], catalog_sales_profit=[SUM($6)])
   +- LogicalProject(i_item_id=[$191], i_item_desc=[$194], s_store_id=[$162], s_store_name=[$166], ss_net_profit=[$22], sr_net_loss=[$42], cs_net_profit=[$76])
      +- LogicalFilter(condition=[AND(=($85, 4), =($83, 2000), =($77, $0), =($190, $2), =($161, $7), =($3, $26), =($2, $25), =($9, $32), =($23, $105), >=($113, 4), <=($113, 10), =($111, 2000), =($26, $46), =($25, $58), =($43, $133), >=($141, 4), <=($141, 10), =($139, 2000))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
            :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
            :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
            :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[i_item_id ASC, i_item_desc ASC, s_store_id ASC, s_store_name ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_item_id ASC, i_item_desc ASC, s_store_id ASC, s_store_name ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[false], groupBy=[i_item_id, i_item_desc, s_store_id, s_store_name], select=[i_item_id, i_item_desc, s_store_id, s_store_name, SUM(ss_net_profit) AS store_sales_profit, SUM(sr_net_loss) AS store_returns_loss, SUM(cs_net_profit) AS catalog_sales_profit])
         +- Exchange(distribution=[hash[i_item_id, i_item_desc, s_store_id, s_store_name]])
            +- Calc(select=[i_item_id, i_item_desc, s_store_id, s_store_name, ss_net_profit, sr_net_loss, cs_net_profit])
               +- MultipleInput(readOrder=[0,0,0,2,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(s_store_sk = ss_store_sk)], select=[cs_net_profit, ss_store_sk, ss_net_profit, sr_net_loss, i_item_id, i_item_desc, s_store_sk, s_store_id, s_store_name], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_net_profit, ss_store_sk, ss_net_profit, sr_net_loss, i_item_id, i_item_desc])\n:  +- HashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_net_profit, ss_store_sk, ss_net_profit, sr_net_loss, i_item_id, i_item_desc, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[cs_sold_date_sk, cs_net_profit, ss_store_sk, ss_net_profit, sr_net_loss, i_item_id, i_item_desc])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(cs_item_sk = i_item_sk)], select=[cs_sold_date_sk, cs_item_sk, cs_net_profit, ss_store_sk, ss_net_profit, sr_net_loss, i_item_sk, i_item_id, i_item_desc], build=[right])\n:     :     :- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_net_profit, ss_store_sk, ss_net_profit, sr_net_loss])\n:     :     :  +- HashJoin(joinType=[InnerJoin], where=[((sr_customer_sk = cs_bill_customer_sk) AND (cs_item_sk = ss_item_sk))], select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_net_profit, ss_item_sk, ss_store_sk, ss_net_profit, sr_customer_sk, sr_net_loss], build=[right])\n:     :     :     :- [#4] Exchange(distribution=[hash[cs_item_sk]])\n:     :     :     +- Calc(select=[ss_item_sk, ss_store_sk, ss_net_profit, sr_customer_sk, sr_net_loss])\n:     :     :        +- HashJoin(joinType=[InnerJoin], where=[(d_date_sk = ss_sold_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_net_profit, sr_customer_sk, sr_net_loss, d_date_sk], isBroadcast=[true], build=[right])\n:     :     :           :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_net_profit, sr_customer_sk, sr_net_loss])\n:     :     :           :  +- HashJoin(joinType=[InnerJoin], where=[((ss_customer_sk = sr_customer_sk) AND (ss_item_sk = sr_item_sk) AND (ss_ticket_number = sr_ticket_number))], select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_net_profit, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_net_loss], build=[right])\n:     :     :           :     :- [#6] Exchange(distribution=[hash[ss_item_sk]])\n:     :     :           :     +- [#7] Exchange(distribution=[hash[sr_item_sk]])\n:     :     :           +- [#5] Exchange(distribution=[broadcast])\n:     :     +- [#3] Exchange(distribution=[hash[i_item_sk]])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :- Exchange(distribution=[broadcast])
                  :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_store_id, s_store_name]]], fields=[s_store_sk, s_store_id, s_store_name])
                  :- Exchange(distribution=[broadcast])(reuse_id=[1])
                  :  +- Calc(select=[d_date_sk], where=[(SEARCH(d_moy, Sarg[[4..10]]) AND SEARCH(d_year, Sarg[2000]))])
                  :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                  :- Exchange(distribution=[hash[i_item_sk]])
                  :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id, i_item_desc]]], fields=[i_item_sk, i_item_id, i_item_desc])
                  :- Exchange(distribution=[hash[cs_item_sk]])
                  :  +- Calc(select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_net_profit], where=[cs_bill_customer_sk IS NOT NULL])
                  :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_net_profit]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_net_profit])
                  :- Exchange(distribution=[broadcast])
                  :  +- Calc(select=[d_date_sk], where=[(SEARCH(d_moy, Sarg[4]) AND SEARCH(d_year, Sarg[2000]))])
                  :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                  :- Exchange(distribution=[hash[ss_item_sk]])
                  :  +- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_net_profit], where=[ss_customer_sk IS NOT NULL])
                  :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_net_profit]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_net_profit])
                  +- Exchange(distribution=[hash[sr_item_sk]])
                     +- Calc(select=[sr_item_sk, sr_customer_sk, sr_ticket_number, sr_net_loss])
                        +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(sr_returned_date_sk = d_date_sk)], select=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_net_loss, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_net_loss], where=[sr_customer_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_net_loss]]], fields=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_net_loss])\n+- [#1] Exchange(distribution=[broadcast])\n])
                           :- Reused(reference_id=[1])
                           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_net_loss]]], fields=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_net_loss])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q26]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query26.tpl and seed 1930872976
select  i_item_id, 
        avg(cs_quantity) agg1,
        avg(cs_list_price) agg2,
        avg(cs_coupon_amt) agg3,
        avg(cs_sales_price) agg4 
 from catalog_sales, customer_demographics, date_dim, item, promotion
 where cs_sold_date_sk = d_date_sk and
       cs_item_sk = i_item_sk and
       cs_bill_cdemo_sk = cd_demo_sk and
       cs_promo_sk = p_promo_sk and
       cd_gender = 'F' and 
       cd_marital_status = 'W' and
       cd_education_status = 'Primary' and
       (p_channel_email = 'N' or p_channel_event = 'N') and
       d_year = 1998 
 group by i_item_id
 order by i_item_id
 limit 100

-- end query 1 in stream 0 using template query26.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}], agg1=[AVG($1)], agg2=[AVG($2)], agg3=[AVG($3)], agg4=[AVG($4)])
   +- LogicalProject(i_item_id=[$72], cs_quantity=[$18], cs_list_price=[$20], cs_coupon_amt=[$27], cs_sales_price=[$21])
      +- LogicalFilter(condition=[AND(=($0, $43), =($15, $71), =($4, $34), =($16, $93), =($35, _UTF-16LE'F'), =($36, _UTF-16LE'W'), =($37, _UTF-16LE'Primary'), OR(=($102, _UTF-16LE'N'), =($107, _UTF-16LE'N')), =($49, 1998))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
            :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, promotion]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[i_item_id ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_item_id ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_AVG(sum$0, count$1) AS agg1, Final_AVG(sum$2, count$3) AS agg2, Final_AVG(sum$4, count$5) AS agg3, Final_AVG(sum$6, count$7) AS agg4])
         +- Exchange(distribution=[hash[i_item_id]])
            +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_AVG(cs_quantity) AS (sum$0, count$1), Partial_AVG(cs_list_price) AS (sum$2, count$3), Partial_AVG(cs_coupon_amt) AS (sum$4, count$5), Partial_AVG(cs_sales_price) AS (sum$6, count$7)])
               +- Calc(select=[i_item_id, cs_quantity, cs_list_price, cs_coupon_amt, cs_sales_price])
                  +- HashJoin(joinType=[InnerJoin], where=[(cs_item_sk = i_item_sk)], select=[cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, i_item_sk, i_item_id], build=[right])
                     :- Exchange(distribution=[hash[cs_item_sk]])
                     :  +- Calc(select=[cs_item_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt])
                     :     +- MultipleInput(readOrder=[0,0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_promo_sk = p_promo_sk)], select=[cs_item_sk, cs_promo_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, p_promo_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_item_sk, cs_promo_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt])\n:  +- HashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_promo_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(cs_bill_cdemo_sk = cd_demo_sk)], select=[cs_sold_date_sk, cs_bill_cdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt, cd_demo_sk], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[cs_sold_date_sk, cs_bill_cdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt], where=[cs_bill_cdemo_sk IS NOT NULL])\n:     :     :  +- [#4] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_cdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt]]], fields=[cs_sold_date_sk, cs_bill_cdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :        :- Exchange(distribution=[broadcast])
                     :        :  +- Calc(select=[p_promo_sk], where=[((p_channel_email = 'N') OR (p_channel_event = 'N'))])
                     :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, promotion, project=[p_promo_sk, p_channel_email, p_channel_event]]], fields=[p_promo_sk, p_channel_email, p_channel_event])
                     :        :- Exchange(distribution=[broadcast])
                     :        :  +- Calc(select=[d_date_sk], where=[(d_year = 1998)])
                     :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
                     :        :- Exchange(distribution=[broadcast])
                     :        :  +- Calc(select=[cd_demo_sk], where=[((cd_gender = 'F') AND (cd_marital_status = 'W') AND (cd_education_status = 'Primary'))])
                     :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status]]], fields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status])
                     :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_cdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt]]], fields=[cs_sold_date_sk, cs_bill_cdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity, cs_list_price, cs_sales_price, cs_coupon_amt])
                     +- Exchange(distribution=[hash[i_item_sk]])
                        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q27]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query27.tpl and seed 2017787633
select  i_item_id,
        s_state, grouping(s_state) g_state,
        avg(ss_quantity) agg1,
        avg(ss_list_price) agg2,
        avg(ss_coupon_amt) agg3,
        avg(ss_sales_price) agg4
 from store_sales, customer_demographics, date_dim, store, item
 where ss_sold_date_sk = d_date_sk and
       ss_item_sk = i_item_sk and
       ss_store_sk = s_store_sk and
       ss_cdemo_sk = cd_demo_sk and
       cd_gender = 'M' and
       cd_marital_status = 'U' and
       cd_education_status = '2 yr Degree' and
       d_year = 2001 and
       s_state in ('SD','FL', 'MI', 'LA', 'MO', 'SC')
 group by rollup (i_item_id, s_state)
 order by i_item_id
         ,s_state
 limit 100

-- end query 1 in stream 0 using template query27.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], g_state=[GROUPING($1)], agg1=[AVG($2)], agg2=[AVG($3)], agg3=[AVG($4)], agg4=[AVG($5)])
   +- LogicalProject(i_item_id=[$90], s_state=[$84], ss_quantity=[$10], ss_list_price=[$12], ss_coupon_amt=[$19], ss_sales_price=[$13])
      +- LogicalFilter(condition=[AND(=($0, $32), =($2, $89), =($7, $60), =($4, $23), =($24, _UTF-16LE'M'), =($25, _UTF-16LE'U'), =($26, _UTF-16LE'2 yr Degree'), =($38, 2001), OR(=($84, _UTF-16LE'SD'), =($84, _UTF-16LE'FL'), =($84, _UTF-16LE'MI'), =($84, _UTF-16LE'LA'), =($84, _UTF-16LE'MO'), =($84, _UTF-16LE'SC')))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
            :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[i_item_id, s_state, CASE(($e = 0), 0, 1) AS g_state, agg1, agg2, agg3, agg4])
+- SortLimit(orderBy=[i_item_id ASC, s_state ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[i_item_id ASC, s_state ASC], offset=[0], fetch=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[i_item_id, s_state, $e], select=[i_item_id, s_state, $e, Final_AVG(sum$0, count$1) AS agg1, Final_AVG(sum$2, count$3) AS agg2, Final_AVG(sum$4, count$5) AS agg3, Final_AVG(sum$6, count$7) AS agg4])
            +- Exchange(distribution=[hash[i_item_id, s_state, $e]])
               +- LocalHashAggregate(groupBy=[i_item_id, s_state, $e], select=[i_item_id, s_state, $e, Partial_AVG(ss_quantity) AS (sum$0, count$1), Partial_AVG(ss_list_price) AS (sum$2, count$3), Partial_AVG(ss_coupon_amt) AS (sum$4, count$5), Partial_AVG(ss_sales_price) AS (sum$6, count$7)])
                  +- Expand(projects=[{i_item_id, s_state, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price, 0 AS $e}, {i_item_id, null AS s_state, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price, 1 AS $e}, {null AS i_item_id, null AS s_state, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price, 3 AS $e}])
                     +- Calc(select=[i_item_id, s_state, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price])
                        +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, s_state, i_item_sk, i_item_id], build=[right])
                           :- Exchange(distribution=[hash[ss_item_sk]])
                           :  +- Calc(select=[ss_item_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, s_state])
                           :     +- MultipleInput(readOrder=[0,0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_item_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, s_store_sk, s_state], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_item_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_cdemo_sk = cd_demo_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, cd_demo_sk], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt], where=[ss_cdemo_sk IS NOT NULL])\n:     :     :  +- [#4] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt]]], fields=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                           :        :- Exchange(distribution=[broadcast])
                           :        :  +- Calc(select=[s_store_sk, s_state], where=[SEARCH(s_state, Sarg[_UTF-16LE'FL', _UTF-16LE'LA', _UTF-16LE'MI', _UTF-16LE'MO', _UTF-16LE'SC', _UTF-16LE'SD'])])
                           :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_state]]], fields=[s_store_sk, s_state])
                           :        :- Exchange(distribution=[broadcast])
                           :        :  +- Calc(select=[d_date_sk], where=[SEARCH(d_year, Sarg[2001])])
                           :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
                           :        :- Exchange(distribution=[broadcast])
                           :        :  +- Calc(select=[cd_demo_sk], where=[(SEARCH(cd_gender, Sarg[_UTF-16LE'M']) AND SEARCH(cd_marital_status, Sarg[_UTF-16LE'U']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'2 yr Degree']))])
                           :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status]]], fields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status])
                           :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt]]], fields=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_store_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt])
                           +- Exchange(distribution=[hash[i_item_sk]])
                              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q28]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query28.tpl and seed 444293455
select  *
from (select avg(ss_list_price) B1_LP
            ,count(ss_list_price) B1_CNT
            ,count(distinct ss_list_price) B1_CNTD
      from store_sales
      where ss_quantity between 0 and 5
        and (ss_list_price between 11 and 11+10 
             or ss_coupon_amt between 460 and 460+1000
             or ss_wholesale_cost between 14 and 14+20)) B1,
     (select avg(ss_list_price) B2_LP
            ,count(ss_list_price) B2_CNT
            ,count(distinct ss_list_price) B2_CNTD
      from store_sales
      where ss_quantity between 6 and 10
        and (ss_list_price between 91 and 91+10
          or ss_coupon_amt between 1430 and 1430+1000
          or ss_wholesale_cost between 32 and 32+20)) B2,
     (select avg(ss_list_price) B3_LP
            ,count(ss_list_price) B3_CNT
            ,count(distinct ss_list_price) B3_CNTD
      from store_sales
      where ss_quantity between 11 and 15
        and (ss_list_price between 66 and 66+10
          or ss_coupon_amt between 920 and 920+1000
          or ss_wholesale_cost between 4 and 4+20)) B3,
     (select avg(ss_list_price) B4_LP
            ,count(ss_list_price) B4_CNT
            ,count(distinct ss_list_price) B4_CNTD
      from store_sales
      where ss_quantity between 16 and 20
        and (ss_list_price between 142 and 142+10
          or ss_coupon_amt between 3054 and 3054+1000
          or ss_wholesale_cost between 80 and 80+20)) B4,
     (select avg(ss_list_price) B5_LP
            ,count(ss_list_price) B5_CNT
            ,count(distinct ss_list_price) B5_CNTD
      from store_sales
      where ss_quantity between 21 and 25
        and (ss_list_price between 135 and 135+10
          or ss_coupon_amt between 14180 and 14180+1000
          or ss_wholesale_cost between 38 and 38+20)) B5,
     (select avg(ss_list_price) B6_LP
            ,count(ss_list_price) B6_CNT
            ,count(distinct ss_list_price) B6_CNTD
      from store_sales
      where ss_quantity between 26 and 30
        and (ss_list_price between 28 and 28+10
          or ss_coupon_amt between 2513 and 2513+1000
          or ss_wholesale_cost between 42 and 42+20)) B6
limit 100

-- end query 1 in stream 0 using template query28.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(fetch=[100])
+- LogicalProject(B1_LP=[$0], B1_CNT=[$1], B1_CNTD=[$2], B2_LP=[$3], B2_CNT=[$4], B2_CNTD=[$5], B3_LP=[$6], B3_CNT=[$7], B3_CNTD=[$8], B4_LP=[$9], B4_CNT=[$10], B4_CNTD=[$11], B5_LP=[$12], B5_CNT=[$13], B5_CNTD=[$14], B6_LP=[$15], B6_CNT=[$16], B6_CNTD=[$17])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :  :  :- LogicalAggregate(group=[{}], B1_LP=[AVG($0)], B1_CNT=[COUNT($0)], B1_CNTD=[COUNT(DISTINCT $0)])
      :  :  :  :  :  +- LogicalProject(ss_list_price=[$12])
      :  :  :  :  :     +- LogicalFilter(condition=[AND(>=($10, 0), <=($10, 5), OR(AND(>=($12, 11), <=($12, +(11, 10))), AND(>=($19, 460), <=($19, +(460, 1000))), AND(>=($11, 14), <=($11, +(14, 20)))))])
      :  :  :  :  :        +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
      :  :  :  :  +- LogicalAggregate(group=[{}], B2_LP=[AVG($0)], B2_CNT=[COUNT($0)], B2_CNTD=[COUNT(DISTINCT $0)])
      :  :  :  :     +- LogicalProject(ss_list_price=[$12])
      :  :  :  :        +- LogicalFilter(condition=[AND(>=($10, 6), <=($10, 10), OR(AND(>=($12, 91), <=($12, +(91, 10))), AND(>=($19, 1430), <=($19, +(1430, 1000))), AND(>=($11, 32), <=($11, +(32, 20)))))])
      :  :  :  :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
      :  :  :  +- LogicalAggregate(group=[{}], B3_LP=[AVG($0)], B3_CNT=[COUNT($0)], B3_CNTD=[COUNT(DISTINCT $0)])
      :  :  :     +- LogicalProject(ss_list_price=[$12])
      :  :  :        +- LogicalFilter(condition=[AND(>=($10, 11), <=($10, 15), OR(AND(>=($12, 66), <=($12, +(66, 10))), AND(>=($19, 920), <=($19, +(920, 1000))), AND(>=($11, 4), <=($11, +(4, 20)))))])
      :  :  :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
      :  :  +- LogicalAggregate(group=[{}], B4_LP=[AVG($0)], B4_CNT=[COUNT($0)], B4_CNTD=[COUNT(DISTINCT $0)])
      :  :     +- LogicalProject(ss_list_price=[$12])
      :  :        +- LogicalFilter(condition=[AND(>=($10, 16), <=($10, 20), OR(AND(>=($12, 142), <=($12, +(142, 10))), AND(>=($19, 3054), <=($19, +(3054, 1000))), AND(>=($11, 80), <=($11, +(80, 20)))))])
      :  :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
      :  +- LogicalAggregate(group=[{}], B5_LP=[AVG($0)], B5_CNT=[COUNT($0)], B5_CNTD=[COUNT(DISTINCT $0)])
      :     +- LogicalProject(ss_list_price=[$12])
      :        +- LogicalFilter(condition=[AND(>=($10, 21), <=($10, 25), OR(AND(>=($12, 135), <=($12, +(135, 10))), AND(>=($19, 14180), <=($19, +(14180, 1000))), AND(>=($11, 38), <=($11, +(38, 20)))))])
      :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
      +- LogicalAggregate(group=[{}], B6_LP=[AVG($0)], B6_CNT=[COUNT($0)], B6_CNTD=[COUNT(DISTINCT $0)])
         +- LogicalProject(ss_list_price=[$12])
            +- LogicalFilter(condition=[AND(>=($10, 26), <=($10, 30), OR(AND(>=($12, 28), <=($12, +(28, 10))), AND(>=($19, 2513), <=($19, +(2513, 1000))), AND(>=($11, 42), <=($11, +(42, 20)))))])
               +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Limit(offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- Limit(offset=[0], fetch=[100], global=[false])
      +- Calc(select=[B1_LP, B1_CNT, B1_CNTD, B2_LP, B2_CNT, B2_CNTD, B3_LP, B3_CNT, B3_CNTD, B4_LP, B4_CNT, B4_CNTD, B5_LP, B5_CNT, B5_CNTD, B6_LP, B6_CNT, B6_CNTD])
         +- MultipleInput(readOrder=[0,0,0,0,0,1], members=[\nNestedLoopJoin(joinType=[InnerJoin], where=[true], select=[B1_LP, B1_CNT, B1_CNTD, B6_LP, B6_CNT, B6_CNTD, B5_LP, B5_CNT, B5_CNTD, B4_LP, B4_CNT, B4_CNTD, B3_LP, B3_CNT, B3_CNTD, B2_LP, B2_CNT, B2_CNTD], build=[right], singleRowJoin=[true])\n:- NestedLoopJoin(joinType=[InnerJoin], where=[true], select=[B1_LP, B1_CNT, B1_CNTD, B6_LP, B6_CNT, B6_CNTD, B5_LP, B5_CNT, B5_CNTD, B4_LP, B4_CNT, B4_CNTD, B3_LP, B3_CNT, B3_CNTD], build=[right], singleRowJoin=[true])\n:  :- NestedLoopJoin(joinType=[InnerJoin], where=[true], select=[B1_LP, B1_CNT, B1_CNTD, B6_LP, B6_CNT, B6_CNTD, B5_LP, B5_CNT, B5_CNTD, B4_LP, B4_CNT, B4_CNTD], build=[right], singleRowJoin=[true])\n:  :  :- NestedLoopJoin(joinType=[InnerJoin], where=[true], select=[B1_LP, B1_CNT, B1_CNTD, B6_LP, B6_CNT, B6_CNTD, B5_LP, B5_CNT, B5_CNTD], build=[right], singleRowJoin=[true])\n:  :  :  :- NestedLoopJoin(joinType=[InnerJoin], where=[true], select=[B1_LP, B1_CNT, B1_CNTD, B6_LP, B6_CNT, B6_CNTD], build=[left], singleRowJoin=[true])\n:  :  :  :  :- [#5] Exchange(distribution=[broadcast])\n:  :  :  :  +- [#6] Calc(select=[B6_LP, CASE(B6_CNT IS NOT NULL, B6_CNT, 0) AS B6_CNT, B6_CNTD])\n:  :  :  +- [#4] Exchange(distribution=[broadcast])\n:  :  +- [#3] Exchange(distribution=[broadcast])\n:  +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :- Exchange(distribution=[broadcast])
            :  +- Calc(select=[B2_LP, CASE(B2_CNT IS NOT NULL, B2_CNT, 0) AS B2_CNT, B2_CNTD])
            :     +- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS B2_LP, Final_MIN(min$1) AS B2_CNT, Final_COUNT(count$2) AS B2_CNTD])
            :        +- Exchange(distribution=[single])
            :           +- LocalHashAggregate(select=[Partial_MIN(B2_LP) FILTER $g_1 AS min$0, Partial_MIN(B2_CNT) FILTER $g_1 AS min$1, Partial_COUNT(ss_list_price) FILTER $g_0 AS count$2])
            :              +- Calc(select=[ss_list_price, B2_LP, B2_CNT, (CASE(($e = 0), 0, 1) = 0) AS $g_0, (CASE(($e = 0), 0, 1) = 1) AS $g_1])
            :                 +- HashAggregate(isMerge=[true], groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Final_AVG(sum$0, count$1) AS B2_LP, Final_COUNT(count$2) AS B2_CNT])
            :                    +- Exchange(distribution=[hash[ss_list_price, $e]])
            :                       +- LocalHashAggregate(groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Partial_AVG(ss_list_price_0) AS (sum$0, count$1), Partial_COUNT(ss_list_price_0) AS count$2])
            :                          +- Expand(projects=[{ss_list_price, 0 AS $e, ss_list_price AS ss_list_price_0}, {null AS ss_list_price, 1 AS $e, ss_list_price AS ss_list_price_0}])
            :                             +- Calc(select=[ss_list_price], where=[(SEARCH(ss_quantity, Sarg[[6..10]]) AND (SEARCH(ss_list_price, Sarg[[91..101]]) OR SEARCH(ss_coupon_amt, Sarg[[1430..2430]]) OR SEARCH(ss_wholesale_cost, Sarg[[32..52]])))])
            :                                +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt]]], fields=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
            :- Exchange(distribution=[broadcast])
            :  +- Calc(select=[B3_LP, CASE(B3_CNT IS NOT NULL, B3_CNT, 0) AS B3_CNT, B3_CNTD])
            :     +- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS B3_LP, Final_MIN(min$1) AS B3_CNT, Final_COUNT(count$2) AS B3_CNTD])
            :        +- Exchange(distribution=[single])
            :           +- LocalHashAggregate(select=[Partial_MIN(B3_LP) FILTER $g_1 AS min$0, Partial_MIN(B3_CNT) FILTER $g_1 AS min$1, Partial_COUNT(ss_list_price) FILTER $g_0 AS count$2])
            :              +- Calc(select=[ss_list_price, B3_LP, B3_CNT, (CASE(($e = 0), 0, 1) = 0) AS $g_0, (CASE(($e = 0), 0, 1) = 1) AS $g_1])
            :                 +- HashAggregate(isMerge=[true], groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Final_AVG(sum$0, count$1) AS B3_LP, Final_COUNT(count$2) AS B3_CNT])
            :                    +- Exchange(distribution=[hash[ss_list_price, $e]])
            :                       +- LocalHashAggregate(groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Partial_AVG(ss_list_price_0) AS (sum$0, count$1), Partial_COUNT(ss_list_price_0) AS count$2])
            :                          +- Expand(projects=[{ss_list_price, 0 AS $e, ss_list_price AS ss_list_price_0}, {null AS ss_list_price, 1 AS $e, ss_list_price AS ss_list_price_0}])
            :                             +- Calc(select=[ss_list_price], where=[(SEARCH(ss_quantity, Sarg[[11..15]]) AND (SEARCH(ss_list_price, Sarg[[66..76]]) OR SEARCH(ss_coupon_amt, Sarg[[920..1920]]) OR SEARCH(ss_wholesale_cost, Sarg[[4..24]])))])
            :                                +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt]]], fields=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
            :- Exchange(distribution=[broadcast])
            :  +- Calc(select=[B4_LP, CASE(B4_CNT IS NOT NULL, B4_CNT, 0) AS B4_CNT, B4_CNTD])
            :     +- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS B4_LP, Final_MIN(min$1) AS B4_CNT, Final_COUNT(count$2) AS B4_CNTD])
            :        +- Exchange(distribution=[single])
            :           +- LocalHashAggregate(select=[Partial_MIN(B4_LP) FILTER $g_1 AS min$0, Partial_MIN(B4_CNT) FILTER $g_1 AS min$1, Partial_COUNT(ss_list_price) FILTER $g_0 AS count$2])
            :              +- Calc(select=[ss_list_price, B4_LP, B4_CNT, (CASE(($e = 0), 0, 1) = 0) AS $g_0, (CASE(($e = 0), 0, 1) = 1) AS $g_1])
            :                 +- HashAggregate(isMerge=[true], groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Final_AVG(sum$0, count$1) AS B4_LP, Final_COUNT(count$2) AS B4_CNT])
            :                    +- Exchange(distribution=[hash[ss_list_price, $e]])
            :                       +- LocalHashAggregate(groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Partial_AVG(ss_list_price_0) AS (sum$0, count$1), Partial_COUNT(ss_list_price_0) AS count$2])
            :                          +- Expand(projects=[{ss_list_price, 0 AS $e, ss_list_price AS ss_list_price_0}, {null AS ss_list_price, 1 AS $e, ss_list_price AS ss_list_price_0}])
            :                             +- Calc(select=[ss_list_price], where=[(SEARCH(ss_quantity, Sarg[[16..20]]) AND (SEARCH(ss_list_price, Sarg[[142..152]]) OR SEARCH(ss_coupon_amt, Sarg[[3054..4054]]) OR SEARCH(ss_wholesale_cost, Sarg[[80..100]])))])
            :                                +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt]]], fields=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
            :- Exchange(distribution=[broadcast])
            :  +- Calc(select=[B5_LP, CASE(B5_CNT IS NOT NULL, B5_CNT, 0) AS B5_CNT, B5_CNTD])
            :     +- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS B5_LP, Final_MIN(min$1) AS B5_CNT, Final_COUNT(count$2) AS B5_CNTD])
            :        +- Exchange(distribution=[single])
            :           +- LocalHashAggregate(select=[Partial_MIN(B5_LP) FILTER $g_1 AS min$0, Partial_MIN(B5_CNT) FILTER $g_1 AS min$1, Partial_COUNT(ss_list_price) FILTER $g_0 AS count$2])
            :              +- Calc(select=[ss_list_price, B5_LP, B5_CNT, (CASE(($e = 0), 0, 1) = 0) AS $g_0, (CASE(($e = 0), 0, 1) = 1) AS $g_1])
            :                 +- HashAggregate(isMerge=[true], groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Final_AVG(sum$0, count$1) AS B5_LP, Final_COUNT(count$2) AS B5_CNT])
            :                    +- Exchange(distribution=[hash[ss_list_price, $e]])
            :                       +- LocalHashAggregate(groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Partial_AVG(ss_list_price_0) AS (sum$0, count$1), Partial_COUNT(ss_list_price_0) AS count$2])
            :                          +- Expand(projects=[{ss_list_price, 0 AS $e, ss_list_price AS ss_list_price_0}, {null AS ss_list_price, 1 AS $e, ss_list_price AS ss_list_price_0}])
            :                             +- Calc(select=[ss_list_price], where=[(SEARCH(ss_quantity, Sarg[[21..25]]) AND (SEARCH(ss_list_price, Sarg[[135..145]]) OR SEARCH(ss_coupon_amt, Sarg[[14180..15180]]) OR SEARCH(ss_wholesale_cost, Sarg[[38..58]])))])
            :                                +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt]]], fields=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
            :- Exchange(distribution=[broadcast])
            :  +- Calc(select=[B1_LP, CASE(B1_CNT IS NOT NULL, B1_CNT, 0) AS B1_CNT, B1_CNTD])
            :     +- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS B1_LP, Final_MIN(min$1) AS B1_CNT, Final_COUNT(count$2) AS B1_CNTD])
            :        +- Exchange(distribution=[single])
            :           +- LocalHashAggregate(select=[Partial_MIN(B1_LP) FILTER $g_1 AS min$0, Partial_MIN(B1_CNT) FILTER $g_1 AS min$1, Partial_COUNT(ss_list_price) FILTER $g_0 AS count$2])
            :              +- Calc(select=[ss_list_price, B1_LP, B1_CNT, (CASE(($e = 0), 0, 1) = 0) AS $g_0, (CASE(($e = 0), 0, 1) = 1) AS $g_1])
            :                 +- HashAggregate(isMerge=[true], groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Final_AVG(sum$0, count$1) AS B1_LP, Final_COUNT(count$2) AS B1_CNT])
            :                    +- Exchange(distribution=[hash[ss_list_price, $e]])
            :                       +- LocalHashAggregate(groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Partial_AVG(ss_list_price_0) AS (sum$0, count$1), Partial_COUNT(ss_list_price_0) AS count$2])
            :                          +- Expand(projects=[{ss_list_price, 0 AS $e, ss_list_price AS ss_list_price_0}, {null AS ss_list_price, 1 AS $e, ss_list_price AS ss_list_price_0}])
            :                             +- Calc(select=[ss_list_price], where=[(SEARCH(ss_quantity, Sarg[[0..5]]) AND (SEARCH(ss_list_price, Sarg[[11..21]]) OR SEARCH(ss_coupon_amt, Sarg[[460..1460]]) OR SEARCH(ss_wholesale_cost, Sarg[[14..34]])))])
            :                                +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt]]], fields=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
            +- Calc(select=[B6_LP, CASE(B6_CNT IS NOT NULL, B6_CNT, 0) AS B6_CNT, B6_CNTD])
               +- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS B6_LP, Final_MIN(min$1) AS B6_CNT, Final_COUNT(count$2) AS B6_CNTD])
                  +- Exchange(distribution=[single])
                     +- LocalHashAggregate(select=[Partial_MIN(B6_LP) FILTER $g_1 AS min$0, Partial_MIN(B6_CNT) FILTER $g_1 AS min$1, Partial_COUNT(ss_list_price) FILTER $g_0 AS count$2])
                        +- Calc(select=[ss_list_price, B6_LP, B6_CNT, (CASE(($e = 0), 0, 1) = 0) AS $g_0, (CASE(($e = 0), 0, 1) = 1) AS $g_1])
                           +- HashAggregate(isMerge=[true], groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Final_AVG(sum$0, count$1) AS B6_LP, Final_COUNT(count$2) AS B6_CNT])
                              +- Exchange(distribution=[hash[ss_list_price, $e]])
                                 +- LocalHashAggregate(groupBy=[ss_list_price, $e], select=[ss_list_price, $e, Partial_AVG(ss_list_price_0) AS (sum$0, count$1), Partial_COUNT(ss_list_price_0) AS count$2])
                                    +- Expand(projects=[{ss_list_price, 0 AS $e, ss_list_price AS ss_list_price_0}, {null AS ss_list_price, 1 AS $e, ss_list_price AS ss_list_price_0}])
                                       +- Calc(select=[ss_list_price], where=[(SEARCH(ss_quantity, Sarg[[26..30]]) AND (SEARCH(ss_list_price, Sarg[[28..38]]) OR SEARCH(ss_coupon_amt, Sarg[[2513..3513]]) OR SEARCH(ss_wholesale_cost, Sarg[[42..62]])))])
                                          +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt]]], fields=[ss_quantity, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q29]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query29.tpl and seed 2031708268
select   
     i_item_id
    ,i_item_desc
    ,s_store_id
    ,s_store_name
    ,sum(ss_quantity)        as store_sales_quantity
    ,sum(sr_return_quantity) as store_returns_quantity
    ,sum(cs_quantity)        as catalog_sales_quantity
 from
    store_sales
   ,store_returns
   ,catalog_sales
   ,date_dim             d1
   ,date_dim             d2
   ,date_dim             d3
   ,store
   ,item
 where
     d1.d_moy               = 4 
 and d1.d_year              = 1999
 and d1.d_date_sk           = ss_sold_date_sk
 and i_item_sk              = ss_item_sk
 and s_store_sk             = ss_store_sk
 and ss_customer_sk         = sr_customer_sk
 and ss_item_sk             = sr_item_sk
 and ss_ticket_number       = sr_ticket_number
 and sr_returned_date_sk    = d2.d_date_sk
 and d2.d_moy               between 4 and  4 + 3 
 and d2.d_year              = 1999
 and sr_customer_sk         = cs_bill_customer_sk
 and sr_item_sk             = cs_item_sk
 and cs_sold_date_sk        = d3.d_date_sk     
 and d3.d_year              in (1999,1999+1,1999+2)
 group by
    i_item_id
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 order by
    i_item_id 
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 limit 100

-- end query 1 in stream 0 using template query29.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2, 3}], store_sales_quantity=[SUM($4)], store_returns_quantity=[SUM($5)], catalog_sales_quantity=[SUM($6)])
   +- LogicalProject(i_item_id=[$191], i_item_desc=[$194], s_store_id=[$162], s_store_name=[$166], ss_quantity=[$10], sr_return_quantity=[$33], cs_quantity=[$61])
      +- LogicalFilter(condition=[AND(=($85, 4), =($83, 1999), =($77, $0), =($190, $2), =($161, $7), =($3, $26), =($2, $25), =($9, $32), =($23, $105), >=($113, 4), <=($113, +(4, 3)), =($111, 1999), =($26, $46), =($25, $58), =($43, $133), OR(=($139, 1999), =($139, +(1999, 1)), =($139, +(1999, 2))))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
            :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
            :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
            :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[i_item_id ASC, i_item_desc ASC, s_store_id ASC, s_store_name ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_item_id ASC, i_item_desc ASC, s_store_id ASC, s_store_name ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[false], groupBy=[i_item_id, i_item_desc, s_store_id, s_store_name], select=[i_item_id, i_item_desc, s_store_id, s_store_name, SUM(ss_quantity) AS store_sales_quantity, SUM(sr_return_quantity) AS store_returns_quantity, SUM(cs_quantity) AS catalog_sales_quantity])
         +- Exchange(distribution=[hash[i_item_id, i_item_desc, s_store_id, s_store_name]])
            +- Calc(select=[i_item_id, i_item_desc, s_store_id, s_store_name, ss_quantity, sr_return_quantity, cs_quantity])
               +- MultipleInput(readOrder=[0,0,0,2,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(s_store_sk = ss_store_sk)], select=[cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc, s_store_sk, s_store_id, s_store_name], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc])\n:  +- HashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[cs_sold_date_sk, cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity, i_item_id, i_item_desc])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(cs_item_sk = i_item_sk)], select=[cs_sold_date_sk, cs_item_sk, cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity, i_item_sk, i_item_id, i_item_desc], build=[right])\n:     :     :- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_quantity, ss_store_sk, ss_quantity, sr_return_quantity])\n:     :     :  +- HashJoin(joinType=[InnerJoin], where=[((sr_customer_sk = cs_bill_customer_sk) AND (cs_item_sk = ss_item_sk))], select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, ss_item_sk, ss_store_sk, ss_quantity, sr_customer_sk, sr_return_quantity], build=[right])\n:     :     :     :- [#4] Exchange(distribution=[hash[cs_item_sk]])\n:     :     :     +- Calc(select=[ss_item_sk, ss_store_sk, ss_quantity, sr_customer_sk, sr_return_quantity])\n:     :     :        +- HashJoin(joinType=[InnerJoin], where=[(d_date_sk = ss_sold_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, sr_customer_sk, sr_return_quantity, d_date_sk], isBroadcast=[true], build=[right])\n:     :     :           :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, sr_customer_sk, sr_return_quantity])\n:     :     :           :  +- HashJoin(joinType=[InnerJoin], where=[((ss_customer_sk = sr_customer_sk) AND (ss_item_sk = sr_item_sk) AND (ss_ticket_number = sr_ticket_number))], select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_quantity, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity], build=[right])\n:     :     :           :     :- [#6] Exchange(distribution=[hash[ss_item_sk]])\n:     :     :           :     +- [#7] Exchange(distribution=[hash[sr_item_sk]])\n:     :     :           +- [#5] Exchange(distribution=[broadcast])\n:     :     +- [#3] Exchange(distribution=[hash[i_item_sk]])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :- Exchange(distribution=[broadcast])
                  :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_store_id, s_store_name]]], fields=[s_store_sk, s_store_id, s_store_name])
                  :- Exchange(distribution=[broadcast])
                  :  +- Calc(select=[d_date_sk], where=[SEARCH(d_year, Sarg[1999, 2000, 2001])])
                  :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
                  :- Exchange(distribution=[hash[i_item_sk]])
                  :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id, i_item_desc]]], fields=[i_item_sk, i_item_id, i_item_desc])
                  :- Exchange(distribution=[hash[cs_item_sk]])
                  :  +- Calc(select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity], where=[cs_bill_customer_sk IS NOT NULL])
                  :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity])
                  :- Exchange(distribution=[broadcast])
                  :  +- Calc(select=[d_date_sk], where=[(SEARCH(d_moy, Sarg[4]) AND SEARCH(d_year, Sarg[1999]))])
                  :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                  :- Exchange(distribution=[hash[ss_item_sk]])
                  :  +- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_quantity], where=[ss_customer_sk IS NOT NULL])
                  :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_quantity]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, ss_quantity])
                  +- Exchange(distribution=[hash[sr_item_sk]])
                     +- Calc(select=[sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity])
                        +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(sr_returned_date_sk = d_date_sk)], select=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity], where=[sr_customer_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity]]], fields=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity])\n+- [#1] Exchange(distribution=[broadcast])\n])
                           :- Exchange(distribution=[broadcast])
                           :  +- Calc(select=[d_date_sk], where=[(SEARCH(d_moy, Sarg[[4..7]]) AND SEARCH(d_year, Sarg[1999]))])
                           :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity]]], fields=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, sr_return_quantity])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q2]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query2.tpl and seed 1819994127
with wscs as
 (select sold_date_sk
        ,sales_price
  from (select ws_sold_date_sk sold_date_sk
              ,ws_ext_sales_price sales_price
        from web_sales) x
        union all
       (select cs_sold_date_sk sold_date_sk
              ,cs_ext_sales_price sales_price
        from catalog_sales)),
 wswscs as 
 (select d_week_seq,
        sum(case when (d_day_name='Sunday') then sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then sales_price else null end) sat_sales
 from wscs
     ,date_dim
 where d_date_sk = sold_date_sk
 group by d_week_seq)
 select d_week_seq1
       ,round(sun_sales1/sun_sales2,2)
       ,round(mon_sales1/mon_sales2,2)
       ,round(tue_sales1/tue_sales2,2)
       ,round(wed_sales1/wed_sales2,2)
       ,round(thu_sales1/thu_sales2,2)
       ,round(fri_sales1/fri_sales2,2)
       ,round(sat_sales1/sat_sales2,2)
 from
 (select wswscs.d_week_seq d_week_seq1
        ,sun_sales sun_sales1
        ,mon_sales mon_sales1
        ,tue_sales tue_sales1
        ,wed_sales wed_sales1
        ,thu_sales thu_sales1
        ,fri_sales fri_sales1
        ,sat_sales sat_sales1
  from wswscs,date_dim 
  where date_dim.d_week_seq = wswscs.d_week_seq and
        d_year = 2001) y,
 (select wswscs.d_week_seq d_week_seq2
        ,sun_sales sun_sales2
        ,mon_sales mon_sales2
        ,tue_sales tue_sales2
        ,wed_sales wed_sales2
        ,thu_sales thu_sales2
        ,fri_sales fri_sales2
        ,sat_sales sat_sales2
  from wswscs
      ,date_dim 
  where date_dim.d_week_seq = wswscs.d_week_seq and
        d_year = 2001+1) z
 where d_week_seq1=d_week_seq2-53
 order by d_week_seq1

-- end query 1 in stream 0 using template query2.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first])
+- LogicalProject(d_week_seq1=[$0], EXPR$1=[ROUND(/($1, $9), 2)], EXPR$2=[ROUND(/($2, $10), 2)], EXPR$3=[ROUND(/($3, $11), 2)], EXPR$4=[ROUND(/($4, $12), 2)], EXPR$5=[ROUND(/($5, $13), 2)], EXPR$6=[ROUND(/($6, $14), 2)], EXPR$7=[ROUND(/($7, $15), 2)])
   +- LogicalFilter(condition=[=($0, -($8, 53))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(d_week_seq1=[$0], sun_sales1=[$1], mon_sales1=[$2], tue_sales1=[$3], wed_sales1=[$4], thu_sales1=[$5], fri_sales1=[$6], sat_sales1=[$7])
         :  +- LogicalFilter(condition=[AND(=($12, $0), =($14, 2001))])
         :     +- LogicalJoin(condition=[true], joinType=[inner])
         :        :- LogicalAggregate(group=[{0}], sun_sales=[SUM($1)], mon_sales=[SUM($2)], tue_sales=[SUM($3)], wed_sales=[SUM($4)], thu_sales=[SUM($5)], fri_sales=[SUM($6)], sat_sales=[SUM($7)])
         :        :  +- LogicalProject(d_week_seq=[$6], $f1=[CASE(=($16, _UTF-16LE'Sunday'), $1, null:DOUBLE)], $f2=[CASE(=($16, _UTF-16LE'Monday'), $1, null:DOUBLE)], $f3=[CASE(=($16, _UTF-16LE'Tuesday'), $1, null:DOUBLE)], $f4=[CASE(=($16, _UTF-16LE'Wednesday'), $1, null:DOUBLE)], $f5=[CASE(=($16, _UTF-16LE'Thursday'), $1, null:DOUBLE)], $f6=[CASE(=($16, _UTF-16LE'Friday'), $1, null:DOUBLE)], $f7=[CASE(=($16, _UTF-16LE'Saturday'), $1, null:DOUBLE)])
         :        :     +- LogicalFilter(condition=[=($2, $0)])
         :        :        +- LogicalJoin(condition=[true], joinType=[inner])
         :        :           :- LogicalUnion(all=[true])
         :        :           :  :- LogicalProject(sold_date_sk=[$0], sales_price=[$23])
         :        :           :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
         :        :           :  +- LogicalProject(sold_date_sk=[$0], sales_price=[$23])
         :        :           :     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
         :        :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :        +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         +- LogicalProject(d_week_seq2=[$0], sun_sales2=[$1], mon_sales2=[$2], tue_sales2=[$3], wed_sales2=[$4], thu_sales2=[$5], fri_sales2=[$6], sat_sales2=[$7])
            +- LogicalFilter(condition=[AND(=($12, $0), =($14, +(2001, 1)))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalAggregate(group=[{0}], sun_sales=[SUM($1)], mon_sales=[SUM($2)], tue_sales=[SUM($3)], wed_sales=[SUM($4)], thu_sales=[SUM($5)], fri_sales=[SUM($6)], sat_sales=[SUM($7)])
                  :  +- LogicalProject(d_week_seq=[$6], $f1=[CASE(=($16, _UTF-16LE'Sunday'), $1, null:DOUBLE)], $f2=[CASE(=($16, _UTF-16LE'Monday'), $1, null:DOUBLE)], $f3=[CASE(=($16, _UTF-16LE'Tuesday'), $1, null:DOUBLE)], $f4=[CASE(=($16, _UTF-16LE'Wednesday'), $1, null:DOUBLE)], $f5=[CASE(=($16, _UTF-16LE'Thursday'), $1, null:DOUBLE)], $f6=[CASE(=($16, _UTF-16LE'Friday'), $1, null:DOUBLE)], $f7=[CASE(=($16, _UTF-16LE'Saturday'), $1, null:DOUBLE)])
                  :     +- LogicalFilter(condition=[=($2, $0)])
                  :        +- LogicalJoin(condition=[true], joinType=[inner])
                  :           :- LogicalUnion(all=[true])
                  :           :  :- LogicalProject(sold_date_sk=[$0], sales_price=[$23])
                  :           :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                  :           :  +- LogicalProject(sold_date_sk=[$0], sales_price=[$23])
                  :           :     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
                  :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Sort(orderBy=[d_week_seq1 ASC])
+- Exchange(distribution=[single])
   +- Calc(select=[d_week_seq1, ROUND((sun_sales1 / sun_sales2), 2) AS EXPR$1, ROUND((mon_sales1 / mon_sales2), 2) AS EXPR$2, ROUND((tue_sales1 / tue_sales2), 2) AS EXPR$3, ROUND((wed_sales1 / wed_sales2), 2) AS EXPR$4, ROUND((thu_sales1 / thu_sales2), 2) AS EXPR$5, ROUND((fri_sales1 / fri_sales2), 2) AS EXPR$6, ROUND((sat_sales1 / sat_sales2), 2) AS EXPR$7])
      +- HashJoin(joinType=[InnerJoin], where=[(d_week_seq1 = $f8)], select=[sun_sales2, mon_sales2, tue_sales2, wed_sales2, thu_sales2, fri_sales2, sat_sales2, $f8, d_week_seq1, sun_sales1, mon_sales1, tue_sales1, wed_sales1, thu_sales1, fri_sales1, sat_sales1], build=[right])
         :- Exchange(distribution=[hash[$f8]], shuffle_mode=[BATCH])
         :  +- Calc(select=[sun_sales AS sun_sales2, mon_sales AS mon_sales2, tue_sales AS tue_sales2, wed_sales AS wed_sales2, thu_sales AS thu_sales2, fri_sales AS fri_sales2, sat_sales AS sat_sales2, (d_week_seq - 53) AS $f8])
         :     +- HashJoin(joinType=[InnerJoin], where=[(d_week_seq = d_week_seq0)], select=[d_week_seq, d_week_seq0, sun_sales, mon_sales, tue_sales, wed_sales, thu_sales, fri_sales, sat_sales], isBroadcast=[true], build=[left])
         :        :- Exchange(distribution=[broadcast])
         :        :  +- Calc(select=[d_week_seq], where=[(d_year = 2002)])
         :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_week_seq, d_year]]], fields=[d_week_seq, d_year])
         :        +- HashAggregate(isMerge=[true], groupBy=[d_week_seq], select=[d_week_seq, Final_SUM(sum$0) AS sun_sales, Final_SUM(sum$1) AS mon_sales, Final_SUM(sum$2) AS tue_sales, Final_SUM(sum$3) AS wed_sales, Final_SUM(sum$4) AS thu_sales, Final_SUM(sum$5) AS fri_sales, Final_SUM(sum$6) AS sat_sales])(reuse_id=[1])
         :           +- Exchange(distribution=[hash[d_week_seq]])
         :              +- LocalHashAggregate(groupBy=[d_week_seq], select=[d_week_seq, Partial_SUM($f1) AS sum$0, Partial_SUM($f2) AS sum$1, Partial_SUM($f3) AS sum$2, Partial_SUM($f4) AS sum$3, Partial_SUM($f5) AS sum$4, Partial_SUM($f6) AS sum$5, Partial_SUM($f7) AS sum$6])
         :                 +- Calc(select=[d_week_seq, CASE((d_day_name = 'Sunday'), ws_ext_sales_price, null:DOUBLE) AS $f1, CASE((d_day_name = 'Monday'), ws_ext_sales_price, null:DOUBLE) AS $f2, CASE((d_day_name = 'Tuesday'), ws_ext_sales_price, null:DOUBLE) AS $f3, CASE((d_day_name = 'Wednesday'), ws_ext_sales_price, null:DOUBLE) AS $f4, CASE((d_day_name = 'Thursday'), ws_ext_sales_price, null:DOUBLE) AS $f5, CASE((d_day_name = 'Friday'), ws_ext_sales_price, null:DOUBLE) AS $f6, CASE((d_day_name = 'Saturday'), ws_ext_sales_price, null:DOUBLE) AS $f7])
         :                    +- MultipleInput(readOrder=[0,1,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(d_date_sk = ws_sold_date_sk)], select=[ws_sold_date_sk, ws_ext_sales_price, d_date_sk, d_week_seq, d_day_name], isBroadcast=[true], build=[right])\n:- Union(all=[true], union=[ws_sold_date_sk, ws_ext_sales_price])\n:  :- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_ext_sales_price])\n:  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_ext_sales_price]]], fields=[cs_sold_date_sk, cs_ext_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
         :                       :- Exchange(distribution=[broadcast])
         :                       :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_week_seq, d_day_name]]], fields=[d_date_sk, d_week_seq, d_day_name])
         :                       :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_ext_sales_price])
         :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_ext_sales_price]]], fields=[cs_sold_date_sk, cs_ext_sales_price])
         +- Exchange(distribution=[hash[d_week_seq1]])
            +- Calc(select=[d_week_seq AS d_week_seq1, sun_sales AS sun_sales1, mon_sales AS mon_sales1, tue_sales AS tue_sales1, wed_sales AS wed_sales1, thu_sales AS thu_sales1, fri_sales AS fri_sales1, sat_sales AS sat_sales1])
               +- HashJoin(joinType=[InnerJoin], where=[(d_week_seq = d_week_seq0)], select=[d_week_seq, d_week_seq0, sun_sales, mon_sales, tue_sales, wed_sales, thu_sales, fri_sales, sat_sales], isBroadcast=[true], build=[left])
                  :- Exchange(distribution=[broadcast])
                  :  +- Calc(select=[d_week_seq], where=[(d_year = 2001)])
                  :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_week_seq, d_year]]], fields=[d_week_seq, d_year])
                  +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q30]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query30.tpl and seed 1819994127
with customer_total_return as
 (select wr_returning_customer_sk as ctr_customer_sk
        ,ca_state as ctr_state, 
 	sum(wr_return_amt) as ctr_total_return
 from web_returns
     ,date_dim
     ,customer_address
 where wr_returned_date_sk = d_date_sk 
   and d_year =2002
   and wr_returning_addr_sk = ca_address_sk 
 group by wr_returning_customer_sk
         ,ca_state)
  select  c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
       ,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
       ,c_last_review_date,ctr_total_return
 from customer_total_return ctr1
     ,customer_address
     ,customer
 where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
 			  from customer_total_return ctr2 
                  	  where ctr1.ctr_state = ctr2.ctr_state)
       and ca_address_sk = c_current_addr_sk
       and ca_state = 'IL'
       and ctr1.ctr_customer_sk = c_customer_sk
 order by c_customer_id,c_salutation,c_first_name,c_last_name,c_preferred_cust_flag
                  ,c_birth_day,c_birth_month,c_birth_year,c_birth_country,c_login,c_email_address
                  ,c_last_review_date,ctr_total_return
limit 100

-- end query 1 in stream 0 using template query30.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], sort5=[$5], sort6=[$6], sort7=[$7], sort8=[$8], sort9=[$9], sort10=[$10], sort11=[$11], sort12=[$12], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first], dir8=[ASC-nulls-first], dir9=[ASC-nulls-first], dir10=[ASC-nulls-first], dir11=[ASC-nulls-first], dir12=[ASC-nulls-first], fetch=[100])
+- LogicalProject(c_customer_id=[$17], c_salutation=[$23], c_first_name=[$24], c_last_name=[$25], c_preferred_cust_flag=[$26], c_birth_day=[$27], c_birth_month=[$28], c_birth_year=[$29], c_birth_country=[$30], c_login=[$31], c_email_address=[$32], c_last_review_date=[$33], ctr_total_return=[$2])
   +- LogicalFilter(condition=[AND(>($2, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*($0, 1.2:DECIMAL(2, 1))])
  LogicalAggregate(group=[{}], agg#0=[AVG($0)])
    LogicalProject(ctr_total_return=[$2])
      LogicalFilter(condition=[=($cor0.ctr_state, $1)])
        LogicalAggregate(group=[{0, 1}], ctr_total_return=[SUM($2)])
          LogicalProject(ctr_customer_sk=[$7], ctr_state=[$60], wr_return_amt=[$15])
            LogicalFilter(condition=[AND(=($0, $24), =($30, 2002), =($10, $52))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_returns]])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
})), =($3, $20), =($11, _UTF-16LE'IL'), =($0, $16))], variablesSet=[[$cor0]])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalAggregate(group=[{0, 1}], ctr_total_return=[SUM($2)])
         :  :  +- LogicalProject(ctr_customer_sk=[$7], ctr_state=[$60], wr_return_amt=[$15])
         :  :     +- LogicalFilter(condition=[AND(=($0, $24), =($30, 2002), =($10, $52))])
         :  :        +- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_returns]])
         :  :           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
         :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
         +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[c_customer_id, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date, ctr_total_return])
+- SortLimit(orderBy=[c_customer_id ASC, c_salutation ASC, c_first_name ASC, c_last_name ASC, c_preferred_cust_flag ASC, c_birth_day ASC, c_birth_month ASC, c_birth_year ASC, c_birth_country ASC, c_login ASC, c_email_address ASC, c_last_review_date ASC, ctr_total_return ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[c_customer_id ASC, c_salutation ASC, c_first_name ASC, c_last_name ASC, c_preferred_cust_flag ASC, c_birth_day ASC, c_birth_month ASC, c_birth_year ASC, c_birth_country ASC, c_login ASC, c_email_address ASC, c_last_review_date ASC, ctr_total_return ASC], offset=[0], fetch=[100], global=[false])
         +- HashJoin(joinType=[InnerJoin], where=[((ctr_state = ctr_state0) AND (ctr_total_return > ($f1 * 1.2)))], select=[ctr_state, ctr_total_return, c_customer_id, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date, ctr_state0, $f1], isBroadcast=[true], build=[right])
            :- Exchange(distribution=[any])
            :  +- Calc(select=[ctr_state, ctr_total_return, c_customer_id, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date])
            :     +- HashJoin(joinType=[InnerJoin], where=[(ctr_customer_sk = c_customer_sk)], select=[ctr_customer_sk, ctr_state, ctr_total_return, c_customer_sk, c_customer_id, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date], build=[right])
            :        :- Exchange(distribution=[hash[ctr_customer_sk]])
            :        :  +- HashAggregate(isMerge=[false], groupBy=[ctr_customer_sk, ctr_state], select=[ctr_customer_sk, ctr_state, SUM(wr_return_amt) AS ctr_total_return])
            :        :     +- Exchange(distribution=[hash[ctr_customer_sk, ctr_state]])
            :        :        +- Calc(select=[wr_returning_customer_sk AS ctr_customer_sk, ca_state AS ctr_state, wr_return_amt])
            :        :           +- HashJoin(joinType=[InnerJoin], where=[(wr_returning_addr_sk = ca_address_sk)], select=[wr_returning_customer_sk, wr_returning_addr_sk, wr_return_amt, ca_address_sk, ca_state], build=[right])
            :        :              :- Exchange(distribution=[hash[wr_returning_addr_sk]])(reuse_id=[1])
            :        :              :  +- Calc(select=[wr_returning_customer_sk, wr_returning_addr_sk, wr_return_amt])
            :        :              :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(wr_returned_date_sk = d_date_sk)], select=[wr_returned_date_sk, wr_returning_customer_sk, wr_returning_addr_sk, wr_return_amt, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[wr_returned_date_sk, wr_returning_customer_sk, wr_returning_addr_sk, wr_return_amt], where=[wr_returned_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_returns, project=[wr_returned_date_sk, wr_returning_customer_sk, wr_returning_addr_sk, wr_return_amt]]], fields=[wr_returned_date_sk, wr_returning_customer_sk, wr_returning_addr_sk, wr_return_amt])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :        :              :        :- Exchange(distribution=[broadcast])
            :        :              :        :  +- Calc(select=[d_date_sk], where=[(d_year = 2002)])
            :        :              :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
            :        :              :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_returns, project=[wr_returned_date_sk, wr_returning_customer_sk, wr_returning_addr_sk, wr_return_amt]]], fields=[wr_returned_date_sk, wr_returning_customer_sk, wr_returning_addr_sk, wr_return_amt])
            :        :              +- Exchange(distribution=[hash[ca_address_sk]])
            :        :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state]]], fields=[ca_address_sk, ca_state])
            :        +- Exchange(distribution=[hash[c_customer_sk]])
            :           +- Calc(select=[c_customer_sk, c_customer_id, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date])
            :              +- HashJoin(joinType=[InnerJoin], where=[(ca_address_sk = c_current_addr_sk)], select=[c_customer_sk, c_customer_id, c_current_addr_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date, ca_address_sk], build=[right])
            :                 :- Exchange(distribution=[hash[c_current_addr_sk]])
            :                 :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_customer_id, c_current_addr_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date]]], fields=[c_customer_sk, c_customer_id, c_current_addr_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_day, c_birth_month, c_birth_year, c_birth_country, c_login, c_email_address, c_last_review_date])
            :                 +- Exchange(distribution=[hash[ca_address_sk]])
            :                    +- Calc(select=[ca_address_sk], where=[(ca_state = 'IL')])
            :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state]]], fields=[ca_address_sk, ca_state])
            +- Exchange(distribution=[broadcast])
               +- HashAggregate(isMerge=[true], groupBy=[ctr_state], select=[ctr_state, Final_AVG(sum$0, count$1) AS $f1])
                  +- Exchange(distribution=[hash[ctr_state]])
                     +- LocalHashAggregate(groupBy=[ctr_state], select=[ctr_state, Partial_AVG(ctr_total_return) AS (sum$0, count$1)])
                        +- Calc(select=[ctr_state, ctr_total_return])
                           +- HashAggregate(isMerge=[false], groupBy=[ctr_customer_sk, ctr_state], select=[ctr_customer_sk, ctr_state, SUM(wr_return_amt) AS ctr_total_return])
                              +- Exchange(distribution=[hash[ctr_customer_sk, ctr_state]])
                                 +- Calc(select=[wr_returning_customer_sk AS ctr_customer_sk, ca_state AS ctr_state, wr_return_amt])
                                    +- HashJoin(joinType=[InnerJoin], where=[(wr_returning_addr_sk = ca_address_sk)], select=[wr_returning_customer_sk, wr_returning_addr_sk, wr_return_amt, ca_address_sk, ca_state], build=[right])
                                       :- Reused(reference_id=[1])
                                       +- Exchange(distribution=[hash[ca_address_sk]])
                                          +- Calc(select=[ca_address_sk, ca_state], where=[ca_state IS NOT NULL])
                                             +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state]]], fields=[ca_address_sk, ca_state])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q31]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query31.tpl and seed 1819994127
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year

-- end query 1 in stream 0 using template query31.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$1], dir0=[ASC-nulls-first])
+- LogicalProject(ca_county=[$0], d_year=[$2], web_q1_q2_increase=[/($19, $15)], store_q1_q2_increase=[/($7, $3)], web_q2_q3_increase=[/($23, $19)], store_q2_q3_increase=[/($11, $7)])
   +- LogicalFilter(condition=[AND(=($1, 1), =($2, 2000), =($0, $4), =($5, 2), =($6, 2000), =($4, $8), =($9, 3), =($10, 2000), =($0, $12), =($13, 1), =($14, 2000), =($12, $16), =($17, 2), =($18, 2000), =($12, $20), =($21, 3), =($22, 2000), >(CASE(>($15, 0), /($19, $15), null:DOUBLE), CASE(>($3, 0), /($7, $3), null:DOUBLE)), >(CASE(>($19, 0), /($23, $19), null:DOUBLE), CASE(>($7, 0), /($11, $7), null:DOUBLE)))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :- LogicalAggregate(group=[{0, 1, 2}], store_sales=[SUM($3)])
         :  :  :  :  :  +- LogicalProject(ca_county=[$58], d_qoy=[$33], d_year=[$29], ss_ext_sales_price=[$15])
         :  :  :  :  :     +- LogicalFilter(condition=[AND(=($0, $23), =($6, $51))])
         :  :  :  :  :        +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :           :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :           :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :  :  :  :  :           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :  :  :  :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
         :  :  :  :  +- LogicalAggregate(group=[{0, 1, 2}], store_sales=[SUM($3)])
         :  :  :  :     +- LogicalProject(ca_county=[$58], d_qoy=[$33], d_year=[$29], ss_ext_sales_price=[$15])
         :  :  :  :        +- LogicalFilter(condition=[AND(=($0, $23), =($6, $51))])
         :  :  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :              :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :  :  :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :  :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
         :  :  :  +- LogicalAggregate(group=[{0, 1, 2}], store_sales=[SUM($3)])
         :  :  :     +- LogicalProject(ca_county=[$58], d_qoy=[$33], d_year=[$29], ss_ext_sales_price=[$15])
         :  :  :        +- LogicalFilter(condition=[AND(=($0, $23), =($6, $51))])
         :  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :              :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :  :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
         :  :  +- LogicalAggregate(group=[{0, 1, 2}], web_sales=[SUM($3)])
         :  :     +- LogicalProject(ca_county=[$69], d_qoy=[$44], d_year=[$40], ws_ext_sales_price=[$23])
         :  :        +- LogicalFilter(condition=[AND(=($0, $34), =($7, $62))])
         :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
         :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
         :  +- LogicalAggregate(group=[{0, 1, 2}], web_sales=[SUM($3)])
         :     +- LogicalProject(ca_county=[$69], d_qoy=[$44], d_year=[$40], ws_ext_sales_price=[$23])
         :        +- LogicalFilter(condition=[AND(=($0, $34), =($7, $62))])
         :           +- LogicalJoin(condition=[true], joinType=[inner])
         :              :- LogicalJoin(condition=[true], joinType=[inner])
         :              :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
         :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
         +- LogicalAggregate(group=[{0, 1, 2}], web_sales=[SUM($3)])
            +- LogicalProject(ca_county=[$69], d_qoy=[$44], d_year=[$40], ws_ext_sales_price=[$23])
               +- LogicalFilter(condition=[AND(=($0, $34), =($7, $62))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                     :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Sort(orderBy=[d_year ASC])
+- Exchange(distribution=[single])
   +- Calc(select=[ca_county00 AS ca_county, CAST(2000 AS INTEGER) AS d_year, (web_sales00 / web_sales0) AS web_q1_q2_increase, (store_sales00 / store_sales0) AS store_q1_q2_increase, (web_sales / web_sales00) AS web_q2_q3_increase, (store_sales / store_sales00) AS store_q2_q3_increase])
      +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(CASE((store_sales00 > 0), CASE((web_sales00 > 0), ((web_sales / web_sales00) > (store_sales / store_sales00)), false), false) AND (ca_county = ca_county00))], select=[ca_county, web_sales, store_sales, web_sales0, ca_county00, store_sales0, store_sales00, web_sales00], isBroadcast=[true], build=[right])\n:- Calc(select=[ca_county, web_sales])\n:  +- HashAggregate(isMerge=[true], groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Final_SUM(sum$0) AS web_sales])\n:     +- [#2] Exchange(distribution=[hash[ca_county, d_qoy, d_year]])\n+- [#1] Exchange(distribution=[broadcast])\n])
         :- Exchange(distribution=[broadcast])
         :  +- Calc(select=[store_sales, web_sales, ca_county0 AS ca_county00, store_sales0, store_sales00, web_sales0])
         :     +- HashJoin(joinType=[InnerJoin], where=[(ca_county = ca_county1)], select=[ca_county, store_sales, web_sales, ca_county0, store_sales0, ca_county1, store_sales00, web_sales0], isBroadcast=[true], build=[right])
         :        :- Exchange(distribution=[any])
         :        :  +- Calc(select=[ca_county, store_sales])
         :        :     +- HashAggregate(isMerge=[true], groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Final_SUM(sum$0) AS store_sales])
         :        :        +- Exchange(distribution=[hash[ca_county, d_qoy, d_year]])
         :        :           +- LocalHashAggregate(groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Partial_SUM(ss_ext_sales_price) AS sum$0])
         :        :              +- Calc(select=[ca_county, CAST(3 AS INTEGER) AS d_qoy, CAST(2000 AS INTEGER) AS d_year, ss_ext_sales_price])
         :        :                 +- HashJoin(joinType=[InnerJoin], where=[(ss_addr_sk = ca_address_sk)], select=[ss_addr_sk, ss_ext_sales_price, ca_address_sk, ca_county], build=[right])
         :        :                    :- Exchange(distribution=[hash[ss_addr_sk]])
         :        :                    :  +- Calc(select=[ss_addr_sk, ss_ext_sales_price])
         :        :                    :     +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_addr_sk, ss_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])
         :        :                    :        :- Calc(select=[ss_sold_date_sk, ss_addr_sk, ss_ext_sales_price], where=[ss_sold_date_sk IS NOT NULL])(reuse_id=[1])
         :        :                    :        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_addr_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_addr_sk, ss_ext_sales_price])
         :        :                    :        +- Exchange(distribution=[broadcast])(reuse_id=[4])
         :        :                    :           +- Calc(select=[d_date_sk], where=[((d_qoy = 3) AND (d_year = 2000))])
         :        :                    :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_qoy]]], fields=[d_date_sk, d_year, d_qoy])
         :        :                    +- Exchange(distribution=[hash[ca_address_sk]])
         :        :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_county]]], fields=[ca_address_sk, ca_county])
         :        +- Exchange(distribution=[broadcast])
         :           +- Calc(select=[web_sales, ca_county0, store_sales, ca_county1, store_sales0, web_sales0])
         :              +- MultipleInput(readOrder=[0,0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(CASE((store_sales > 0), CASE((web_sales > 0), ((web_sales0 / web_sales) > (store_sales0 / store_sales)), false), false) AND (ca_county = ca_county2))], select=[ca_county, web_sales, ca_county0, store_sales, ca_county1, store_sales0, ca_county2, web_sales0], isBroadcast=[true], build=[right])\n:- HashJoin(joinType=[InnerJoin], where=[(ca_county = ca_county1)], select=[ca_county, web_sales, ca_county0, store_sales, ca_county1, store_sales0], isBroadcast=[true], build=[right])\n:  :- HashJoin(joinType=[InnerJoin], where=[(ca_county0 = ca_county)], select=[ca_county, web_sales, ca_county0, store_sales], isBroadcast=[true], build=[right])\n:  :  :- Calc(select=[ca_county, web_sales])\n:  :  :  +- HashAggregate(isMerge=[true], groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Final_SUM(sum$0) AS web_sales])\n:  :  :     +- [#4] Exchange(distribution=[hash[ca_county, d_qoy, d_year]])\n:  :  +- [#3] Exchange(distribution=[broadcast])\n:  +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
         :                 :- Exchange(distribution=[broadcast])
         :                 :  +- Calc(select=[ca_county, web_sales])
         :                 :     +- HashAggregate(isMerge=[true], groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Final_SUM(sum$0) AS web_sales])
         :                 :        +- Exchange(distribution=[hash[ca_county, d_qoy, d_year]])
         :                 :           +- LocalHashAggregate(groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Partial_SUM(ws_ext_sales_price) AS sum$0])
         :                 :              +- Calc(select=[ca_county, CAST(2 AS INTEGER) AS d_qoy, CAST(2000 AS INTEGER) AS d_year, ws_ext_sales_price])
         :                 :                 +- HashJoin(joinType=[InnerJoin], where=[(ws_bill_addr_sk = ca_address_sk)], select=[ws_bill_addr_sk, ws_ext_sales_price, ca_address_sk, ca_county], build=[right])
         :                 :                    :- Exchange(distribution=[hash[ws_bill_addr_sk]])
         :                 :                    :  +- Calc(select=[ws_bill_addr_sk, ws_ext_sales_price])
         :                 :                    :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_bill_addr_sk, ws_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_addr_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_bill_addr_sk, ws_ext_sales_price])\n+- [#2] Exchange(distribution=[broadcast])\n])
         :                 :                    :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_addr_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_bill_addr_sk, ws_ext_sales_price])
         :                 :                    :        +- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                 :                    :           +- Calc(select=[d_date_sk], where=[((d_qoy = 2) AND (d_year = 2000))])
         :                 :                    :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_qoy]]], fields=[d_date_sk, d_year, d_qoy])
         :                 :                    +- Exchange(distribution=[hash[ca_address_sk]])
         :                 :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_county]]], fields=[ca_address_sk, ca_county])
         :                 :- Exchange(distribution=[broadcast])
         :                 :  +- Calc(select=[ca_county, store_sales])
         :                 :     +- HashAggregate(isMerge=[true], groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Final_SUM(sum$0) AS store_sales])
         :                 :        +- Exchange(distribution=[hash[ca_county, d_qoy, d_year]])
         :                 :           +- LocalHashAggregate(groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Partial_SUM(ss_ext_sales_price) AS sum$0])
         :                 :              +- Calc(select=[ca_county, CAST(2 AS INTEGER) AS d_qoy, CAST(2000 AS INTEGER) AS d_year, ss_ext_sales_price])
         :                 :                 +- HashJoin(joinType=[InnerJoin], where=[(ss_addr_sk = ca_address_sk)], select=[ss_addr_sk, ss_ext_sales_price, ca_address_sk, ca_county], build=[right])
         :                 :                    :- Exchange(distribution=[hash[ss_addr_sk]])
         :                 :                    :  +- Calc(select=[ss_addr_sk, ss_ext_sales_price])
         :                 :                    :     +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_addr_sk, ss_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])
         :                 :                    :        :- Reused(reference_id=[1])
         :                 :                    :        +- Reused(reference_id=[2])
         :                 :                    +- Exchange(distribution=[hash[ca_address_sk]])
         :                 :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_county]]], fields=[ca_address_sk, ca_county])
         :                 :- Exchange(distribution=[broadcast])
         :                 :  +- Calc(select=[ca_county, store_sales])
         :                 :     +- HashAggregate(isMerge=[true], groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Final_SUM(sum$0) AS store_sales])
         :                 :        +- Exchange(distribution=[hash[ca_county, d_qoy, d_year]])
         :                 :           +- LocalHashAggregate(groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Partial_SUM(ss_ext_sales_price) AS sum$0])
         :                 :              +- Calc(select=[ca_county, CAST(1 AS INTEGER) AS d_qoy, CAST(2000 AS INTEGER) AS d_year, ss_ext_sales_price])
         :                 :                 +- HashJoin(joinType=[InnerJoin], where=[(ss_addr_sk = ca_address_sk)], select=[ss_addr_sk, ss_ext_sales_price, ca_address_sk, ca_county], build=[right])
         :                 :                    :- Exchange(distribution=[hash[ss_addr_sk]])
         :                 :                    :  +- Calc(select=[ss_addr_sk, ss_ext_sales_price])
         :                 :                    :     +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_addr_sk, ss_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])
         :                 :                    :        :- Reused(reference_id=[1])
         :                 :                    :        +- Exchange(distribution=[broadcast])(reuse_id=[3])
         :                 :                    :           +- Calc(select=[d_date_sk], where=[((d_qoy = 1) AND (d_year = 2000))])
         :                 :                    :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_qoy]]], fields=[d_date_sk, d_year, d_qoy])
         :                 :                    +- Exchange(distribution=[hash[ca_address_sk]])
         :                 :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_county]]], fields=[ca_address_sk, ca_county])
         :                 +- Exchange(distribution=[hash[ca_county, d_qoy, d_year]])
         :                    +- LocalHashAggregate(groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Partial_SUM(ws_ext_sales_price) AS sum$0])
         :                       +- Calc(select=[ca_county, CAST(1 AS INTEGER) AS d_qoy, CAST(2000 AS INTEGER) AS d_year, ws_ext_sales_price])
         :                          +- HashJoin(joinType=[InnerJoin], where=[(ws_bill_addr_sk = ca_address_sk)], select=[ws_bill_addr_sk, ws_ext_sales_price, ca_address_sk, ca_county], build=[right])
         :                             :- Exchange(distribution=[hash[ws_bill_addr_sk]])
         :                             :  +- Calc(select=[ws_bill_addr_sk, ws_ext_sales_price])
         :                             :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_bill_addr_sk, ws_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_addr_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_bill_addr_sk, ws_ext_sales_price])\n+- [#2] Exchange(distribution=[broadcast])\n])
         :                             :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_addr_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_bill_addr_sk, ws_ext_sales_price])
         :                             :        +- Reused(reference_id=[3])
         :                             +- Exchange(distribution=[hash[ca_address_sk]])
         :                                +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_county]]], fields=[ca_address_sk, ca_county])
         +- Exchange(distribution=[hash[ca_county, d_qoy, d_year]])
            +- LocalHashAggregate(groupBy=[ca_county, d_qoy, d_year], select=[ca_county, d_qoy, d_year, Partial_SUM(ws_ext_sales_price) AS sum$0])
               +- Calc(select=[ca_county, CAST(3 AS INTEGER) AS d_qoy, CAST(2000 AS INTEGER) AS d_year, ws_ext_sales_price])
                  +- HashJoin(joinType=[InnerJoin], where=[(ws_bill_addr_sk = ca_address_sk)], select=[ws_bill_addr_sk, ws_ext_sales_price, ca_address_sk, ca_county], build=[right])
                     :- Exchange(distribution=[hash[ws_bill_addr_sk]])
                     :  +- Calc(select=[ws_bill_addr_sk, ws_ext_sales_price])
                     :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_bill_addr_sk, ws_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_addr_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_bill_addr_sk, ws_ext_sales_price])\n+- [#2] Exchange(distribution=[broadcast])\n])
                     :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_addr_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_bill_addr_sk, ws_ext_sales_price])
                     :        +- Reused(reference_id=[4])
                     +- Exchange(distribution=[hash[ca_address_sk]])
                        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_county]]], fields=[ca_address_sk, ca_county])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q32]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query32.tpl and seed 2031708268
select  sum(cs_ext_discount_amt)  as `excess discount amount`
from 
   catalog_sales 
   ,item 
   ,date_dim
where
i_manufact_id = 269
and i_item_sk = cs_item_sk 
and d_date between '1998-03-18' and 
        (cast('1998-03-18' as date) + interval '90' day)
and d_date_sk = cs_sold_date_sk 
and cs_ext_discount_amt  
     > ( 
         select 
            1.3 * avg(cs_ext_discount_amt) 
         from 
            catalog_sales 
           ,date_dim
         where 
              cs_item_sk = i_item_sk 
          and d_date between '1998-03-18' and
                             (cast('1998-03-18' as date) + interval '90' day)
          and d_date_sk = cs_sold_date_sk 
      ) 
limit 100

-- end query 1 in stream 0 using template query32.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(fetch=[100])
+- LogicalAggregate(group=[{}], excess discount amount=[SUM($0)])
   +- LogicalProject(cs_ext_discount_amt=[$22])
      +- LogicalFilter(condition=[AND(=($47, 269), =($34, $15), >=($58, CAST(_UTF-16LE'1998-03-18'):DATE NOT NULL), <=($58, +(CAST(_UTF-16LE'1998-03-18'):DATE NOT NULL, 7776000000:INTERVAL DAY)), =($56, $0), >($22, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(1.3:DECIMAL(2, 1), $0)])
  LogicalAggregate(group=[{}], agg#0=[AVG($0)])
    LogicalProject(cs_ext_discount_amt=[$22])
      LogicalFilter(condition=[AND(=($15, $cor0.i_item_sk), >=($36, CAST(_UTF-16LE'1998-03-18'):DATE NOT NULL), <=($36, +(CAST(_UTF-16LE'1998-03-18'):DATE NOT NULL, 7776000000:INTERVAL DAY)), =($34, $0))])
        LogicalJoin(condition=[true], joinType=[inner])
          LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
          LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
})))], variablesSet=[[$cor0]])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Limit(offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- Limit(offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS excess discount amount])
         +- Exchange(distribution=[single])
            +- LocalHashAggregate(select=[Partial_SUM(cs_ext_discount_amt) AS sum$0])
               +- Calc(select=[cs_ext_discount_amt])
                  +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(d_date_sk = cs_sold_date_sk)], select=[cs_sold_date_sk, cs_ext_discount_amt, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_ext_discount_amt])\n:  +- HashJoin(joinType=[InnerJoin], where=[((cs_ext_discount_amt > (1.3 * $f1)) AND (cs_item_sk = cs_item_sk0))], select=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt, cs_item_sk0, $f1], isBroadcast=[true], build=[right])\n:     :- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(i_item_sk = cs_item_sk)], select=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt, i_item_sk], isBroadcast=[true], build=[right])\n:     :     :- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt]]], fields=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :- Exchange(distribution=[broadcast])(reuse_id=[1])
                     :  +- Calc(select=[d_date_sk], where=[SEARCH(d_date, Sarg[[1998-03-18..1998-06-16]])])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
                     :- Exchange(distribution=[broadcast])
                     :  +- HashAggregate(isMerge=[true], groupBy=[cs_item_sk], select=[cs_item_sk, Final_AVG(sum$0, count$1) AS $f1])
                     :     +- Exchange(distribution=[hash[cs_item_sk]])
                     :        +- LocalHashAggregate(groupBy=[cs_item_sk], select=[cs_item_sk, Partial_AVG(cs_ext_discount_amt) AS (sum$0, count$1)])
                     :           +- Calc(select=[cs_item_sk, cs_ext_discount_amt])
                     :              +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(d_date_sk = cs_sold_date_sk)], select=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt], where=[cs_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt]]], fields=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :                 :- Reused(reference_id=[1])
                     :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt]]], fields=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt])
                     :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt]]], fields=[cs_sold_date_sk, cs_item_sk, cs_ext_discount_amt])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[i_item_sk], where=[(i_manufact_id = 269)])
                           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_manufact_id]]], fields=[i_item_sk, i_manufact_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q33]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query33.tpl and seed 1930872976
with ss as (
 select
          i_manufact_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where
         i_manufact_id in (select
  i_manufact_id
from
 item
where i_category in ('Books'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 3
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_manufact_id),
 cs as (
 select
          i_manufact_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_manufact_id               in (select
  i_manufact_id
from
 item
where i_category in ('Books'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 3
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_manufact_id),
 ws as (
 select
          i_manufact_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_manufact_id               in (select
  i_manufact_id
from
 item
where i_category in ('Books'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 3
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6
 group by i_manufact_id)
  select  i_manufact_id ,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_manufact_id
 order by total_sales
limit 100

-- end query 1 in stream 0 using template query33.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
   +- LogicalUnion(all=[true])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(i_manufact_id=[$0], total_sales=[$1])
      :  :  +- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
      :  :     +- LogicalProject(i_manufact_id=[$77], ss_ext_sales_price=[$15])
      :  :        +- LogicalFilter(condition=[AND(IN($77, {
LogicalProject(i_manufact_id=[$13])
  LogicalFilter(condition=[=($12, _UTF-16LE'Books')])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
}), =($2, $64), =($0, $23), =($29, 1999), =($31, 3), =($6, $51), =($62, -6))])
      :  :           +- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
      :  :              :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
      :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
      :  +- LogicalProject(i_manufact_id=[$0], total_sales=[$1])
      :     +- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
      :        +- LogicalProject(i_manufact_id=[$88], cs_ext_sales_price=[$23])
      :           +- LogicalFilter(condition=[AND(IN($88, {
LogicalProject(i_manufact_id=[$13])
  LogicalFilter(condition=[=($12, _UTF-16LE'Books')])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
}), =($15, $75), =($0, $34), =($40, 1999), =($42, 3), =($6, $62), =($73, -6))])
      :              +- LogicalJoin(condition=[true], joinType=[inner])
      :                 :- LogicalJoin(condition=[true], joinType=[inner])
      :                 :  :- LogicalJoin(condition=[true], joinType=[inner])
      :                 :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
      :                 :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
      :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
      +- LogicalProject(i_manufact_id=[$0], total_sales=[$1])
         +- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
            +- LogicalProject(i_manufact_id=[$88], ws_ext_sales_price=[$23])
               +- LogicalFilter(condition=[AND(IN($88, {
LogicalProject(i_manufact_id=[$13])
  LogicalFilter(condition=[=($12, _UTF-16LE'Books')])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
}), =($3, $75), =($0, $34), =($40, 1999), =($42, 3), =($7, $62), =($73, -6))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                     :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                     :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
                     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[total_sales ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[total_sales ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[false], groupBy=[i_manufact_id], select=[i_manufact_id, SUM(total_sales) AS total_sales])
         +- Union(all=[true], union=[i_manufact_id, total_sales])
            :- Union(all=[true], union=[i_manufact_id, total_sales])
            :  :- HashAggregate(isMerge=[true], groupBy=[i_manufact_id], select=[i_manufact_id, Final_SUM(sum$0) AS total_sales])
            :  :  +- Exchange(distribution=[hash[i_manufact_id]])
            :  :     +- LocalHashAggregate(groupBy=[i_manufact_id], select=[i_manufact_id, Partial_SUM(total_sales) AS sum$0])
            :  :        +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, total_sales, i_item_sk, i_manufact_id], isBroadcast=[true], build=[left])
            :  :           :- Exchange(distribution=[broadcast])
            :  :           :  +- HashAggregate(isMerge=[true], groupBy=[ss_item_sk], select=[ss_item_sk, Final_SUM(sum$0) AS total_sales])
            :  :           :     +- Exchange(distribution=[hash[ss_item_sk]])
            :  :           :        +- LocalHashAggregate(groupBy=[ss_item_sk], select=[ss_item_sk, Partial_SUM(ss_ext_sales_price) AS sum$0])
            :  :           :           +- Calc(select=[ss_item_sk, ss_ext_sales_price])
            :  :           :              +- HashJoin(joinType=[InnerJoin], where=[(ss_addr_sk = ca_address_sk)], select=[ss_item_sk, ss_addr_sk, ss_ext_sales_price, ca_address_sk], build=[right])
            :  :           :                 :- Exchange(distribution=[hash[ss_addr_sk]])
            :  :           :                 :  +- Calc(select=[ss_item_sk, ss_addr_sk, ss_ext_sales_price])
            :  :           :                 :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price], where=[ss_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :  :           :                 :        :- Exchange(distribution=[broadcast])(reuse_id=[1])
            :  :           :                 :        :  +- Calc(select=[d_date_sk], where=[((d_year = 1999) AND (d_moy = 3))])
            :  :           :                 :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
            :  :           :                 :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price])
            :  :           :                 +- Exchange(distribution=[hash[ca_address_sk]])(reuse_id=[2])
            :  :           :                    +- Calc(select=[ca_address_sk], where=[(ca_gmt_offset = -6)])
            :  :           :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_gmt_offset]]], fields=[ca_address_sk, ca_gmt_offset])
            :  :           +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[LeftSemiJoin], where=[(i_manufact_id = i_manufact_id0)], select=[i_item_sk, i_manufact_id], isBroadcast=[true], build=[right], tryDistinctBuildRow=[true])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_manufact_id]]], fields=[i_item_sk, i_manufact_id])\n+- [#2] Exchange(distribution=[broadcast])\n])(reuse_id=[3])
            :  :              :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_manufact_id]]], fields=[i_item_sk, i_manufact_id])
            :  :              +- Exchange(distribution=[broadcast])
            :  :                 +- LocalHashAggregate(groupBy=[i_manufact_id], select=[i_manufact_id])
            :  :                    +- Calc(select=[i_manufact_id], where=[(i_category = 'Books')])
            :  :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_category, i_manufact_id]]], fields=[i_category, i_manufact_id])
            :  +- HashAggregate(isMerge=[true], groupBy=[i_manufact_id], select=[i_manufact_id, Final_SUM(sum$0) AS total_sales])
            :     +- Exchange(distribution=[hash[i_manufact_id]])
            :        +- LocalHashAggregate(groupBy=[i_manufact_id], select=[i_manufact_id, Partial_SUM(total_sales) AS sum$0])
            :           +- HashJoin(joinType=[InnerJoin], where=[(cs_item_sk = i_item_sk)], select=[cs_item_sk, total_sales, i_item_sk, i_manufact_id], isBroadcast=[true], build=[left])
            :              :- Exchange(distribution=[broadcast])
            :              :  +- HashAggregate(isMerge=[true], groupBy=[cs_item_sk], select=[cs_item_sk, Final_SUM(sum$0) AS total_sales])
            :              :     +- Exchange(distribution=[hash[cs_item_sk]])
            :              :        +- LocalHashAggregate(groupBy=[cs_item_sk], select=[cs_item_sk, Partial_SUM(cs_ext_sales_price) AS sum$0])
            :              :           +- Calc(select=[cs_item_sk, cs_ext_sales_price])
            :              :              +- HashJoin(joinType=[InnerJoin], where=[(cs_bill_addr_sk = ca_address_sk)], select=[cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price, ca_address_sk], build=[right])
            :              :                 :- Exchange(distribution=[hash[cs_bill_addr_sk]])
            :              :                 :  +- Calc(select=[cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price])
            :              :                 :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price], where=[cs_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price]]], fields=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :              :                 :        :- Reused(reference_id=[1])
            :              :                 :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price]]], fields=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price])
            :              :                 +- Reused(reference_id=[2])
            :              +- Reused(reference_id=[3])
            +- HashAggregate(isMerge=[true], groupBy=[i_manufact_id], select=[i_manufact_id, Final_SUM(sum$0) AS total_sales])
               +- Exchange(distribution=[hash[i_manufact_id]])
                  +- LocalHashAggregate(groupBy=[i_manufact_id], select=[i_manufact_id, Partial_SUM(total_sales) AS sum$0])
                     +- HashJoin(joinType=[InnerJoin], where=[(ws_item_sk = i_item_sk)], select=[ws_item_sk, total_sales, i_item_sk, i_manufact_id], isBroadcast=[true], build=[left])
                        :- Exchange(distribution=[broadcast])
                        :  +- HashAggregate(isMerge=[true], groupBy=[ws_item_sk], select=[ws_item_sk, Final_SUM(sum$0) AS total_sales])
                        :     +- Exchange(distribution=[hash[ws_item_sk]])
                        :        +- LocalHashAggregate(groupBy=[ws_item_sk], select=[ws_item_sk, Partial_SUM(ws_ext_sales_price) AS sum$0])
                        :           +- Calc(select=[ws_item_sk, ws_ext_sales_price])
                        :              +- HashJoin(joinType=[InnerJoin], where=[(ws_bill_addr_sk = ca_address_sk)], select=[ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price, ca_address_sk], build=[right])
                        :                 :- Exchange(distribution=[hash[ws_bill_addr_sk]])
                        :                 :  +- Calc(select=[ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price])
                        :                 :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price])\n+- [#2] Exchange(distribution=[broadcast])\n])
                        :                 :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price])
                        :                 :        +- Reused(reference_id=[1])
                        :                 +- Reused(reference_id=[2])
                        +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q34]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query34.tpl and seed 1971067816
select c_last_name
       ,c_first_name
       ,c_salutation
       ,c_preferred_cust_flag
       ,ss_ticket_number
       ,cnt from
   (select ss_ticket_number
          ,ss_customer_sk
          ,count(*) cnt
    from store_sales,date_dim,store,household_demographics
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and (date_dim.d_dom between 1 and 3 or date_dim.d_dom between 25 and 28)
    and (household_demographics.hd_buy_potential = '>10000' or
         household_demographics.hd_buy_potential = 'unknown')
    and household_demographics.hd_vehicle_count > 0
    and (case when household_demographics.hd_vehicle_count > 0 
	then household_demographics.hd_dep_count/ household_demographics.hd_vehicle_count 
	else null 
	end)  > 1.2
    and date_dim.d_year in (2000,2000+1,2000+2)
    and store.s_county in ('Mobile County','Maverick County','Huron County','Kittitas County',
                           'Fairfield County','Jackson County','Barrow County','Pennington County')
    group by ss_ticket_number,ss_customer_sk) dn,customer
    where ss_customer_sk = c_customer_sk
      and cnt between 15 and 20
    order by c_last_name,c_first_name,c_salutation,c_preferred_cust_flag desc

-- end query 1 in stream 0 using template query34.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[DESC-nulls-last])
+- LogicalProject(c_last_name=[$12], c_first_name=[$11], c_salutation=[$10], c_preferred_cust_flag=[$13], ss_ticket_number=[$0], cnt=[$2])
   +- LogicalFilter(condition=[AND(=($1, $3), >=($2, 15), <=($2, 20))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalAggregate(group=[{0, 1}], cnt=[COUNT()])
         :  +- LogicalProject(ss_ticket_number=[$9], ss_customer_sk=[$3])
         :     +- LogicalFilter(condition=[AND(=($0, $23), =($7, $51), =($5, $80), OR(AND(>=($32, 1), <=($32, 3)), AND(>=($32, 25), <=($32, 28))), OR(=($82, _UTF-16LE'>10000'), =($82, _UTF-16LE'unknown')), >($84, 0), >(CASE(>($84, 0), /($83, $84), null:INTEGER), 1.2:DECIMAL(2, 1)), OR(=($29, 2000), =($29, +(2000, 1)), =($29, +(2000, 2))), OR(=($74, _UTF-16LE'Mobile County'), =($74, _UTF-16LE'Maverick County'), =($74, _UTF-16LE'Huron County'), =($74, _UTF-16LE'Kittitas County'), =($74, _UTF-16LE'Fairfield County'), =($74, _UTF-16LE'Jackson County'), =($74, _UTF-16LE'Barrow County'), =($74, _UTF-16LE'Pennington County')))])
         :        +- LogicalJoin(condition=[true], joinType=[inner])
         :           :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :           :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
         :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
         +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Sort(orderBy=[c_last_name ASC, c_first_name ASC, c_salutation ASC, c_preferred_cust_flag DESC])
+- Exchange(distribution=[single])
   +- Calc(select=[c_last_name, c_first_name, c_salutation, c_preferred_cust_flag, ss_ticket_number, cnt])
      +- HashJoin(joinType=[InnerJoin], where=[(ss_customer_sk = c_customer_sk)], select=[c_customer_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, ss_ticket_number, ss_customer_sk, cnt], build=[right])
         :- Exchange(distribution=[hash[c_customer_sk]])
         :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag]]], fields=[c_customer_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag])
         +- Exchange(distribution=[hash[ss_customer_sk]])
            +- Calc(select=[ss_ticket_number, ss_customer_sk, cnt], where=[SEARCH(cnt, Sarg[[15..20]])])
               +- HashAggregate(isMerge=[false], groupBy=[ss_ticket_number, ss_customer_sk], select=[ss_ticket_number, ss_customer_sk, COUNT(*) AS cnt])
                  +- Exchange(distribution=[hash[ss_ticket_number, ss_customer_sk]])
                     +- Calc(select=[ss_ticket_number, ss_customer_sk])
                        +- MultipleInput(readOrder=[0,0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_customer_sk, ss_store_sk, ss_ticket_number, s_store_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_customer_sk, ss_store_sk, ss_ticket_number])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_store_sk, ss_ticket_number])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_hdemo_sk = hd_demo_sk)], select=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_store_sk, ss_ticket_number, hd_demo_sk], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_store_sk, ss_ticket_number], where=[ss_sold_date_sk IS NOT NULL])\n:     :     :  +- [#4] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_store_sk, ss_ticket_number]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_store_sk, ss_ticket_number])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                           :- Exchange(distribution=[broadcast])
                           :  +- Calc(select=[s_store_sk], where=[SEARCH(s_county, Sarg[_UTF-16LE'Barrow County', _UTF-16LE'Fairfield County', _UTF-16LE'Huron County', _UTF-16LE'Jackson County', _UTF-16LE'Kittitas County', _UTF-16LE'Maverick County', _UTF-16LE'Mobile County', _UTF-16LE'Pennington County'])])
                           :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_county]]], fields=[s_store_sk, s_county])
                           :- Exchange(distribution=[broadcast])
                           :  +- Calc(select=[d_date_sk], where=[(SEARCH(d_dom, Sarg[[1..3], [25..28]]) AND SEARCH(d_year, Sarg[2000, 2001, 2002]))])
                           :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_dom]]], fields=[d_date_sk, d_year, d_dom])
                           :- Exchange(distribution=[broadcast])
                           :  +- Calc(select=[hd_demo_sk], where=[(SEARCH(hd_buy_potential, Sarg[_UTF-16LE'>10000', _UTF-16LE'unknown']) AND SEARCH(hd_vehicle_count, Sarg[(0..+∞)]) AND CASE((hd_vehicle_count > 0), ((hd_dep_count / hd_vehicle_count) > 1.2), false))])
                           :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, household_demographics, project=[hd_demo_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count]]], fields=[hd_demo_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count])
                           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_store_sk, ss_ticket_number]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_store_sk, ss_ticket_number])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q35]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query35.tpl and seed 1930872976
select   
  ca_state,
  cd_gender,
  cd_marital_status,
  count(*) cnt1,
  avg(cd_dep_count),
  max(cd_dep_count),
  sum(cd_dep_count),
  cd_dep_employed_count,
  count(*) cnt2,
  avg(cd_dep_employed_count),
  max(cd_dep_employed_count),
  sum(cd_dep_employed_count),
  cd_dep_college_count,
  count(*) cnt3,
  avg(cd_dep_college_count),
  max(cd_dep_college_count),
  sum(cd_dep_college_count)
 from
  customer c,customer_address ca,customer_demographics
 where
  c.c_current_addr_sk = ca.ca_address_sk and
  cd_demo_sk = c.c_current_cdemo_sk and 
  exists (select *
          from store_sales,date_dim
          where c.c_customer_sk = ss_customer_sk and
                ss_sold_date_sk = d_date_sk and
                d_year = 1999 and
                d_qoy < 4) and
   (exists (select *
            from web_sales,date_dim
            where c.c_customer_sk = ws_bill_customer_sk and
                  ws_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_qoy < 4) or 
    exists (select * 
            from catalog_sales,date_dim
            where c.c_customer_sk = cs_ship_customer_sk and
                  cs_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_qoy < 4))
 group by ca_state,
          cd_gender,
          cd_marital_status,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 order by ca_state,
          cd_gender,
          cd_marital_status,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 limit 100

-- end query 1 in stream 0 using template query35.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(ca_state=[$0], cd_gender=[$1], cd_marital_status=[$2], cnt1=[$3], EXPR$4=[$4], EXPR$5=[$5], EXPR$6=[$6], cd_dep_employed_count=[$7], cnt2=[$8], EXPR$9=[$9], EXPR$10=[$10], EXPR$11=[$11], cd_dep_college_count=[$12], cnt3=[$13], EXPR$14=[$14], EXPR$15=[$15], EXPR$16=[$16])
+- LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$17], sort4=[$7], sort5=[$12], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], fetch=[100])
   +- LogicalProject(ca_state=[$0], cd_gender=[$1], cd_marital_status=[$2], cnt1=[$6], EXPR$4=[$7], EXPR$5=[$8], EXPR$6=[$9], cd_dep_employed_count=[$4], cnt2=[$6], EXPR$9=[$10], EXPR$10=[$11], EXPR$11=[$12], cd_dep_college_count=[$5], cnt3=[$6], EXPR$14=[$13], EXPR$15=[$14], EXPR$16=[$15], cd_dep_count=[$3])
      +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5}], cnt3=[COUNT()], EXPR$4=[AVG($3)], EXPR$5=[MAX($3)], EXPR$6=[SUM($3)], EXPR$9=[AVG($4)], EXPR$10=[MAX($4)], EXPR$11=[SUM($4)], EXPR$14=[AVG($5)], EXPR$15=[MAX($5)], EXPR$16=[SUM($5)])
         +- LogicalProject(ca_state=[$26], cd_gender=[$32], cd_marital_status=[$33], cd_dep_count=[$37], cd_dep_employed_count=[$38], cd_dep_college_count=[$39])
            +- LogicalFilter(condition=[AND(=($4, $18), =($31, $2), EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $3), =($0, $23), =($29, 1999), <($33, 4))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
}), OR(EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $4), =($0, $34), =($40, 1999), <($44, 4))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
}), EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $7), =($0, $34), =($40, 1999), <($44, 4))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
})))], variablesSet=[[$cor0]])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
                  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
                  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[ca_state, cd_gender, cd_marital_status, cnt3 AS cnt1, EXPR$4, EXPR$5, EXPR$6, cd_dep_employed_count, cnt3 AS cnt2, EXPR$9, EXPR$10, EXPR$11, cd_dep_college_count, cnt3, EXPR$14, EXPR$15, EXPR$16])
+- SortLimit(orderBy=[ca_state ASC, cd_gender ASC, cd_marital_status ASC, cd_dep_count ASC, cd_dep_employed_count ASC, cd_dep_college_count ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[ca_state ASC, cd_gender ASC, cd_marital_status ASC, cd_dep_count ASC, cd_dep_employed_count ASC, cd_dep_college_count ASC], offset=[0], fetch=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], select=[ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, Final_COUNT(count1$0) AS cnt3, Final_AVG(sum$1, count$2) AS EXPR$4, Final_MAX(max$3) AS EXPR$5, Final_SUM(sum$4) AS EXPR$6, Final_AVG(sum$5, count$6) AS EXPR$9, Final_MAX(max$7) AS EXPR$10, Final_SUM(sum$8) AS EXPR$11, Final_AVG(sum$9, count$10) AS EXPR$14, Final_MAX(max$11) AS EXPR$15, Final_SUM(sum$12) AS EXPR$16])
            +- Exchange(distribution=[hash[ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count]])
               +- LocalHashAggregate(groupBy=[ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], select=[ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, Partial_COUNT(*) AS count1$0, Partial_AVG(cd_dep_count) AS (sum$1, count$2), Partial_MAX(cd_dep_count) AS max$3, Partial_SUM(cd_dep_count) AS sum$4, Partial_AVG(cd_dep_employed_count) AS (sum$5, count$6), Partial_MAX(cd_dep_employed_count) AS max$7, Partial_SUM(cd_dep_employed_count) AS sum$8, Partial_AVG(cd_dep_college_count) AS (sum$9, count$10), Partial_MAX(cd_dep_college_count) AS max$11, Partial_SUM(cd_dep_college_count) AS sum$12])
                  +- Calc(select=[ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], where=[($f10 IS NOT NULL OR $f1 IS NOT NULL)])
                     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[RightOuterJoin], where=[(c_customer_sk = cs_ship_customer_sk)], select=[cs_ship_customer_sk, $f1, c_customer_sk, ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, $f10], build=[left])\n:- Calc(select=[cs_ship_customer_sk, true AS $f1])\n:  +- HashAggregate(isMerge=[false], groupBy=[cs_ship_customer_sk], select=[cs_ship_customer_sk])\n:     +- [#2] Exchange(distribution=[hash[cs_ship_customer_sk]])\n+- [#1] Exchange(distribution=[hash[c_customer_sk]])\n])
                        :- Exchange(distribution=[hash[c_customer_sk]])
                        :  +- Calc(select=[c_customer_sk, ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, $f1 AS $f10])
                        :     +- HashJoin(joinType=[InnerJoin], where=[(c_current_addr_sk = ca_address_sk)], select=[$f1, c_customer_sk, c_current_addr_sk, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, ca_address_sk, ca_state], build=[right])
                        :        :- Exchange(distribution=[hash[c_current_addr_sk]])
                        :        :  +- Calc(select=[$f1, c_customer_sk, c_current_addr_sk, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count])
                        :        :     +- HashJoin(joinType=[InnerJoin], where=[(cd_demo_sk = c_current_cdemo_sk)], select=[$f1, c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, cd_demo_sk, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], build=[right])
                        :        :        :- Exchange(distribution=[hash[c_current_cdemo_sk]])
                        :        :        :  +- Calc(select=[$f1, c_customer_sk, c_current_cdemo_sk, c_current_addr_sk])
                        :        :        :     +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[RightOuterJoin], where=[(c_customer_sk = ws_bill_customer_sk)], select=[ws_bill_customer_sk, $f1, c_customer_sk, c_current_cdemo_sk, c_current_addr_sk], build=[left])\n:- Calc(select=[ws_bill_customer_sk, true AS $f1])\n:  +- HashAggregate(isMerge=[false], groupBy=[ws_bill_customer_sk], select=[ws_bill_customer_sk])\n:     +- [#1] Exchange(distribution=[hash[ws_bill_customer_sk]])\n+- Calc(select=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk])\n   +- HashJoin(joinType=[InnerJoin], where=[(c_customer_sk = ss_customer_sk)], select=[ss_customer_sk, c_customer_sk, c_current_cdemo_sk, c_current_addr_sk], build=[left])\n      :- HashAggregate(isMerge=[false], groupBy=[ss_customer_sk], select=[ss_customer_sk])\n      :  +- [#3] Exchange(distribution=[hash[ss_customer_sk]])\n      +- [#2] Exchange(distribution=[hash[c_customer_sk]])\n])
                        :        :        :        :- Exchange(distribution=[hash[ws_bill_customer_sk]])
                        :        :        :        :  +- Calc(select=[ws_bill_customer_sk])
                        :        :        :        :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_bill_customer_sk, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ws_sold_date_sk, ws_bill_customer_sk], where=[ws_bill_customer_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_customer_sk]]], fields=[ws_sold_date_sk, ws_bill_customer_sk])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :        :        :        :        :- Exchange(distribution=[broadcast])(reuse_id=[1])
                        :        :        :        :        :  +- Calc(select=[d_date_sk], where=[((d_year = 1999) AND (d_qoy < 4))])
                        :        :        :        :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_qoy]]], fields=[d_date_sk, d_year, d_qoy])
                        :        :        :        :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_customer_sk]]], fields=[ws_sold_date_sk, ws_bill_customer_sk])
                        :        :        :        :- Exchange(distribution=[hash[c_customer_sk]])
                        :        :        :        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk]]], fields=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk])
                        :        :        :        +- Exchange(distribution=[hash[ss_customer_sk]])
                        :        :        :           +- Calc(select=[ss_customer_sk])
                        :        :        :              +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_customer_sk, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_customer_sk], where=[ss_customer_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk]]], fields=[ss_sold_date_sk, ss_customer_sk])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :        :        :                 :- Reused(reference_id=[1])
                        :        :        :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk]]], fields=[ss_sold_date_sk, ss_customer_sk])
                        :        :        +- Exchange(distribution=[hash[cd_demo_sk]])
                        :        :           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count]]], fields=[cd_demo_sk, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count])
                        :        +- Exchange(distribution=[hash[ca_address_sk]])
                        :           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state]]], fields=[ca_address_sk, ca_state])
                        +- Exchange(distribution=[hash[cs_ship_customer_sk]])
                           +- Calc(select=[cs_ship_customer_sk])
                              +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_ship_customer_sk, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_ship_customer_sk], where=[cs_ship_customer_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_ship_customer_sk]]], fields=[cs_sold_date_sk, cs_ship_customer_sk])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                 :- Reused(reference_id=[1])
                                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_ship_customer_sk]]], fields=[cs_sold_date_sk, cs_ship_customer_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q36]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query36.tpl and seed 1544728811
select  
    sum(ss_net_profit)/sum(ss_ext_sales_price) as gross_margin
   ,i_category
   ,i_class
   ,grouping(i_category)+grouping(i_class) as lochierarchy
   ,rank() over (
 	partition by grouping(i_category)+grouping(i_class),
 	case when grouping(i_class) = 0 then i_category end 
 	order by sum(ss_net_profit)/sum(ss_ext_sales_price) asc) as rank_within_parent
 from
    store_sales
   ,date_dim       d1
   ,item
   ,store
 where
    d1.d_year = 1999 
 and d1.d_date_sk = ss_sold_date_sk
 and i_item_sk  = ss_item_sk 
 and s_store_sk  = ss_store_sk
 and s_state in ('SD','FL','MI','LA',
                 'MO','SC','AL','GA')
 group by rollup(i_category,i_class)
 order by
   lochierarchy desc
  ,case when lochierarchy = 0 then i_category end
  ,rank_within_parent
  limit 100

-- end query 1 in stream 0 using template query36.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(gross_margin=[$0], i_category=[$1], i_class=[$2], lochierarchy=[$3], rank_within_parent=[$4])
+- LogicalSort(sort0=[$3], sort1=[$5], sort2=[$4], dir0=[DESC-nulls-last], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
   +- LogicalProject(gross_margin=[/($2, $3)], i_category=[$0], i_class=[$1], lochierarchy=[+($4, $5)], rank_within_parent=[RANK() OVER (PARTITION BY +($4, $5), CASE(=($5, 0), $0, null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE") ORDER BY /($2, $3) NULLS FIRST)], EXPR$5=[CASE(=(+($4, $5), 0), $0, null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE")])
      +- LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], agg#0=[SUM($2)], agg#1=[SUM($3)], agg#2=[GROUPING($0)], agg#3=[GROUPING($1)])
         +- LogicalProject(i_category=[$63], i_class=[$61], ss_net_profit=[$22], ss_ext_sales_price=[$15])
            +- LogicalFilter(condition=[AND(=($29, 1999), =($23, $0), =($51, $2), =($73, $7), OR(=($97, _UTF-16LE'SD'), =($97, _UTF-16LE'FL'), =($97, _UTF-16LE'MI'), =($97, _UTF-16LE'LA'), =($97, _UTF-16LE'MO'), =($97, _UTF-16LE'SC'), =($97, _UTF-16LE'AL'), =($97, _UTF-16LE'GA')))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[$2 AS gross_margin, i_category, i_class, $3 AS lochierarchy, w0$o0 AS rank_within_parent])
+- SortLimit(orderBy=[$3 DESC, $5 ASC, w0$o0 ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[$3 DESC, $5 ASC, w0$o0 ASC], offset=[0], fetch=[100], global=[false])
         +- OverAggregate(partitionBy=[$3, $4], orderBy=[$2 ASC], window#0=[RANK(*) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[i_category, i_class, $2, $3, $4, $5, w0$o0])
            +- Sort(orderBy=[$3 ASC, $4 ASC, $2 ASC])
               +- Exchange(distribution=[hash[$3, $4]])
                  +- Calc(select=[i_category, i_class, ($f3 / $f4) AS $2, (CASE(SEARCH($e, Sarg[0, 1]), 0, 1) + CASE(($e = 0), 0, 1)) AS $3, CASE((CASE(($e = 0), 0, 1) = 0), i_category, null:VARCHAR(2147483647)) AS $4, CASE(((CASE(SEARCH($e, Sarg[0, 1]), 0, 1) + CASE(($e = 0), 0, 1)) = 0), i_category, null:VARCHAR(2147483647)) AS $5])
                     +- HashAggregate(isMerge=[true], groupBy=[i_category, i_class, $e], select=[i_category, i_class, $e, Final_SUM(sum$0) AS $f3, Final_SUM(sum$1) AS $f4])
                        +- Exchange(distribution=[hash[i_category, i_class, $e]])
                           +- LocalHashAggregate(groupBy=[i_category, i_class, $e], select=[i_category, i_class, $e, Partial_SUM(ss_net_profit) AS sum$0, Partial_SUM(ss_ext_sales_price) AS sum$1])
                              +- Expand(projects=[{i_category, i_class, ss_net_profit, ss_ext_sales_price, 0 AS $e}, {i_category, null AS i_class, ss_net_profit, ss_ext_sales_price, 1 AS $e}, {null AS i_category, null AS i_class, ss_net_profit, ss_ext_sales_price, 3 AS $e}])
                                 +- Calc(select=[i_category, i_class, ss_net_profit, ss_ext_sales_price])
                                    +- HashJoin(joinType=[InnerJoin], where=[(i_item_sk = ss_item_sk)], select=[ss_item_sk, ss_ext_sales_price, ss_net_profit, i_item_sk, i_class, i_category], build=[right])
                                       :- Exchange(distribution=[hash[ss_item_sk]])
                                       :  +- Calc(select=[ss_item_sk, ss_ext_sales_price, ss_net_profit])
                                       :     +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(s_store_sk = ss_store_sk)], select=[ss_item_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit, s_store_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_item_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit])\n:  +- HashJoin(joinType=[InnerJoin], where=[(d_date_sk = ss_sold_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit], where=[ss_sold_date_sk IS NOT NULL])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                       :        :- Exchange(distribution=[broadcast])
                                       :        :  +- Calc(select=[s_store_sk], where=[SEARCH(s_state, Sarg[_UTF-16LE'AL', _UTF-16LE'FL', _UTF-16LE'GA', _UTF-16LE'LA', _UTF-16LE'MI', _UTF-16LE'MO', _UTF-16LE'SC', _UTF-16LE'SD'])])
                                       :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_state]]], fields=[s_store_sk, s_state])
                                       :        :- Exchange(distribution=[broadcast])
                                       :        :  +- Calc(select=[d_date_sk], where=[SEARCH(d_year, Sarg[1999])])
                                       :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
                                       :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit])
                                       +- Exchange(distribution=[hash[i_item_sk]])
                                          +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_class, i_category]]], fields=[i_item_sk, i_class, i_category])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q37]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query37.tpl and seed 301843662
select  i_item_id
       ,i_item_desc
       ,i_current_price
 from item, inventory, date_dim, catalog_sales
 where i_current_price between 22 and 22 + 30
 and inv_item_sk = i_item_sk
 and d_date_sk=inv_date_sk
 and d_date between cast('2001-06-02' as date) and (cast('2001-06-02' as date) +  interval '60' day)
 and i_manufact_id in (678,964,918,849)
 and inv_quantity_on_hand between 100 and 500
 and cs_item_sk = i_item_sk
 group by i_item_id,i_item_desc,i_current_price
 order by i_item_id
 limit 100

-- end query 1 in stream 0 using template query37.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2}])
   +- LogicalProject(i_item_id=[$1], i_item_desc=[$4], i_current_price=[$5])
      +- LogicalFilter(condition=[AND(>=($5, 22), <=($5, +(22, 30)), =($23, $0), =($26, $22), >=($28, CAST(_UTF-16LE'2001-06-02'):DATE NOT NULL), <=($28, +(CAST(_UTF-16LE'2001-06-02'):DATE NOT NULL, 5184000000:INTERVAL DAY)), OR(=($13, 678), =($13, 964), =($13, 918), =($13, 849)), >=($25, 100), <=($25, 500), =($69, $0))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, inventory]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[i_item_id ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_item_id ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[i_item_id, i_item_desc, i_current_price], select=[i_item_id, i_item_desc, i_current_price])
         +- Exchange(distribution=[hash[i_item_id, i_item_desc, i_current_price]])
            +- LocalHashAggregate(groupBy=[i_item_id, i_item_desc, i_current_price], select=[i_item_id, i_item_desc, i_current_price])
               +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_item_sk = i_item_sk)], select=[cs_item_sk, i_item_sk, i_item_id, i_item_desc, i_current_price], isBroadcast=[true], build=[right])\n:- HashAggregate(isMerge=[true], groupBy=[cs_item_sk], select=[cs_item_sk])\n:  +- [#2] Exchange(distribution=[hash[cs_item_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :- Exchange(distribution=[broadcast])
                  :  +- HashAggregate(isMerge=[true], groupBy=[i_item_sk], auxGrouping=[i_item_id, i_item_desc, i_current_price], select=[i_item_sk, i_item_id, i_item_desc, i_current_price])
                  :     +- Exchange(distribution=[hash[i_item_sk]])
                  :        +- LocalHashAggregate(groupBy=[i_item_sk], auxGrouping=[i_item_id, i_item_desc, i_current_price], select=[i_item_sk, i_item_id, i_item_desc, i_current_price])
                  :           +- Calc(select=[i_item_sk, i_item_id, i_item_desc, i_current_price])
                  :              +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(d_date_sk = inv_date_sk)], select=[inv_date_sk, i_item_sk, i_item_id, i_item_desc, i_current_price, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[inv_date_sk, i_item_sk, i_item_id, i_item_desc, i_current_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(inv_item_sk = i_item_sk)], select=[inv_date_sk, inv_item_sk, i_item_sk, i_item_id, i_item_desc, i_current_price], isBroadcast=[true], build=[right])\n:     :- Calc(select=[inv_date_sk, inv_item_sk], where=[SEARCH(inv_quantity_on_hand, Sarg[[100..500]])])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, inventory, project=[inv_date_sk, inv_item_sk, inv_quantity_on_hand]]], fields=[inv_date_sk, inv_item_sk, inv_quantity_on_hand])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :                 :- Exchange(distribution=[broadcast])
                  :                 :  +- Calc(select=[d_date_sk], where=[SEARCH(d_date, Sarg[[2001-06-02..2001-08-01]])])
                  :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
                  :                 :- Exchange(distribution=[broadcast])
                  :                 :  +- Calc(select=[i_item_sk, i_item_id, i_item_desc, i_current_price], where=[(SEARCH(i_current_price, Sarg[[22..52]]) AND SEARCH(i_manufact_id, Sarg[678, 849, 918, 964]))])
                  :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_manufact_id]]], fields=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_manufact_id])
                  :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, inventory, project=[inv_date_sk, inv_item_sk, inv_quantity_on_hand]]], fields=[inv_date_sk, inv_item_sk, inv_quantity_on_hand])
                  +- Exchange(distribution=[hash[cs_item_sk]])
                     +- LocalHashAggregate(groupBy=[cs_item_sk], select=[cs_item_sk])
                        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_item_sk]]], fields=[cs_item_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q39a]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query39.tpl and seed 1327317894
with inv as
(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
       ,stdev,mean, case mean when 0 then null else stdev/mean end cov
 from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
            ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
      from inventory
          ,item
          ,warehouse
          ,date_dim
      where inv_item_sk = i_item_sk
        and inv_warehouse_sk = w_warehouse_sk
        and inv_date_sk = d_date_sk
        and d_year =1999
      group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
 where case mean when 0 then 0 else stdev/mean end > 1)
select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
        ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
from inv inv1,inv inv2
where inv1.i_item_sk = inv2.i_item_sk
  and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
  and inv1.d_moy=4
  and inv2.d_moy=4+1
order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
        ,inv2.d_moy,inv2.mean, inv2.cov

]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], sort5=[$7], sort6=[$8], sort7=[$9], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first])
+- LogicalProject(w_warehouse_sk=[$1], i_item_sk=[$2], d_moy=[$3], mean=[$5], cov=[$6], w_warehouse_sk0=[$8], i_item_sk0=[$9], d_moy0=[$10], mean0=[$12], cov0=[$13])
   +- LogicalFilter(condition=[AND(=($2, $9), =($1, $8), =($3, 4), =($10, +(4, 1)))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(w_warehouse_name=[$0], w_warehouse_sk=[$1], i_item_sk=[$2], d_moy=[$3], stdev=[$4], mean=[$5], cov=[CASE(=($5, 0), null:INTEGER, /($4, $5))])
         :  +- LogicalFilter(condition=[>(CASE(=($5, 0), 0, /($4, $5)), 1)])
         :     +- LogicalAggregate(group=[{0, 1, 2, 3}], stdev=[STDDEV_SAMP($4)], mean=[AVG($4)])
         :        +- LogicalProject(w_warehouse_name=[$28], w_warehouse_sk=[$26], i_item_sk=[$4], d_moy=[$48], inv_quantity_on_hand=[$3])
         :           +- LogicalFilter(condition=[AND(=($1, $4), =($2, $26), =($0, $40), =($46, 1999))])
         :              +- LogicalJoin(condition=[true], joinType=[inner])
         :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :                 :  :- LogicalJoin(condition=[true], joinType=[inner])
         :                 :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, inventory]])
         :                 :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
         :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, warehouse]])
         :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         +- LogicalProject(w_warehouse_name=[$0], w_warehouse_sk=[$1], i_item_sk=[$2], d_moy=[$3], stdev=[$4], mean=[$5], cov=[CASE(=($5, 0), null:INTEGER, /($4, $5))])
            +- LogicalFilter(condition=[>(CASE(=($5, 0), 0, /($4, $5)), 1)])
               +- LogicalAggregate(group=[{0, 1, 2, 3}], stdev=[STDDEV_SAMP($4)], mean=[AVG($4)])
                  +- LogicalProject(w_warehouse_name=[$28], w_warehouse_sk=[$26], i_item_sk=[$4], d_moy=[$48], inv_quantity_on_hand=[$3])
                     +- LogicalFilter(condition=[AND(=($1, $4), =($2, $26), =($0, $40), =($46, 1999))])
                        +- LogicalJoin(condition=[true], joinType=[inner])
                           :- LogicalJoin(condition=[true], joinType=[inner])
                           :  :- LogicalJoin(condition=[true], joinType=[inner])
                           :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, inventory]])
                           :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, warehouse]])
                           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Sort(orderBy=[w_warehouse_sk ASC, i_item_sk ASC, d_moy ASC, mean ASC, cov ASC, d_moy0 ASC, mean0 ASC, cov0 ASC])
+- Calc(select=[w_warehouse_sk, i_item_sk, CAST(4 AS INTEGER) AS d_moy, mean, cov, w_warehouse_sk0, i_item_sk0, CAST(5 AS INTEGER) AS d_moy0, mean0, cov0])
   +- Exchange(distribution=[single])
      +- HashJoin(joinType=[InnerJoin], where=[((i_item_sk = i_item_sk0) AND (w_warehouse_sk = w_warehouse_sk0))], select=[w_warehouse_sk, i_item_sk, mean, cov, w_warehouse_sk0, i_item_sk0, mean0, cov0], build=[right])
         :- Exchange(distribution=[hash[i_item_sk, w_warehouse_sk]])
         :  +- Calc(select=[w_warehouse_sk, i_item_sk, CAST(($f4 / $f5) AS INTEGER) AS mean, CASE((CAST(($f4 / $f5) AS INTEGER) = 0), null:INTEGER, (CAST(POWER((($f3 - (($f4 * $f4) / $f5)) / CASE(($f5 = 1), null:BIGINT, ($f5 - 1))), 0.5) AS INTEGER) / CAST(($f4 / $f5) AS INTEGER))) AS cov], where=[CASE((CAST(($f4 / $f5) AS INTEGER) = 0), false, ((CAST(POWER((($f3 - (($f4 * $f4) / $f5)) / CASE(($f5 = 1), null:BIGINT, ($f5 - 1))), 0.5) AS INTEGER) / CAST(($f4 / $f5) AS INTEGER)) > 1))])
         :     +- HashAggregate(isMerge=[false], groupBy=[w_warehouse_sk, i_item_sk, d_moy], select=[w_warehouse_sk, i_item_sk, d_moy, SUM($f5) AS $f3, SUM(inv_quantity_on_hand) AS $f4, COUNT(inv_quantity_on_hand) AS $f5])
         :        +- Exchange(distribution=[hash[w_warehouse_sk, i_item_sk, d_moy]])
         :           +- Calc(select=[w_warehouse_sk, i_item_sk, CAST(4 AS INTEGER) AS d_moy, inv_quantity_on_hand, (inv_quantity_on_hand * inv_quantity_on_hand) AS $f5])
         :              +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(inv_item_sk = i_item_sk)], select=[inv_item_sk, inv_quantity_on_hand, w_warehouse_sk, i_item_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[inv_item_sk, inv_quantity_on_hand, w_warehouse_sk])\n:  +- HashJoin(joinType=[InnerJoin], where=[(inv_warehouse_sk = w_warehouse_sk)], select=[inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand, w_warehouse_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(inv_date_sk = d_date_sk)], select=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand, d_date_sk], isBroadcast=[true], build=[right])\n:     :     :- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, inventory]], fields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
         :                 :- Exchange(distribution=[broadcast])
         :                 :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk]]], fields=[i_item_sk])
         :                 :- Exchange(distribution=[broadcast])
         :                 :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, warehouse, project=[w_warehouse_sk]]], fields=[w_warehouse_sk])
         :                 :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, inventory]], fields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])
         :                 +- Exchange(distribution=[broadcast])
         :                    +- Calc(select=[d_date_sk], where=[((d_year = 1999) AND (d_moy = 4))])
         :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
         +- Exchange(distribution=[hash[i_item_sk, w_warehouse_sk]])
            +- Calc(select=[w_warehouse_sk, i_item_sk, CAST(($f4 / $f5) AS INTEGER) AS mean, CASE((CAST(($f4 / $f5) AS INTEGER) = 0), null:INTEGER, (CAST(POWER((($f3 - (($f4 * $f4) / $f5)) / CASE(($f5 = 1), null:BIGINT, ($f5 - 1))), 0.5) AS INTEGER) / CAST(($f4 / $f5) AS INTEGER))) AS cov], where=[CASE((CAST(($f4 / $f5) AS INTEGER) = 0), false, ((CAST(POWER((($f3 - (($f4 * $f4) / $f5)) / CASE(($f5 = 1), null:BIGINT, ($f5 - 1))), 0.5) AS INTEGER) / CAST(($f4 / $f5) AS INTEGER)) > 1))])
               +- HashAggregate(isMerge=[false], groupBy=[w_warehouse_sk, i_item_sk, d_moy], select=[w_warehouse_sk, i_item_sk, d_moy, SUM($f5) AS $f3, SUM(inv_quantity_on_hand) AS $f4, COUNT(inv_quantity_on_hand) AS $f5])
                  +- Exchange(distribution=[hash[w_warehouse_sk, i_item_sk, d_moy]])
                     +- Calc(select=[w_warehouse_sk, i_item_sk, CAST(5 AS INTEGER) AS d_moy, inv_quantity_on_hand, (inv_quantity_on_hand * inv_quantity_on_hand) AS $f5])
                        +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(inv_item_sk = i_item_sk)], select=[inv_item_sk, inv_quantity_on_hand, w_warehouse_sk, i_item_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[inv_item_sk, inv_quantity_on_hand, w_warehouse_sk])\n:  +- HashJoin(joinType=[InnerJoin], where=[(inv_warehouse_sk = w_warehouse_sk)], select=[inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand, w_warehouse_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(inv_date_sk = d_date_sk)], select=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand, d_date_sk], isBroadcast=[true], build=[right])\n:     :     :- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, inventory]], fields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                           :- Exchange(distribution=[broadcast])
                           :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk]]], fields=[i_item_sk])
                           :- Exchange(distribution=[broadcast])
                           :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, warehouse, project=[w_warehouse_sk]]], fields=[w_warehouse_sk])
                           :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, inventory]], fields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])
                           +- Exchange(distribution=[broadcast])
                              +- Calc(select=[d_date_sk], where=[((d_year = 1999) AND (d_moy = 5))])
                                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q39b]">
    <Resource name="sql">
      <![CDATA[with inv as
(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
       ,stdev,mean, case mean when 0 then null else stdev/mean end cov
 from(select w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy
            ,stddev_samp(inv_quantity_on_hand) stdev,avg(inv_quantity_on_hand) mean
      from inventory
          ,item
          ,warehouse
          ,date_dim
      where inv_item_sk = i_item_sk
        and inv_warehouse_sk = w_warehouse_sk
        and inv_date_sk = d_date_sk
        and d_year =1999
      group by w_warehouse_name,w_warehouse_sk,i_item_sk,d_moy) foo
 where case mean when 0 then 0 else stdev/mean end > 1)
select inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean, inv1.cov
        ,inv2.w_warehouse_sk,inv2.i_item_sk,inv2.d_moy,inv2.mean, inv2.cov
from inv inv1,inv inv2
where inv1.i_item_sk = inv2.i_item_sk
  and inv1.w_warehouse_sk =  inv2.w_warehouse_sk
  and inv1.d_moy=4
  and inv2.d_moy=4+1
  and inv1.cov > 1.5
order by inv1.w_warehouse_sk,inv1.i_item_sk,inv1.d_moy,inv1.mean,inv1.cov
        ,inv2.d_moy,inv2.mean, inv2.cov

]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], sort5=[$7], sort6=[$8], sort7=[$9], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first])
+- LogicalProject(w_warehouse_sk=[$1], i_item_sk=[$2], d_moy=[$3], mean=[$5], cov=[$6], w_warehouse_sk0=[$8], i_item_sk0=[$9], d_moy0=[$10], mean0=[$12], cov0=[$13])
   +- LogicalFilter(condition=[AND(=($2, $9), =($1, $8), =($3, 4), =($10, +(4, 1)), >($6, 1.5:DECIMAL(2, 1)))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(w_warehouse_name=[$0], w_warehouse_sk=[$1], i_item_sk=[$2], d_moy=[$3], stdev=[$4], mean=[$5], cov=[CASE(=($5, 0), null:INTEGER, /($4, $5))])
         :  +- LogicalFilter(condition=[>(CASE(=($5, 0), 0, /($4, $5)), 1)])
         :     +- LogicalAggregate(group=[{0, 1, 2, 3}], stdev=[STDDEV_SAMP($4)], mean=[AVG($4)])
         :        +- LogicalProject(w_warehouse_name=[$28], w_warehouse_sk=[$26], i_item_sk=[$4], d_moy=[$48], inv_quantity_on_hand=[$3])
         :           +- LogicalFilter(condition=[AND(=($1, $4), =($2, $26), =($0, $40), =($46, 1999))])
         :              +- LogicalJoin(condition=[true], joinType=[inner])
         :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :                 :  :- LogicalJoin(condition=[true], joinType=[inner])
         :                 :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, inventory]])
         :                 :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
         :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, warehouse]])
         :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         +- LogicalProject(w_warehouse_name=[$0], w_warehouse_sk=[$1], i_item_sk=[$2], d_moy=[$3], stdev=[$4], mean=[$5], cov=[CASE(=($5, 0), null:INTEGER, /($4, $5))])
            +- LogicalFilter(condition=[>(CASE(=($5, 0), 0, /($4, $5)), 1)])
               +- LogicalAggregate(group=[{0, 1, 2, 3}], stdev=[STDDEV_SAMP($4)], mean=[AVG($4)])
                  +- LogicalProject(w_warehouse_name=[$28], w_warehouse_sk=[$26], i_item_sk=[$4], d_moy=[$48], inv_quantity_on_hand=[$3])
                     +- LogicalFilter(condition=[AND(=($1, $4), =($2, $26), =($0, $40), =($46, 1999))])
                        +- LogicalJoin(condition=[true], joinType=[inner])
                           :- LogicalJoin(condition=[true], joinType=[inner])
                           :  :- LogicalJoin(condition=[true], joinType=[inner])
                           :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, inventory]])
                           :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, warehouse]])
                           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Sort(orderBy=[w_warehouse_sk ASC, i_item_sk ASC, d_moy ASC, mean ASC, cov ASC, d_moy0 ASC, mean0 ASC, cov0 ASC])
+- Calc(select=[w_warehouse_sk0 AS w_warehouse_sk, i_item_sk0 AS i_item_sk, CAST(4 AS INTEGER) AS d_moy, mean0 AS mean, cov0 AS cov, w_warehouse_sk AS w_warehouse_sk0, i_item_sk AS i_item_sk0, CAST(5 AS INTEGER) AS d_moy0, mean AS mean0, cov AS cov0])
   +- Exchange(distribution=[single])
      +- HashJoin(joinType=[InnerJoin], where=[((i_item_sk0 = i_item_sk) AND (w_warehouse_sk0 = w_warehouse_sk))], select=[w_warehouse_sk, i_item_sk, mean, cov, w_warehouse_sk0, i_item_sk0, mean0, cov0], build=[right])
         :- Exchange(distribution=[hash[i_item_sk, w_warehouse_sk]])
         :  +- Calc(select=[w_warehouse_sk, i_item_sk, CAST(($f4 / $f5) AS INTEGER) AS mean, CASE((CAST(($f4 / $f5) AS INTEGER) = 0), null:INTEGER, (CAST(POWER((($f3 - (($f4 * $f4) / $f5)) / CASE(($f5 = 1), null:BIGINT, ($f5 - 1))), 0.5) AS INTEGER) / CAST(($f4 / $f5) AS INTEGER))) AS cov], where=[CASE((CAST(($f4 / $f5) AS INTEGER) = 0), false, ((CAST(POWER((($f3 - (($f4 * $f4) / $f5)) / CASE(($f5 = 1), null:BIGINT, ($f5 - 1))), 0.5) AS INTEGER) / CAST(($f4 / $f5) AS INTEGER)) > 1))])
         :     +- HashAggregate(isMerge=[false], groupBy=[w_warehouse_sk, i_item_sk, d_moy], select=[w_warehouse_sk, i_item_sk, d_moy, SUM($f5) AS $f3, SUM(inv_quantity_on_hand) AS $f4, COUNT(inv_quantity_on_hand) AS $f5])
         :        +- Exchange(distribution=[hash[w_warehouse_sk, i_item_sk, d_moy]])
         :           +- Calc(select=[w_warehouse_sk, i_item_sk, CAST(5 AS INTEGER) AS d_moy, inv_quantity_on_hand, (inv_quantity_on_hand * inv_quantity_on_hand) AS $f5])
         :              +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(inv_item_sk = i_item_sk)], select=[inv_item_sk, inv_quantity_on_hand, w_warehouse_sk, i_item_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[inv_item_sk, inv_quantity_on_hand, w_warehouse_sk])\n:  +- HashJoin(joinType=[InnerJoin], where=[(inv_warehouse_sk = w_warehouse_sk)], select=[inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand, w_warehouse_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(inv_date_sk = d_date_sk)], select=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand, d_date_sk], isBroadcast=[true], build=[right])\n:     :     :- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, inventory]], fields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
         :                 :- Exchange(distribution=[broadcast])
         :                 :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk]]], fields=[i_item_sk])
         :                 :- Exchange(distribution=[broadcast])
         :                 :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, warehouse, project=[w_warehouse_sk]]], fields=[w_warehouse_sk])
         :                 :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, inventory]], fields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])
         :                 +- Exchange(distribution=[broadcast])
         :                    +- Calc(select=[d_date_sk], where=[((d_year = 1999) AND (d_moy = 5))])
         :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
         +- Exchange(distribution=[hash[i_item_sk, w_warehouse_sk]])
            +- Calc(select=[w_warehouse_sk, i_item_sk, CAST(($f4 / $f5) AS INTEGER) AS mean, CASE((CAST(($f4 / $f5) AS INTEGER) = 0), null:INTEGER, (CAST(POWER((($f3 - (($f4 * $f4) / $f5)) / CASE(($f5 = 1), null:BIGINT, ($f5 - 1))), 0.5) AS INTEGER) / CAST(($f4 / $f5) AS INTEGER))) AS cov], where=[(CASE((CAST(($f4 / $f5) AS INTEGER) = 0), false, ((CAST(POWER((($f3 - (($f4 * $f4) / $f5)) / CASE(($f5 = 1), null:BIGINT, ($f5 - 1))), 0.5) AS INTEGER) / CAST(($f4 / $f5) AS INTEGER)) > 1)) AND CASE((CAST(($f4 / $f5) AS INTEGER) = 0), false, ((CAST(POWER((($f3 - (($f4 * $f4) / $f5)) / CASE(($f5 = 1), null:BIGINT, ($f5 - 1))), 0.5) AS INTEGER) / CAST(($f4 / $f5) AS INTEGER)) > 1.5)))])
               +- HashAggregate(isMerge=[false], groupBy=[w_warehouse_sk, i_item_sk, d_moy], select=[w_warehouse_sk, i_item_sk, d_moy, SUM($f5) AS $f3, SUM(inv_quantity_on_hand) AS $f4, COUNT(inv_quantity_on_hand) AS $f5])
                  +- Exchange(distribution=[hash[w_warehouse_sk, i_item_sk, d_moy]])
                     +- Calc(select=[w_warehouse_sk, i_item_sk, CAST(4 AS INTEGER) AS d_moy, inv_quantity_on_hand, (inv_quantity_on_hand * inv_quantity_on_hand) AS $f5])
                        +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(inv_item_sk = i_item_sk)], select=[inv_item_sk, inv_quantity_on_hand, w_warehouse_sk, i_item_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[inv_item_sk, inv_quantity_on_hand, w_warehouse_sk])\n:  +- HashJoin(joinType=[InnerJoin], where=[(inv_warehouse_sk = w_warehouse_sk)], select=[inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand, w_warehouse_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(inv_date_sk = d_date_sk)], select=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand, d_date_sk], isBroadcast=[true], build=[right])\n:     :     :- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, inventory]], fields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                           :- Exchange(distribution=[broadcast])
                           :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk]]], fields=[i_item_sk])
                           :- Exchange(distribution=[broadcast])
                           :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, warehouse, project=[w_warehouse_sk]]], fields=[w_warehouse_sk])
                           :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, inventory]], fields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])
                           +- Exchange(distribution=[broadcast])
                              +- Calc(select=[d_date_sk], where=[((d_year = 1999) AND (d_moy = 4))])
                                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q3]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query3.tpl and seed 2031708268
select  dt.d_year 
       ,item.i_brand_id brand_id 
       ,item.i_brand brand
       ,sum(ss_ext_sales_price) sum_agg
 from  date_dim dt 
      ,store_sales
      ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
   and store_sales.ss_item_sk = item.i_item_sk
   and item.i_manufact_id = 436
   and dt.d_moy=12
 group by dt.d_year
      ,item.i_brand
      ,item.i_brand_id
 order by dt.d_year
         ,sum_agg desc
         ,brand_id
 limit 100

-- end query 1 in stream 0 using template query3.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$3], sort2=[$1], dir0=[ASC-nulls-first], dir1=[DESC-nulls-last], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalProject(d_year=[$0], brand_id=[$2], brand=[$1], sum_agg=[$3])
   +- LogicalAggregate(group=[{0, 1, 2}], sum_agg=[SUM($3)])
      +- LogicalProject(d_year=[$6], brand=[$59], brand_id=[$58], ss_ext_sales_price=[$43])
         +- LogicalFilter(condition=[AND(=($0, $28), =($30, $51), =($64, 436), =($8, 12))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
               :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
               +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[d_year, brand_id, brand, sum_agg])
+- SortLimit(orderBy=[d_year ASC, sum_agg DESC, brand_id ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[d_year ASC, sum_agg DESC, brand_id ASC], offset=[0], fetch=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[d_year, brand, brand_id], select=[d_year, brand, brand_id, Final_SUM(sum$0) AS sum_agg])
            +- Exchange(distribution=[hash[d_year, brand, brand_id]])
               +- LocalHashAggregate(groupBy=[d_year, brand, brand_id], select=[d_year, brand, brand_id, Partial_SUM(ss_ext_sales_price) AS sum$0])
                  +- Calc(select=[d_year, i_brand AS brand, i_brand_id AS brand_id, ss_ext_sales_price])
                     +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(d_date_sk = ss_sold_date_sk)], select=[ss_sold_date_sk, ss_ext_sales_price, i_brand_id, i_brand, d_date_sk, d_year], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_ext_sales_price, i_brand_id, i_brand])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price, i_item_sk, i_brand_id, i_brand], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price], where=[ss_sold_date_sk IS NOT NULL])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :- Exchange(distribution=[broadcast])
                        :  +- Calc(select=[d_date_sk, d_year], where=[(d_moy = 12)])
                        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                        :- Exchange(distribution=[broadcast])
                        :  +- Calc(select=[i_item_sk, i_brand_id, i_brand], where=[(i_manufact_id = 436)])
                        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_brand, i_manufact_id]]], fields=[i_item_sk, i_brand_id, i_brand, i_manufact_id])
                        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q40]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query40.tpl and seed 1819994127
select  
   w_state
  ,i_item_id
  ,sum(case when (cast(d_date as date) < cast ('1998-04-08' as date)) 
 		then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_before
  ,sum(case when (cast(d_date as date) >= cast ('1998-04-08' as date)) 
 		then cs_sales_price - coalesce(cr_refunded_cash,0) else 0 end) as sales_after
 from
   catalog_sales left outer join catalog_returns on
       (cs_order_number = cr_order_number 
        and cs_item_sk = cr_item_sk)
  ,warehouse 
  ,item
  ,date_dim
 where
     i_current_price between 0.99 and 1.49
 and i_item_sk          = cs_item_sk
 and cs_warehouse_sk    = w_warehouse_sk 
 and cs_sold_date_sk    = d_date_sk
 and d_date between (cast ('1998-04-08' as date) - interval '30' day)
                and (cast ('1998-04-08' as date) + interval '30' day) 
 group by
    w_state,i_item_id
 order by w_state,i_item_id
limit 100

-- end query 1 in stream 0 using template query40.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1}], sales_before=[SUM($2)], sales_after=[SUM($3)])
   +- LogicalProject(w_state=[$71], i_item_id=[$76], $f2=[CASE(<($99, 1998-04-08), -($21, coalesce($57, 0:DOUBLE)), 0:DOUBLE)], $f3=[CASE(>=($99, 1998-04-08), -($21, coalesce($57, 0:DOUBLE)), 0:DOUBLE)])
      +- LogicalFilter(condition=[AND(>=($80, 0.99:DECIMAL(3, 2)), <=($80, 1.49:DECIMAL(3, 2)), =($75, $15), =($14, $61), =($0, $97), >=($99, -(CAST(_UTF-16LE'1998-04-08'):DATE NOT NULL, 2592000000:INTERVAL DAY)), <=($99, +(CAST(_UTF-16LE'1998-04-08'):DATE NOT NULL, 2592000000:INTERVAL DAY)))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[AND(=($17, $50), =($15, $36))], joinType=[left])
            :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
            :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, warehouse]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[w_state ASC, i_item_id ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[w_state ASC, i_item_id ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[w_state, i_item_id], select=[w_state, i_item_id, Final_SUM(sum$0) AS sales_before, Final_SUM(sum$1) AS sales_after])
         +- Exchange(distribution=[hash[w_state, i_item_id]])
            +- LocalHashAggregate(groupBy=[w_state, i_item_id], select=[w_state, i_item_id, Partial_SUM($f2) AS sum$0, Partial_SUM($f3) AS sum$1])
               +- Calc(select=[w_state, i_item_id, CASE((d_date < 1998-04-08), (cs_sales_price - coalesce(cr_refunded_cash, 0)), 0) AS $f2, CASE((d_date >= 1998-04-08), (cs_sales_price - coalesce(cr_refunded_cash, 0)), 0) AS $f3])
                  +- MultipleInput(readOrder=[0,0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_warehouse_sk = w_warehouse_sk)], select=[cs_warehouse_sk, cs_sales_price, cr_refunded_cash, i_item_id, d_date, w_warehouse_sk, w_state], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_warehouse_sk, cs_sales_price, cr_refunded_cash, i_item_id, d_date])\n:  +- HashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_warehouse_sk, cs_sales_price, cr_refunded_cash, i_item_id, d_date_sk, d_date], isBroadcast=[true], build=[right])\n:     :- Calc(select=[cs_sold_date_sk, cs_warehouse_sk, cs_sales_price, cr_refunded_cash, i_item_id])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(i_item_sk = cs_item_sk)], select=[cs_sold_date_sk, cs_warehouse_sk, cs_item_sk, cs_sales_price, cr_refunded_cash, i_item_sk, i_item_id], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[cs_sold_date_sk, cs_warehouse_sk, cs_item_sk, cs_sales_price, cr_refunded_cash])\n:     :     :  +- HashJoin(joinType=[LeftOuterJoin], where=[((cs_order_number = cr_order_number) AND (cs_item_sk = cr_item_sk))], select=[cs_sold_date_sk, cs_warehouse_sk, cs_item_sk, cs_order_number, cs_sales_price, cr_item_sk, cr_order_number, cr_refunded_cash], build=[right])\n:     :     :     :- [#4] Exchange(distribution=[hash[cs_item_sk]])\n:     :     :     +- [#5] Exchange(distribution=[hash[cr_item_sk]])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :- Exchange(distribution=[broadcast])
                     :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, warehouse, project=[w_warehouse_sk, w_state]]], fields=[w_warehouse_sk, w_state])
                     :- Exchange(distribution=[broadcast])
                     :  +- Calc(select=[d_date_sk, d_date], where=[SEARCH(d_date, Sarg[[1998-03-09..1998-05-08]])])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
                     :- Exchange(distribution=[broadcast])
                     :  +- Calc(select=[i_item_sk, i_item_id], where=[SEARCH(i_current_price, Sarg[[0.99..1.49]])])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id, i_current_price]]], fields=[i_item_sk, i_item_id, i_current_price])
                     :- Exchange(distribution=[hash[cs_item_sk]])
                     :  +- Calc(select=[cs_sold_date_sk, cs_warehouse_sk, cs_item_sk, cs_order_number, cs_sales_price], where=[cs_warehouse_sk IS NOT NULL])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_warehouse_sk, cs_item_sk, cs_order_number, cs_sales_price]]], fields=[cs_sold_date_sk, cs_warehouse_sk, cs_item_sk, cs_order_number, cs_sales_price])
                     +- Exchange(distribution=[hash[cr_item_sk]])
                        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns, project=[cr_item_sk, cr_order_number, cr_refunded_cash]]], fields=[cr_item_sk, cr_order_number, cr_refunded_cash])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q41]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query41.tpl and seed 1581015815
select  distinct(i_product_name)
 from item i1
 where i_manufact_id between 742 and 742+40 
   and (select count(*) as item_cnt
        from item
        where (i_manufact = i1.i_manufact and
        ((i_category = 'Women' and 
        (i_color = 'orchid' or i_color = 'papaya') and 
        (i_units = 'Pound' or i_units = 'Lb') and
        (i_size = 'petite' or i_size = 'medium')
        ) or
        (i_category = 'Women' and
        (i_color = 'burlywood' or i_color = 'navy') and
        (i_units = 'Bundle' or i_units = 'Each') and
        (i_size = 'N/A' or i_size = 'extra large')
        ) or
        (i_category = 'Men' and
        (i_color = 'bisque' or i_color = 'azure') and
        (i_units = 'N/A' or i_units = 'Tsp') and
        (i_size = 'small' or i_size = 'large')
        ) or
        (i_category = 'Men' and
        (i_color = 'chocolate' or i_color = 'cornflower') and
        (i_units = 'Bunch' or i_units = 'Gross') and
        (i_size = 'petite' or i_size = 'medium')
        ))) or
       (i_manufact = i1.i_manufact and
        ((i_category = 'Women' and 
        (i_color = 'salmon' or i_color = 'midnight') and 
        (i_units = 'Oz' or i_units = 'Box') and
        (i_size = 'petite' or i_size = 'medium')
        ) or
        (i_category = 'Women' and
        (i_color = 'snow' or i_color = 'steel') and
        (i_units = 'Carton' or i_units = 'Tbl') and
        (i_size = 'N/A' or i_size = 'extra large')
        ) or
        (i_category = 'Men' and
        (i_color = 'purple' or i_color = 'gainsboro') and
        (i_units = 'Dram' or i_units = 'Unknown') and
        (i_size = 'small' or i_size = 'large')
        ) or
        (i_category = 'Men' and
        (i_color = 'metallic' or i_color = 'forest') and
        (i_units = 'Gram' or i_units = 'Ounce') and
        (i_size = 'petite' or i_size = 'medium')
        )))) > 0
 order by i_product_name
 limit 100

-- end query 1 in stream 0 using template query41.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}])
   +- LogicalProject(i_product_name=[$21])
      +- LogicalFilter(condition=[AND(>=($13, 742), <=($13, +(742, 40)), >($SCALAR_QUERY({
LogicalAggregate(group=[{}], item_cnt=[COUNT()])
  LogicalProject($f0=[0])
    LogicalFilter(condition=[OR(AND(=($14, $cor0.i_manufact), OR(AND(=($12, _UTF-16LE'Women'), OR(=($17, _UTF-16LE'orchid'), =($17, _UTF-16LE'papaya')), OR(=($18, _UTF-16LE'Pound'), =($18, _UTF-16LE'Lb')), OR(=($15, _UTF-16LE'petite'), =($15, _UTF-16LE'medium'))), AND(=($12, _UTF-16LE'Women'), OR(=($17, _UTF-16LE'burlywood'), =($17, _UTF-16LE'navy')), OR(=($18, _UTF-16LE'Bundle'), =($18, _UTF-16LE'Each')), OR(=($15, _UTF-16LE'N/A'), =($15, _UTF-16LE'extra large'))), AND(=($12, _UTF-16LE'Men'), OR(=($17, _UTF-16LE'bisque'), =($17, _UTF-16LE'azure')), OR(=($18, _UTF-16LE'N/A'), =($18, _UTF-16LE'Tsp')), OR(=($15, _UTF-16LE'small'), =($15, _UTF-16LE'large'))), AND(=($12, _UTF-16LE'Men'), OR(=($17, _UTF-16LE'chocolate'), =($17, _UTF-16LE'cornflower')), OR(=($18, _UTF-16LE'Bunch'), =($18, _UTF-16LE'Gross')), OR(=($15, _UTF-16LE'petite'), =($15, _UTF-16LE'medium'))))), AND(=($14, $cor0.i_manufact), OR(AND(=($12, _UTF-16LE'Women'), OR(=($17, _UTF-16LE'salmon'), =($17, _UTF-16LE'midnight')), OR(=($18, _UTF-16LE'Oz'), =($18, _UTF-16LE'Box')), OR(=($15, _UTF-16LE'petite'), =($15, _UTF-16LE'medium'))), AND(=($12, _UTF-16LE'Women'), OR(=($17, _UTF-16LE'snow'), =($17, _UTF-16LE'steel')), OR(=($18, _UTF-16LE'Carton'), =($18, _UTF-16LE'Tbl')), OR(=($15, _UTF-16LE'N/A'), =($15, _UTF-16LE'extra large'))), AND(=($12, _UTF-16LE'Men'), OR(=($17, _UTF-16LE'purple'), =($17, _UTF-16LE'gainsboro')), OR(=($18, _UTF-16LE'Dram'), =($18, _UTF-16LE'Unknown')), OR(=($15, _UTF-16LE'small'), =($15, _UTF-16LE'large'))), AND(=($12, _UTF-16LE'Men'), OR(=($17, _UTF-16LE'metallic'), =($17, _UTF-16LE'forest')), OR(=($18, _UTF-16LE'Gram'), =($18, _UTF-16LE'Ounce')), OR(=($15, _UTF-16LE'petite'), =($15, _UTF-16LE'medium'))))))])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
}), 0))], variablesSet=[[$cor0]])
         +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[i_product_name ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_product_name ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[false], groupBy=[i_product_name], select=[i_product_name])
         +- Exchange(distribution=[hash[i_product_name]])
            +- Calc(select=[i_product_name])
               +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[LeftSemiJoin], where=[(i_manufact0 = i_manufact)], select=[i_manufact, i_product_name], isBroadcast=[true], build=[right])\n:- Calc(select=[i_manufact, i_product_name], where=[SEARCH(i_manufact_id, Sarg[[742..782]])])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_manufact_id, i_manufact, i_product_name]]], fields=[i_manufact_id, i_manufact, i_product_name])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :- Exchange(distribution=[broadcast])
                  :  +- Calc(select=[i_manufact], where=[((SEARCH(i_category, Sarg[_UTF-16LE'Women']) AND SEARCH(i_color, Sarg[_UTF-16LE'orchid', _UTF-16LE'papaya']) AND SEARCH(i_units, Sarg[_UTF-16LE'Lb', _UTF-16LE'Pound']) AND SEARCH(i_size, Sarg[_UTF-16LE'medium', _UTF-16LE'petite'])) OR (SEARCH(i_category, Sarg[_UTF-16LE'Women']) AND SEARCH(i_color, Sarg[_UTF-16LE'burlywood', _UTF-16LE'navy']) AND SEARCH(i_units, Sarg[_UTF-16LE'Bundle', _UTF-16LE'Each']) AND SEARCH(i_size, Sarg[_UTF-16LE'N/A', _UTF-16LE'extra large'])) OR (SEARCH(i_category, Sarg[_UTF-16LE'Men']) AND SEARCH(i_color, Sarg[_UTF-16LE'azure', _UTF-16LE'bisque']) AND SEARCH(i_units, Sarg[_UTF-16LE'N/A', _UTF-16LE'Tsp']) AND SEARCH(i_size, Sarg[_UTF-16LE'large', _UTF-16LE'small'])) OR (SEARCH(i_category, Sarg[_UTF-16LE'Men']) AND SEARCH(i_color, Sarg[_UTF-16LE'chocolate', _UTF-16LE'cornflower']) AND SEARCH(i_units, Sarg[_UTF-16LE'Bunch', _UTF-16LE'Gross']) AND SEARCH(i_size, Sarg[_UTF-16LE'medium', _UTF-16LE'petite'])) OR (SEARCH(i_category, Sarg[_UTF-16LE'Women']) AND SEARCH(i_color, Sarg[_UTF-16LE'midnight', _UTF-16LE'salmon']) AND SEARCH(i_units, Sarg[_UTF-16LE'Box', _UTF-16LE'Oz']) AND SEARCH(i_size, Sarg[_UTF-16LE'medium', _UTF-16LE'petite'])) OR (SEARCH(i_category, Sarg[_UTF-16LE'Women']) AND SEARCH(i_color, Sarg[_UTF-16LE'snow', _UTF-16LE'steel']) AND SEARCH(i_units, Sarg[_UTF-16LE'Carton', _UTF-16LE'Tbl']) AND SEARCH(i_size, Sarg[_UTF-16LE'N/A', _UTF-16LE'extra large'])) OR (SEARCH(i_category, Sarg[_UTF-16LE'Men']) AND SEARCH(i_color, Sarg[_UTF-16LE'gainsboro', _UTF-16LE'purple']) AND SEARCH(i_units, Sarg[_UTF-16LE'Dram', _UTF-16LE'Unknown']) AND SEARCH(i_size, Sarg[_UTF-16LE'large', _UTF-16LE'small'])) OR (SEARCH(i_category, Sarg[_UTF-16LE'Men']) AND SEARCH(i_color, Sarg[_UTF-16LE'forest', _UTF-16LE'metallic']) AND SEARCH(i_units, Sarg[_UTF-16LE'Gram', _UTF-16LE'Ounce']) AND SEARCH(i_size, Sarg[_UTF-16LE'medium', _UTF-16LE'petite'])))])
                  :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_category, i_manufact, i_size, i_color, i_units]]], fields=[i_category, i_manufact, i_size, i_color, i_units])
                  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_manufact_id, i_manufact, i_product_name]]], fields=[i_manufact_id, i_manufact, i_product_name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q42]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query42.tpl and seed 1819994127
select  dt.d_year
 	,item.i_category_id
 	,item.i_category
 	,sum(ss_ext_sales_price)
 from 	date_dim dt
 	,store_sales
 	,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
 	and store_sales.ss_item_sk = item.i_item_sk
 	and item.i_manager_id = 1  	
 	and dt.d_moy=12
 	and dt.d_year=1998
 group by 	dt.d_year
 		,item.i_category_id
 		,item.i_category
 order by       sum(ss_ext_sales_price) desc,dt.d_year
 		,item.i_category_id
 		,item.i_category
limit 100 

-- end query 1 in stream 0 using template query42.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$3], sort1=[$0], sort2=[$1], sort3=[$2], dir0=[DESC-nulls-last], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2}], EXPR$3=[SUM($3)])
   +- LogicalProject(d_year=[$6], i_category_id=[$62], i_category=[$63], ss_ext_sales_price=[$43])
      +- LogicalFilter(condition=[AND(=($0, $28), =($30, $51), =($71, 1), =($8, 12), =($6, 1998))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[EXPR$3 DESC, d_year ASC, i_category_id ASC, i_category ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[EXPR$3 DESC, d_year ASC, i_category_id ASC, i_category ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[d_year, i_category_id, i_category], select=[d_year, i_category_id, i_category, Final_SUM(sum$0) AS EXPR$3])
         +- Exchange(distribution=[hash[d_year, i_category_id, i_category]])
            +- LocalHashAggregate(groupBy=[d_year, i_category_id, i_category], select=[d_year, i_category_id, i_category, Partial_SUM(ss_ext_sales_price) AS sum$0])
               +- Calc(select=[CAST(1998 AS INTEGER) AS d_year, i_category_id, i_category, ss_ext_sales_price])
                  +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(d_date_sk = ss_sold_date_sk)], select=[ss_sold_date_sk, ss_ext_sales_price, i_category_id, i_category, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_ext_sales_price, i_category_id, i_category])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price, i_item_sk, i_category_id, i_category], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price], where=[ss_sold_date_sk IS NOT NULL])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :- Exchange(distribution=[broadcast])
                     :  +- Calc(select=[d_date_sk], where=[((d_moy = 12) AND (d_year = 1998))])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                     :- Exchange(distribution=[broadcast])
                     :  +- Calc(select=[i_item_sk, i_category_id, i_category], where=[(i_manager_id = 1)])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_category_id, i_category, i_manager_id]]], fields=[i_item_sk, i_category_id, i_category, i_manager_id])
                     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q43]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query43.tpl and seed 1819994127
select  s_store_name, s_store_id,
        sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then ss_sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales
 from date_dim, store_sales, store
 where d_date_sk = ss_sold_date_sk and
       s_store_sk = ss_store_sk and
       s_gmt_offset = -6 and
       d_year = 1998 
 group by s_store_name, s_store_id
 order by s_store_name, s_store_id,sun_sales,mon_sales,tue_sales,wed_sales,thu_sales,fri_sales,sat_sales
 limit 100

-- end query 1 in stream 0 using template query43.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], sort5=[$5], sort6=[$6], sort7=[$7], sort8=[$8], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first], dir8=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1}], sun_sales=[SUM($2)], mon_sales=[SUM($3)], tue_sales=[SUM($4)], wed_sales=[SUM($5)], thu_sales=[SUM($6)], fri_sales=[SUM($7)], sat_sales=[SUM($8)])
   +- LogicalProject(s_store_name=[$56], s_store_id=[$52], $f2=[CASE(=($14, _UTF-16LE'Sunday'), $41, null:DOUBLE)], $f3=[CASE(=($14, _UTF-16LE'Monday'), $41, null:DOUBLE)], $f4=[CASE(=($14, _UTF-16LE'Tuesday'), $41, null:DOUBLE)], $f5=[CASE(=($14, _UTF-16LE'Wednesday'), $41, null:DOUBLE)], $f6=[CASE(=($14, _UTF-16LE'Thursday'), $41, null:DOUBLE)], $f7=[CASE(=($14, _UTF-16LE'Friday'), $41, null:DOUBLE)], $f8=[CASE(=($14, _UTF-16LE'Saturday'), $41, null:DOUBLE)])
      +- LogicalFilter(condition=[AND(=($0, $28), =($51, $35), =($78, -6), =($6, 1998))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[s_store_name ASC, s_store_id ASC, sun_sales ASC, mon_sales ASC, tue_sales ASC, wed_sales ASC, thu_sales ASC, fri_sales ASC, sat_sales ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[s_store_name ASC, s_store_id ASC, sun_sales ASC, mon_sales ASC, tue_sales ASC, wed_sales ASC, thu_sales ASC, fri_sales ASC, sat_sales ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[s_store_name, s_store_id], select=[s_store_name, s_store_id, Final_SUM(sum$0) AS sun_sales, Final_SUM(sum$1) AS mon_sales, Final_SUM(sum$2) AS tue_sales, Final_SUM(sum$3) AS wed_sales, Final_SUM(sum$4) AS thu_sales, Final_SUM(sum$5) AS fri_sales, Final_SUM(sum$6) AS sat_sales])
         +- Exchange(distribution=[hash[s_store_name, s_store_id]])
            +- LocalHashAggregate(groupBy=[s_store_name, s_store_id], select=[s_store_name, s_store_id, Partial_SUM($f2) AS sum$0, Partial_SUM($f3) AS sum$1, Partial_SUM($f4) AS sum$2, Partial_SUM($f5) AS sum$3, Partial_SUM($f6) AS sum$4, Partial_SUM($f7) AS sum$5, Partial_SUM($f8) AS sum$6])
               +- Calc(select=[s_store_name, s_store_id, CASE((d_day_name = 'Sunday'), ss_sales_price, null:DOUBLE) AS $f2, CASE((d_day_name = 'Monday'), ss_sales_price, null:DOUBLE) AS $f3, CASE((d_day_name = 'Tuesday'), ss_sales_price, null:DOUBLE) AS $f4, CASE((d_day_name = 'Wednesday'), ss_sales_price, null:DOUBLE) AS $f5, CASE((d_day_name = 'Thursday'), ss_sales_price, null:DOUBLE) AS $f6, CASE((d_day_name = 'Friday'), ss_sales_price, null:DOUBLE) AS $f7, CASE((d_day_name = 'Saturday'), ss_sales_price, null:DOUBLE) AS $f8])
                  +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(s_store_sk = ss_store_sk)], select=[ss_store_sk, ss_sales_price, d_day_name, s_store_sk, s_store_id, s_store_name], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk, ss_sales_price, d_day_name])\n:  +- HashJoin(joinType=[InnerJoin], where=[(d_date_sk = ss_sold_date_sk)], select=[ss_sold_date_sk, ss_store_sk, ss_sales_price, d_date_sk, d_day_name], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_sales_price], where=[ss_sold_date_sk IS NOT NULL])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_store_sk, ss_sales_price]]], fields=[ss_sold_date_sk, ss_store_sk, ss_sales_price])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :- Exchange(distribution=[broadcast])
                     :  +- Calc(select=[s_store_sk, s_store_id, s_store_name], where=[(s_gmt_offset = -6)])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_store_id, s_store_name, s_gmt_offset]]], fields=[s_store_sk, s_store_id, s_store_name, s_gmt_offset])
                     :- Exchange(distribution=[broadcast])
                     :  +- Calc(select=[d_date_sk, d_day_name], where=[(d_year = 1998)])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_day_name]]], fields=[d_date_sk, d_year, d_day_name])
                     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_store_sk, ss_sales_price]]], fields=[ss_sold_date_sk, ss_store_sk, ss_sales_price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q44]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query44.tpl and seed 1819994127
select  asceding.rnk, i1.i_product_name best_performing, i2.i_product_name worst_performing
from(select *
     from (select item_sk,rank() over (order by rank_col asc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col 
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V1)V11
     where rnk  < 11) asceding,
    (select *
     from (select item_sk,rank() over (order by rank_col desc) rnk
           from (select ss_item_sk item_sk,avg(ss_net_profit) rank_col
                 from store_sales ss1
                 where ss_store_sk = 410
                 group by ss_item_sk
                 having avg(ss_net_profit) > 0.9*(select avg(ss_net_profit) rank_col
                                                  from store_sales
                                                  where ss_store_sk = 410
                                                    and ss_hdemo_sk is null
                                                  group by ss_store_sk))V2)V21
     where rnk  < 11) descending,
item i1,
item i2
where asceding.rnk = descending.rnk 
  and i1.i_item_sk=asceding.item_sk
  and i2.i_item_sk=descending.item_sk
order by asceding.rnk
limit 100

-- end query 1 in stream 0 using template query44.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalProject(rnk=[$1], best_performing=[$25], worst_performing=[$47])
   +- LogicalFilter(condition=[AND(=($1, $3), =($4, $0), =($26, $2))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :- LogicalProject(item_sk=[$0], rnk=[$1])
         :  :  :  +- LogicalFilter(condition=[<($1, 11)])
         :  :  :     +- LogicalProject(item_sk=[$0], rnk=[RANK() OVER (ORDER BY $1 NULLS FIRST)])
         :  :  :        +- LogicalFilter(condition=[>($1, *(0.9:DECIMAL(2, 1), $SCALAR_QUERY({
LogicalProject(rank_col=[$1])
  LogicalAggregate(group=[{0}], rank_col=[AVG($1)])
    LogicalProject(ss_store_sk=[$7], ss_net_profit=[$22])
      LogicalFilter(condition=[AND(=($7, 410), IS NULL($5))])
        LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
})))])
         :  :  :           +- LogicalAggregate(group=[{0}], rank_col=[AVG($1)])
         :  :  :              +- LogicalProject(item_sk=[$2], ss_net_profit=[$22])
         :  :  :                 +- LogicalFilter(condition=[=($7, 410)])
         :  :  :                    +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :  :  +- LogicalProject(item_sk=[$0], rnk=[$1])
         :  :     +- LogicalFilter(condition=[<($1, 11)])
         :  :        +- LogicalProject(item_sk=[$0], rnk=[RANK() OVER (ORDER BY $1 DESC NULLS LAST)])
         :  :           +- LogicalFilter(condition=[>($1, *(0.9:DECIMAL(2, 1), $SCALAR_QUERY({
LogicalProject(rank_col=[$1])
  LogicalAggregate(group=[{0}], rank_col=[AVG($1)])
    LogicalProject(ss_store_sk=[$7], ss_net_profit=[$22])
      LogicalFilter(condition=[AND(=($7, 410), IS NULL($5))])
        LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
})))])
         :  :              +- LogicalAggregate(group=[{0}], rank_col=[AVG($1)])
         :  :                 +- LogicalProject(item_sk=[$2], ss_net_profit=[$22])
         :  :                    +- LogicalFilter(condition=[=($7, 410)])
         :  :                       +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
         +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[rnk ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[rnk ASC], offset=[0], fetch=[100], global=[false])
      +- Calc(select=[rnk, i_product_name0 AS best_performing, i_product_name AS worst_performing])
         +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(i_item_sk = item_sk0)], select=[i_item_sk, i_product_name, i_product_name0, rnk, item_sk0], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_product_name]]], fields=[i_item_sk, i_product_name])\n+- [#2] Exchange(distribution=[broadcast])\n])
            :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_product_name]]], fields=[i_item_sk, i_product_name])
            +- Exchange(distribution=[broadcast])
               +- Calc(select=[i_product_name, rnk, item_sk0])
                  +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(i_item_sk = item_sk)], select=[i_item_sk, i_product_name, item_sk, rnk, item_sk0], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_product_name]]], fields=[i_item_sk, i_product_name])\n+- [#2] Exchange(distribution=[broadcast])\n])
                     :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_product_name]]], fields=[i_item_sk, i_product_name])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[item_sk, w0$o0 AS rnk, item_sk0])
                           +- NestedLoopJoin(joinType=[InnerJoin], where=[(w0$o0 = w0$o00)], select=[item_sk, w0$o0, item_sk0, w0$o00], build=[left])
                              :- Exchange(distribution=[broadcast])
                              :  +- Calc(select=[item_sk, w0$o0])
                              :     +- Rank(rankType=[RANK], rankRange=[rankStart=1, rankEnd=10], partitionBy=[], orderBy=[rank_col ASC], global=[true], select=[item_sk, rank_col, w0$o0])
                              :        +- Sort(orderBy=[rank_col ASC])
                              :           +- Exchange(distribution=[single])
                              :              +- Rank(rankType=[RANK], rankRange=[rankStart=1, rankEnd=10], partitionBy=[], orderBy=[rank_col ASC], global=[false], select=[item_sk, rank_col])
                              :                 +- Sort(orderBy=[rank_col ASC])
                              :                    +- Calc(select=[item_sk, rank_col])(reuse_id=[1])
                              :                       +- MultipleInput(readOrder=[0,1], members=[\nNestedLoopJoin(joinType=[InnerJoin], where=[(rank_col > (0.9 * $f0))], select=[item_sk, rank_col, $f0], build=[right], singleRowJoin=[true])\n:- HashAggregate(isMerge=[true], groupBy=[item_sk], select=[item_sk, Final_AVG(sum$0, count$1) AS rank_col])\n:  +- [#2] Exchange(distribution=[hash[item_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                              :                          :- Exchange(distribution=[broadcast])
                              :                          :  +- HashAggregate(isMerge=[false], select=[SINGLE_VALUE(rank_col) AS $f0])
                              :                          :     +- Exchange(distribution=[single])
                              :                          :        +- Calc(select=[rank_col])
                              :                          :           +- HashAggregate(isMerge=[true], groupBy=[ss_store_sk], select=[ss_store_sk, Final_AVG(sum$0, count$1) AS rank_col])
                              :                          :              +- Exchange(distribution=[hash[ss_store_sk]])
                              :                          :                 +- LocalHashAggregate(groupBy=[ss_store_sk], select=[ss_store_sk, Partial_AVG(ss_net_profit) AS (sum$0, count$1)])
                              :                          :                    +- Calc(select=[CAST(410 AS BIGINT) AS ss_store_sk, ss_net_profit], where=[((ss_store_sk = 410) AND ss_hdemo_sk IS NULL)])
                              :                          :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_hdemo_sk, ss_store_sk, ss_net_profit]]], fields=[ss_hdemo_sk, ss_store_sk, ss_net_profit])
                              :                          +- Exchange(distribution=[hash[item_sk]])
                              :                             +- LocalHashAggregate(groupBy=[item_sk], select=[item_sk, Partial_AVG(ss_net_profit) AS (sum$0, count$1)])
                              :                                +- Calc(select=[ss_item_sk AS item_sk, ss_net_profit], where=[(ss_store_sk = 410)])
                              :                                   +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_item_sk, ss_store_sk, ss_net_profit]]], fields=[ss_item_sk, ss_store_sk, ss_net_profit])
                              +- Exchange(distribution=[any])
                                 +- Calc(select=[item_sk, w0$o0])
                                    +- Rank(rankType=[RANK], rankRange=[rankStart=1, rankEnd=10], partitionBy=[], orderBy=[rank_col DESC], global=[true], select=[item_sk, rank_col, w0$o0])
                                       +- Sort(orderBy=[rank_col DESC])
                                          +- Exchange(distribution=[single])
                                             +- Rank(rankType=[RANK], rankRange=[rankStart=1, rankEnd=10], partitionBy=[], orderBy=[rank_col DESC], global=[false], select=[item_sk, rank_col])
                                                +- Sort(orderBy=[rank_col DESC])
                                                   +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q45]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query45.tpl and seed 2031708268
select ca_zip, ca_county, sum(ws_sales_price)
 from web_sales, customer, customer_address, date_dim, item
 where ws_bill_customer_sk = c_customer_sk
 	and c_current_addr_sk = ca_address_sk 
 	and ws_item_sk = i_item_sk 
 	and ( substr(ca_zip,1,5) in ('85669', '86197','88274','83405','86475', '85392', '85460', '80348', '81792')
 	      or 
 	      i_item_id in (select i_item_id
                             from item
                             where i_item_sk in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29)
                             )
 	    )
 	and ws_sold_date_sk = d_date_sk
 	and d_qoy = 2 and d_year = 2000
 group by ca_zip, ca_county
 order by ca_zip, ca_county
 limit 100

-- end query 1 in stream 0 using template query45.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1}], EXPR$2=[SUM($2)])
   +- LogicalProject(ca_zip=[$61], ca_county=[$59], ws_sales_price=[$21])
      +- LogicalFilter(condition=[AND(=($4, $34), =($38, $52), =($3, $93), OR(=(SUBSTR($61, 1, 5), _UTF-16LE'85669'), =(SUBSTR($61, 1, 5), _UTF-16LE'86197'), =(SUBSTR($61, 1, 5), _UTF-16LE'88274'), =(SUBSTR($61, 1, 5), _UTF-16LE'83405'), =(SUBSTR($61, 1, 5), _UTF-16LE'86475'), =(SUBSTR($61, 1, 5), _UTF-16LE'85392'), =(SUBSTR($61, 1, 5), _UTF-16LE'85460'), =(SUBSTR($61, 1, 5), _UTF-16LE'80348'), =(SUBSTR($61, 1, 5), _UTF-16LE'81792'), IN($94, {
LogicalProject(i_item_id=[$1])
  LogicalFilter(condition=[OR(=($0, 2), =($0, 3), =($0, 5), =($0, 7), =($0, 11), =($0, 13), =($0, 17), =($0, 19), =($0, 23), =($0, 29))])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
})), =($0, $65), =($75, 2), =($71, 2000))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
            :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[ca_zip ASC, ca_county ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[ca_zip ASC, ca_county ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[false], groupBy=[ca_zip, ca_county], select=[ca_zip, ca_county, SUM(ws_sales_price) AS EXPR$2])
         +- Exchange(distribution=[hash[ca_zip, ca_county]])
            +- Calc(select=[ca_zip, ca_county, ws_sales_price])
               +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[((ws_item_sk = i_item_sk) AND (i IS NOT NULL OR SEARCH(SUBSTR(ca_zip, 1, 5), Sarg[_UTF-16LE'80348', _UTF-16LE'81792', _UTF-16LE'83405', _UTF-16LE'85392', _UTF-16LE'85460', _UTF-16LE'85669', _UTF-16LE'86197', _UTF-16LE'86475', _UTF-16LE'88274'])))], select=[ws_item_sk, ws_sales_price, ca_county, ca_zip, i_item_sk, i], isBroadcast=[true], build=[right])\n:- Calc(select=[ws_item_sk, ws_sales_price, ca_county, ca_zip])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ws_bill_customer_sk = c_customer_sk)], select=[ws_item_sk, ws_bill_customer_sk, ws_sales_price, c_customer_sk, ca_county, ca_zip], build=[right])\n:     :- [#2] Exchange(distribution=[hash[ws_bill_customer_sk]])\n:     +- [#3] Exchange(distribution=[hash[c_customer_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :- Exchange(distribution=[broadcast])
                  :  +- Calc(select=[i_item_sk, i])
                  :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[LeftOuterJoin], where=[(i_item_id = i_item_id0)], select=[i_item_sk, i_item_id, i_item_id0, i], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])\n+- [#2] Exchange(distribution=[broadcast])\n])
                  :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])
                  :        +- Exchange(distribution=[broadcast])
                  :           +- Calc(select=[i_item_id, true AS i])
                  :              +- HashAggregate(isMerge=[false], groupBy=[i_item_id], select=[i_item_id])
                  :                 +- Exchange(distribution=[hash[i_item_id]])
                  :                    +- Calc(select=[i_item_id], where=[SEARCH(i_item_sk, Sarg[2, 3, 5, 7, 11, 13, 17, 19, 23, 29])])
                  :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])
                  :- Exchange(distribution=[hash[ws_bill_customer_sk]])
                  :  +- Calc(select=[ws_item_sk, ws_bill_customer_sk, ws_sales_price])
                  :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_sales_price])\n+- [#2] Exchange(distribution=[broadcast])\n])
                  :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_sales_price])
                  :        +- Exchange(distribution=[broadcast])
                  :           +- Calc(select=[d_date_sk], where=[((d_qoy = 2) AND (d_year = 2000))])
                  :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_qoy]]], fields=[d_date_sk, d_year, d_qoy])
                  +- Exchange(distribution=[hash[c_customer_sk]])
                     +- Calc(select=[c_customer_sk, ca_county, ca_zip])
                        +- HashJoin(joinType=[InnerJoin], where=[(c_current_addr_sk = ca_address_sk)], select=[c_customer_sk, c_current_addr_sk, ca_address_sk, ca_county, ca_zip], build=[left])
                           :- Exchange(distribution=[hash[c_current_addr_sk]])
                           :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_current_addr_sk]]], fields=[c_customer_sk, c_current_addr_sk])
                           +- Exchange(distribution=[hash[ca_address_sk]])
                              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_county, ca_zip]]], fields=[ca_address_sk, ca_county, ca_zip])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q46]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query46.tpl and seed 803547492
select  c_last_name
       ,c_first_name
       ,ca_city
       ,bought_city
       ,ss_ticket_number
       ,amt,profit 
 from
   (select ss_ticket_number
          ,ss_customer_sk
          ,ca_city bought_city
          ,sum(ss_coupon_amt) amt
          ,sum(ss_net_profit) profit
    from store_sales,date_dim,store,household_demographics,customer_address 
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and store_sales.ss_addr_sk = customer_address.ca_address_sk
    and (household_demographics.hd_dep_count = 2 or
         household_demographics.hd_vehicle_count= 1)
    and date_dim.d_dow in (6,0)
    and date_dim.d_year in (1998,1998+1,1998+2) 
    and store.s_city in ('Cedar Grove','Wildwood','Union','Salem','Highland Park') 
    group by ss_ticket_number,ss_customer_sk,ss_addr_sk,ca_city) dn,customer,customer_address current_addr
    where ss_customer_sk = c_customer_sk
      and customer.c_current_addr_sk = current_addr.ca_address_sk
      and current_addr.ca_city <> bought_city
  order by c_last_name
          ,c_first_name
          ,ca_city
          ,bought_city
          ,ss_ticket_number
  limit 100

-- end query 1 in stream 0 using template query46.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], fetch=[100])
+- LogicalProject(c_last_name=[$14], c_first_name=[$13], ca_city=[$29], bought_city=[$2], ss_ticket_number=[$0], amt=[$3], profit=[$4])
   +- LogicalFilter(condition=[AND(=($1, $5), =($9, $23), <>($29, $2))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalProject(ss_ticket_number=[$0], ss_customer_sk=[$1], bought_city=[$3], amt=[$4], profit=[$5])
         :  :  +- LogicalAggregate(group=[{0, 1, 2, 3}], amt=[SUM($4)], profit=[SUM($5)])
         :  :     +- LogicalProject(ss_ticket_number=[$9], ss_customer_sk=[$3], ss_addr_sk=[$6], bought_city=[$91], ss_coupon_amt=[$19], ss_net_profit=[$22])
         :  :        +- LogicalFilter(condition=[AND(=($0, $23), =($7, $51), =($5, $80), =($6, $85), OR(=($83, 2), =($84, 1)), OR(=($30, 6), =($30, 0)), OR(=($29, 1998), =($29, +(1998, 1)), =($29, +(1998, 2))), OR(=($73, _UTF-16LE'Cedar Grove'), =($73, _UTF-16LE'Wildwood'), =($73, _UTF-16LE'Union'), =($73, _UTF-16LE'Salem'), =($73, _UTF-16LE'Highland Park')))])
         :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :  :              :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :              :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
         :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
         :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
         :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[c_last_name, c_first_name, ca_city, bought_city, ss_ticket_number, amt, profit])
+- SortLimit(orderBy=[c_last_name ASC, c_first_name ASC, ca_city ASC, bought_city ASC, ss_ticket_number ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[c_last_name ASC, c_first_name ASC, ca_city ASC, bought_city ASC, ss_ticket_number ASC], offset=[0], fetch=[100], global=[false])
         +- HashJoin(joinType=[InnerJoin], where=[((c_current_addr_sk = ca_address_sk) AND (ca_city <> bought_city))], select=[ss_ticket_number, bought_city, amt, profit, c_current_addr_sk, c_first_name, c_last_name, ca_address_sk, ca_city], build=[right])
            :- Exchange(distribution=[hash[c_current_addr_sk]])
            :  +- Calc(select=[ss_ticket_number, bought_city, amt, profit, c_current_addr_sk, c_first_name, c_last_name])
            :     +- HashJoin(joinType=[InnerJoin], where=[(ss_customer_sk = c_customer_sk)], select=[ss_ticket_number, ss_customer_sk, bought_city, amt, profit, c_customer_sk, c_current_addr_sk, c_first_name, c_last_name], build=[right])
            :        :- Exchange(distribution=[hash[ss_customer_sk]])
            :        :  +- Calc(select=[ss_ticket_number, ss_customer_sk, ca_city AS bought_city, amt, profit])
            :        :     +- HashJoin(joinType=[InnerJoin], where=[(ss_addr_sk = ca_address_sk)], select=[ss_customer_sk, ss_addr_sk, ss_ticket_number, amt, profit, ca_address_sk, ca_city], build=[right])
            :        :        :- Exchange(distribution=[hash[ss_addr_sk]])
            :        :        :  +- HashAggregate(isMerge=[false], groupBy=[ss_customer_sk, ss_addr_sk, ss_ticket_number], select=[ss_customer_sk, ss_addr_sk, ss_ticket_number, SUM(ss_coupon_amt) AS amt, SUM(ss_net_profit) AS profit])
            :        :        :     +- Exchange(distribution=[hash[ss_customer_sk, ss_addr_sk, ss_ticket_number]])
            :        :        :        +- Calc(select=[ss_customer_sk, ss_addr_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit])
            :        :        :           +- MultipleInput(readOrder=[0,0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_hdemo_sk = hd_demo_sk)], select=[ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit, hd_demo_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit, s_store_sk], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit], where=[ss_sold_date_sk IS NOT NULL])\n:     :     :  +- [#4] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :        :        :              :- Exchange(distribution=[broadcast])
            :        :        :              :  +- Calc(select=[hd_demo_sk], where=[((hd_dep_count = 2) OR (hd_vehicle_count = 1))])
            :        :        :              :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, household_demographics, project=[hd_demo_sk, hd_dep_count, hd_vehicle_count]]], fields=[hd_demo_sk, hd_dep_count, hd_vehicle_count])
            :        :        :              :- Exchange(distribution=[broadcast])
            :        :        :              :  +- Calc(select=[d_date_sk], where=[(SEARCH(d_dow, Sarg[0, 6]) AND SEARCH(d_year, Sarg[1998, 1999, 2000]))])
            :        :        :              :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_dow]]], fields=[d_date_sk, d_year, d_dow])
            :        :        :              :- Exchange(distribution=[broadcast])
            :        :        :              :  +- Calc(select=[s_store_sk], where=[SEARCH(s_city, Sarg[_UTF-16LE'Cedar Grove', _UTF-16LE'Highland Park', _UTF-16LE'Salem', _UTF-16LE'Union', _UTF-16LE'Wildwood'])])
            :        :        :              :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_city]]], fields=[s_store_sk, s_city])
            :        :        :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit])
            :        :        +- Exchange(distribution=[hash[ca_address_sk]])
            :        :           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_city]]], fields=[ca_address_sk, ca_city])
            :        +- Exchange(distribution=[hash[c_customer_sk]])
            :           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_current_addr_sk, c_first_name, c_last_name]]], fields=[c_customer_sk, c_current_addr_sk, c_first_name, c_last_name])
            +- Exchange(distribution=[hash[ca_address_sk]])
               +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_city]]], fields=[ca_address_sk, ca_city])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q47]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query47.tpl and seed 2031708268
with v1 as(
 select i_category, i_brand,
        s_store_name, s_company_name,
        d_year, d_moy,
        sum(ss_sales_price) sum_sales,
        avg(sum(ss_sales_price)) over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     s_store_name, s_company_name
           order by d_year, d_moy) rn
 from item, store_sales, date_dim, store
 where ss_item_sk = i_item_sk and
       ss_sold_date_sk = d_date_sk and
       ss_store_sk = s_store_sk and
       (
         d_year = 2000 or
         ( d_year = 2000-1 and d_moy =12) or
         ( d_year = 2000+1 and d_moy =1)
       )
 group by i_category, i_brand,
          s_store_name, s_company_name,
          d_year, d_moy),
 v2 as(
 select v1.i_category
        ,v1.d_year, v1.d_moy
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1.s_store_name = v1_lag.s_store_name and
       v1.s_store_name = v1_lead.s_store_name and
       v1.s_company_name = v1_lag.s_company_name and
       v1.s_company_name = v1_lead.s_company_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 2000 and    
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100

-- end query 1 in stream 0 using template query47.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(i_category=[$0], d_year=[$1], d_moy=[$2], avg_monthly_sales=[$3], sum_sales=[$4], psum=[$5], nsum=[$6])
+- LogicalSort(sort0=[$7], sort1=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
   +- LogicalProject(i_category=[$0], d_year=[$1], d_moy=[$2], avg_monthly_sales=[$3], sum_sales=[$4], psum=[$5], nsum=[$6], EXPR$7=[-($4, $3)])
      +- LogicalFilter(condition=[AND(=($1, 2000), >($3, 0), >(CASE(>($3, 0), /(ABS(-($4, $3)), $3), null:DOUBLE), 0.1:DECIMAL(2, 1)))])
         +- LogicalProject(i_category=[$0], d_year=[$4], d_moy=[$5], avg_monthly_sales=[$7], sum_sales=[$6], psum=[$15], nsum=[$24])
            +- LogicalFilter(condition=[AND(=($0, $9), =($0, $18), =($1, $10), =($1, $19), =($2, $11), =($2, $20), =($3, $12), =($3, $21), =($8, +($17, 1)), =($8, -($26, 1)))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalProject(i_category=[$0], i_brand=[$1], s_store_name=[$2], s_company_name=[$3], d_year=[$4], d_moy=[$5], sum_sales=[$6], avg_monthly_sales=[/(CASE(>(COUNT($6) OVER (PARTITION BY $0, $1, $2, $3, $4), 0), $SUM0($6) OVER (PARTITION BY $0, $1, $2, $3, $4), null:DOUBLE), COUNT($6) OVER (PARTITION BY $0, $1, $2, $3, $4))], rn=[RANK() OVER (PARTITION BY $0, $1, $2, $3 ORDER BY $4 NULLS FIRST, $5 NULLS FIRST)])
                  :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5}], sum_sales=[SUM($6)])
                  :  :     +- LogicalProject(i_category=[$12], i_brand=[$8], s_store_name=[$78], s_company_name=[$90], d_year=[$51], d_moy=[$53], ss_sales_price=[$35])
                  :  :        +- LogicalFilter(condition=[AND(=($24, $0), =($22, $45), =($29, $73), OR(=($51, 2000), AND(=($51, -(2000, 1)), =($53, 12)), AND(=($51, +(2000, 1)), =($53, 1))))])
                  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
                  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :              :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                  :  :              :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                  :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                  :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
                  :  +- LogicalProject(i_category=[$0], i_brand=[$1], s_store_name=[$2], s_company_name=[$3], d_year=[$4], d_moy=[$5], sum_sales=[$6], avg_monthly_sales=[/(CASE(>(COUNT($6) OVER (PARTITION BY $0, $1, $2, $3, $4), 0), $SUM0($6) OVER (PARTITION BY $0, $1, $2, $3, $4), null:DOUBLE), COUNT($6) OVER (PARTITION BY $0, $1, $2, $3, $4))], rn=[RANK() OVER (PARTITION BY $0, $1, $2, $3 ORDER BY $4 NULLS FIRST, $5 NULLS FIRST)])
                  :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5}], sum_sales=[SUM($6)])
                  :        +- LogicalProject(i_category=[$12], i_brand=[$8], s_store_name=[$78], s_company_name=[$90], d_year=[$51], d_moy=[$53], ss_sales_price=[$35])
                  :           +- LogicalFilter(condition=[AND(=($24, $0), =($22, $45), =($29, $73), OR(=($51, 2000), AND(=($51, -(2000, 1)), =($53, 12)), AND(=($51, +(2000, 1)), =($53, 1))))])
                  :              +- LogicalJoin(condition=[true], joinType=[inner])
                  :                 :- LogicalJoin(condition=[true], joinType=[inner])
                  :                 :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :                 :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                  :                 :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                  :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                  :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
                  +- LogicalProject(i_category=[$0], i_brand=[$1], s_store_name=[$2], s_company_name=[$3], d_year=[$4], d_moy=[$5], sum_sales=[$6], avg_monthly_sales=[/(CASE(>(COUNT($6) OVER (PARTITION BY $0, $1, $2, $3, $4), 0), $SUM0($6) OVER (PARTITION BY $0, $1, $2, $3, $4), null:DOUBLE), COUNT($6) OVER (PARTITION BY $0, $1, $2, $3, $4))], rn=[RANK() OVER (PARTITION BY $0, $1, $2, $3 ORDER BY $4 NULLS FIRST, $5 NULLS FIRST)])
                     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5}], sum_sales=[SUM($6)])
                        +- LogicalProject(i_category=[$12], i_brand=[$8], s_store_name=[$78], s_company_name=[$90], d_year=[$51], d_moy=[$53], ss_sales_price=[$35])
                           +- LogicalFilter(condition=[AND(=($24, $0), =($22, $45), =($29, $73), OR(=($51, 2000), AND(=($51, -(2000, 1)), =($53, 12)), AND(=($51, +(2000, 1)), =($53, 1))))])
                              +- LogicalJoin(condition=[true], joinType=[inner])
                                 :- LogicalJoin(condition=[true], joinType=[inner])
                                 :  :- LogicalJoin(condition=[true], joinType=[inner])
                                 :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                                 :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[i_category, d_year, d_moy, avg_monthly_sales, sum_sales, psum, nsum])
+- SortLimit(orderBy=[EXPR$7 ASC, d_moy ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[EXPR$7 ASC, d_moy ASC], offset=[0], fetch=[100], global=[false])
         +- Calc(select=[i_category0 AS i_category, d_year, d_moy, avg_monthly_sales, sum_sales0 AS sum_sales, sum_sales00 AS psum, sum_sales AS nsum, (sum_sales0 - avg_monthly_sales) AS EXPR$7])
            +- MultipleInput(readOrder=[2,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[((i_category0 = i_category) AND (i_brand0 = i_brand) AND (s_store_name0 = s_store_name) AND (s_company_name0 = s_company_name) AND (rn = $f9))], select=[i_category, i_brand, s_store_name, s_company_name, sum_sales, $f9, i_category0, i_brand0, s_store_name0, s_company_name0, d_year, d_moy, sum_sales0, avg_monthly_sales, rn, sum_sales00], build=[right])\n:- [#1] Exchange(distribution=[hash[i_category, i_brand, s_store_name, s_company_name, $f9]], shuffle_mode=[BATCH])\n+- Calc(select=[i_category0 AS i_category, i_brand0 AS i_brand, s_store_name0 AS s_store_name, s_company_name0 AS s_company_name, d_year, d_moy, sum_sales0 AS sum_sales, avg_monthly_sales, rn, sum_sales AS sum_sales0])\n   +- HashJoin(joinType=[InnerJoin], where=[((i_category0 = i_category) AND (i_brand0 = i_brand) AND (s_store_name0 = s_store_name) AND (s_company_name0 = s_company_name) AND (rn = $f9))], select=[i_category, i_brand, s_store_name, s_company_name, sum_sales, $f9, i_category0, i_brand0, s_store_name0, s_company_name0, d_year, d_moy, sum_sales0, avg_monthly_sales, rn], build=[right])\n      :- [#2] Exchange(distribution=[hash[i_category, i_brand, s_store_name, s_company_name, $f9]], shuffle_mode=[BATCH])\n      +- [#3] Exchange(distribution=[hash[i_category, i_brand, s_store_name, s_company_name, rn]])\n])
               :- Exchange(distribution=[hash[i_category, i_brand, s_store_name, s_company_name, $f9]], shuffle_mode=[BATCH])
               :  +- Calc(select=[i_category, i_brand, s_store_name, s_company_name, sum_sales, (w1$o0 - 1) AS $f9])
               :     +- OverAggregate(partitionBy=[i_category, i_brand, s_store_name, s_company_name, d_year], window#0=[COUNT(sum_sales) AS w1$o0, $SUM0(sum_sales) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[i_category, i_brand, s_store_name, s_company_name, d_year, d_moy, sum_sales, w0$o1, w1$o0, w0$o0])(reuse_id=[1])
               :        +- OverAggregate(partitionBy=[i_category, i_brand, s_store_name, s_company_name], orderBy=[d_year ASC, d_moy ASC], window#0=[RANK(*) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[i_category, i_brand, s_store_name, s_company_name, d_year, d_moy, sum_sales, w0$o1])
               :           +- Sort(orderBy=[i_category ASC, i_brand ASC, s_store_name ASC, s_company_name ASC, d_year ASC, d_moy ASC])
               :              +- Exchange(distribution=[hash[i_category, i_brand, s_store_name, s_company_name]])
               :                 +- HashAggregate(isMerge=[true], groupBy=[i_category, i_brand, s_store_name, s_company_name, d_year, d_moy], select=[i_category, i_brand, s_store_name, s_company_name, d_year, d_moy, Final_SUM(sum$0) AS sum_sales])
               :                    +- Exchange(distribution=[hash[i_category, i_brand, s_store_name, s_company_name, d_year, d_moy]])
               :                       +- LocalHashAggregate(groupBy=[i_category, i_brand, s_store_name, s_company_name, d_year, d_moy], select=[i_category, i_brand, s_store_name, s_company_name, d_year, d_moy, Partial_SUM(ss_sales_price) AS sum$0])
               :                          +- Calc(select=[i_category, i_brand, s_store_name, s_company_name, d_year, d_moy, ss_sales_price])
               :                             +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, ss_sales_price, d_year, d_moy, i_brand, i_category, s_store_sk, s_store_name, s_company_name], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk, ss_sales_price, d_year, d_moy, i_brand, i_category])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, ss_store_sk, ss_sales_price, d_year, d_moy, i_item_sk, i_brand, i_category], build=[right])\n:     :- [#2] Exchange(distribution=[hash[ss_item_sk]])\n:     +- [#3] Exchange(distribution=[hash[i_item_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
               :                                :- Exchange(distribution=[broadcast])
               :                                :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_store_name, s_company_name]]], fields=[s_store_sk, s_store_name, s_company_name])
               :                                :- Exchange(distribution=[hash[ss_item_sk]])
               :                                :  +- Calc(select=[ss_item_sk, ss_store_sk, ss_sales_price, d_year, d_moy])
               :                                :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price, d_date_sk, d_year, d_moy], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price], where=[ss_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
               :                                :        :- Exchange(distribution=[broadcast])
               :                                :        :  +- Calc(select=[d_date_sk, d_year, d_moy], where=[((d_year = 2000) OR ((d_year = 1999) AND (d_moy = 12)) OR ((d_year = 2001) AND (d_moy = 1)))])
               :                                :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
               :                                :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price])
               :                                +- Exchange(distribution=[hash[i_item_sk]])
               :                                   +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand, i_category]]], fields=[i_item_sk, i_brand, i_category])
               :- Exchange(distribution=[hash[i_category, i_brand, s_store_name, s_company_name, $f9]], shuffle_mode=[BATCH])
               :  +- Calc(select=[i_category, i_brand, s_store_name, s_company_name, sum_sales, (w1$o0 + 1) AS $f9])
               :     +- Reused(reference_id=[1])
               +- Exchange(distribution=[hash[i_category, i_brand, s_store_name, s_company_name, rn]])
                  +- Calc(select=[i_category, i_brand, s_store_name, s_company_name, CAST(2000 AS INTEGER) AS d_year, d_moy, sum_sales, (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0) AS avg_monthly_sales, w1$o0 AS rn], where=[((d_year = 2000) AND ((CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0) > 0) AND CASE(((CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0) > 0), ((ABS((sum_sales - (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0))) / (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0)) > 0.1), false))])
                     +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q48]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query48.tpl and seed 622697896
select sum (ss_quantity)
 from store_sales, store, customer_demographics, customer_address, date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 1998
 and  
 (
  (
   cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 100.00 and 150.00  
   )
 or
  (
  cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 50.00 and 100.00   
  )
 or 
 (
  cd_demo_sk = ss_cdemo_sk
  and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 150.00 and 200.00  
 )
 )
 and
 (
  (
  ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('KY', 'GA', 'NM')
  and ss_net_profit between 0 and 2000  
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('MT', 'OR', 'IN')
  and ss_net_profit between 150 and 3000 
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('WI', 'MO', 'WV')
  and ss_net_profit between 50 and 25000 
  )
 )


-- end query 1 in stream 0 using template query48.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
+- LogicalProject(ss_quantity=[$10])
   +- LogicalFilter(condition=[AND(=($23, $7), =($0, $74), =($80, 1998), OR(AND(=($52, $4), =($54, _UTF-16LE'M'), =($55, _UTF-16LE'4 yr Degree'), >=($13, 100.00:DECIMAL(5, 2)), <=($13, 150.00:DECIMAL(5, 2))), AND(=($52, $4), =($54, _UTF-16LE'M'), =($55, _UTF-16LE'4 yr Degree'), >=($13, 50.00:DECIMAL(4, 2)), <=($13, 100.00:DECIMAL(5, 2))), AND(=($52, $4), =($54, _UTF-16LE'M'), =($55, _UTF-16LE'4 yr Degree'), >=($13, 150.00:DECIMAL(5, 2)), <=($13, 200.00:DECIMAL(5, 2)))), OR(AND(=($6, $61), =($71, _UTF-16LE'United States'), OR(=($69, _UTF-16LE'KY'), =($69, _UTF-16LE'GA'), =($69, _UTF-16LE'NM')), >=($22, 0), <=($22, 2000)), AND(=($6, $61), =($71, _UTF-16LE'United States'), OR(=($69, _UTF-16LE'MT'), =($69, _UTF-16LE'OR'), =($69, _UTF-16LE'IN')), >=($22, 150), <=($22, 3000)), AND(=($6, $61), =($71, _UTF-16LE'United States'), OR(=($69, _UTF-16LE'WI'), =($69, _UTF-16LE'MO'), =($69, _UTF-16LE'WV')), >=($22, 50), <=($22, 25000))))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
         :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
         :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
         +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS EXPR$0])
+- Exchange(distribution=[single])
   +- LocalHashAggregate(select=[Partial_SUM(ss_quantity) AS sum$0])
      +- Calc(select=[ss_quantity])
         +- MultipleInput(readOrder=[0,0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(s_store_sk = ss_store_sk)], select=[ss_store_sk, ss_quantity, s_store_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk, ss_quantity])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_store_sk, ss_quantity, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_quantity])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(cd_demo_sk = ss_cdemo_sk)], select=[ss_sold_date_sk, ss_cdemo_sk, ss_store_sk, ss_quantity, cd_demo_sk], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[ss_sold_date_sk, ss_cdemo_sk, ss_store_sk, ss_quantity])\n:     :     :  +- HashJoin(joinType=[InnerJoin], where=[((ss_addr_sk = ca_address_sk) AND ((SEARCH(ca_state, Sarg[_UTF-16LE'GA', _UTF-16LE'KY', _UTF-16LE'NM']) AND SEARCH(ss_net_profit, Sarg[[0..2000]])) OR (SEARCH(ca_state, Sarg[_UTF-16LE'IN', _UTF-16LE'MT', _UTF-16LE'OR']) AND SEARCH(ss_net_profit, Sarg[[150..3000]])) OR (SEARCH(ca_state, Sarg[_UTF-16LE'MO', _UTF-16LE'WI', _UTF-16LE'WV']) AND SEARCH(ss_net_profit, Sarg[[50..25000]]))))], select=[ss_sold_date_sk, ss_cdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_net_profit, ca_address_sk, ca_state], build=[right])\n:     :     :     :- [#4] Exchange(distribution=[hash[ss_addr_sk]])\n:     :     :     +- [#5] Exchange(distribution=[hash[ca_address_sk]])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :- Exchange(distribution=[broadcast])
            :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk]]], fields=[s_store_sk])
            :- Exchange(distribution=[broadcast])
            :  +- Calc(select=[d_date_sk], where=[(d_year = 1998)])
            :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
            :- Exchange(distribution=[broadcast])
            :  +- Calc(select=[cd_demo_sk], where=[(SEARCH(cd_marital_status, Sarg[_UTF-16LE'M']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'4 yr Degree']))])
            :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk, cd_marital_status, cd_education_status]]], fields=[cd_demo_sk, cd_marital_status, cd_education_status])
            :- Exchange(distribution=[hash[ss_addr_sk]])
            :  +- Calc(select=[ss_sold_date_sk, ss_cdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_net_profit], where=[((SEARCH(ss_sales_price, Sarg[[100.00..150.00]]) OR SEARCH(ss_sales_price, Sarg[[50.00..100.00]]) OR SEARCH(ss_sales_price, Sarg[[150.00..200.00]])) AND (SEARCH(ss_net_profit, Sarg[[0..2000]]) OR SEARCH(ss_net_profit, Sarg[[150..3000]]) OR SEARCH(ss_net_profit, Sarg[[50..25000]])))])
            :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_cdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_net_profit]]], fields=[ss_sold_date_sk, ss_cdemo_sk, ss_addr_sk, ss_store_sk, ss_quantity, ss_sales_price, ss_net_profit])
            +- Exchange(distribution=[hash[ca_address_sk]])
               +- Calc(select=[ca_address_sk, ca_state], where=[(SEARCH(ca_country, Sarg[_UTF-16LE'United States']) AND SEARCH(ca_state, Sarg[_UTF-16LE'GA', _UTF-16LE'IN', _UTF-16LE'KY', _UTF-16LE'MO', _UTF-16LE'MT', _UTF-16LE'NM', _UTF-16LE'OR', _UTF-16LE'WI', _UTF-16LE'WV']))])
                  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state, ca_country]]], fields=[ca_address_sk, ca_state, ca_country])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q49]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query49.tpl and seed 1819994127
select  
 'web' as channel
 ,web.item
 ,web.return_ratio
 ,web.return_rank
 ,web.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select ws.ws_item_sk as item
 		,(cast(sum(coalesce(wr.wr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(wr.wr_return_amt,0)) as dec(15,4))/
 		cast(sum(coalesce(ws.ws_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		 web_sales ws left outer join web_returns wr 
 			on (ws.ws_order_number = wr.wr_order_number and 
 			ws.ws_item_sk = wr.wr_item_sk)
                 ,date_dim
 		where 
 			wr.wr_return_amt > 10000 
 			and ws.ws_net_profit > 1
                         and ws.ws_net_paid > 0
                         and ws.ws_quantity > 0
                         and ws_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by ws.ws_item_sk
 	) in_web
 ) web
 where 
 (
 web.return_rank <= 10
 or
 web.currency_rank <= 10
 )
 union
 select 
 'catalog' as channel
 ,catalog.item
 ,catalog.return_ratio
 ,catalog.return_rank
 ,catalog.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select 
 		cs.cs_item_sk as item
 		,(cast(sum(coalesce(cr.cr_return_quantity,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(cr.cr_return_amount,0)) as dec(15,4))/
 		cast(sum(coalesce(cs.cs_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		catalog_sales cs left outer join catalog_returns cr
 			on (cs.cs_order_number = cr.cr_order_number and 
 			cs.cs_item_sk = cr.cr_item_sk)
                ,date_dim
 		where 
 			cr.cr_return_amount > 10000 
 			and cs.cs_net_profit > 1
                         and cs.cs_net_paid > 0
                         and cs.cs_quantity > 0
                         and cs_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
                 group by cs.cs_item_sk
 	) in_cat
 ) catalog
 where 
 (
 catalog.return_rank <= 10
 or
 catalog.currency_rank <=10
 )
 union
 select 
 'store' as channel
 ,store.item
 ,store.return_ratio
 ,store.return_rank
 ,store.currency_rank
 from (
 	select 
 	 item
 	,return_ratio
 	,currency_ratio
 	,rank() over (order by return_ratio) as return_rank
 	,rank() over (order by currency_ratio) as currency_rank
 	from
 	(	select sts.ss_item_sk as item
 		,(cast(sum(coalesce(sr.sr_return_quantity,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_quantity,0)) as dec(15,4) )) as return_ratio
 		,(cast(sum(coalesce(sr.sr_return_amt,0)) as dec(15,4))/cast(sum(coalesce(sts.ss_net_paid,0)) as dec(15,4) )) as currency_ratio
 		from 
 		store_sales sts left outer join store_returns sr
 			on (sts.ss_ticket_number = sr.sr_ticket_number and sts.ss_item_sk = sr.sr_item_sk)
                ,date_dim
 		where 
 			sr.sr_return_amt > 10000 
 			and sts.ss_net_profit > 1
                         and sts.ss_net_paid > 0 
                         and sts.ss_quantity > 0
                         and ss_sold_date_sk = d_date_sk
                         and d_year = 2000
                         and d_moy = 12
 		group by sts.ss_item_sk
 	) in_store
 ) store
 where  (
 store.return_rank <= 10
 or 
 store.currency_rank <= 10
 )
 order by 1,4,5
 limit 100

-- end query 1 in stream 0 using template query49.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$3], sort2=[$4], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalProject(channel=[$0], item=[$1], return_ratio=[$2], return_rank=[$3], currency_rank=[$4])
   +- LogicalUnion(all=[false])
      :- LogicalUnion(all=[false])
      :  :- LogicalProject(channel=[_UTF-16LE'web'], item=[$0], return_ratio=[$1], return_rank=[$3], currency_rank=[$4])
      :  :  +- LogicalFilter(condition=[OR(<=($3, 10), <=($4, 10))])
      :  :     +- LogicalProject(item=[$0], return_ratio=[/(CAST($1):DECIMAL(15, 4) NOT NULL, CAST($2):DECIMAL(15, 4) NOT NULL)], currency_ratio=[/(CAST($3):DECIMAL(15, 4) NOT NULL, CAST($4):DECIMAL(15, 4) NOT NULL)], return_rank=[RANK() OVER (ORDER BY /(CAST($1):DECIMAL(15, 4) NOT NULL, CAST($2):DECIMAL(15, 4) NOT NULL) NULLS FIRST)], currency_rank=[RANK() OVER (ORDER BY /(CAST($3):DECIMAL(15, 4) NOT NULL, CAST($4):DECIMAL(15, 4) NOT NULL) NULLS FIRST)])
      :  :        +- LogicalAggregate(group=[{0}], agg#0=[SUM($1)], agg#1=[SUM($2)], agg#2=[SUM($3)], agg#3=[SUM($4)])
      :  :           +- LogicalProject(item=[$3], $f1=[coalesce($48, 0)], $f2=[coalesce($18, 0)], $f3=[coalesce($49, 0:DOUBLE)], $f4=[coalesce($29, 0:DOUBLE)])
      :  :              +- LogicalFilter(condition=[AND(>($49, 10000), >($33, 1), >($29, 0), >($18, 0), =($0, $58), =($64, 2000), =($66, 12))])
      :  :                 +- LogicalJoin(condition=[true], joinType=[inner])
      :  :                    :- LogicalJoin(condition=[AND(=($17, $47), =($3, $36))], joinType=[left])
      :  :                    :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
      :  :                    :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_returns]])
      :  :                    +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      :  +- LogicalProject(channel=[_UTF-16LE'catalog'], item=[$0], return_ratio=[$1], return_rank=[$3], currency_rank=[$4])
      :     +- LogicalFilter(condition=[OR(<=($3, 10), <=($4, 10))])
      :        +- LogicalProject(item=[$0], return_ratio=[/(CAST($1):DECIMAL(15, 4) NOT NULL, CAST($2):DECIMAL(15, 4) NOT NULL)], currency_ratio=[/(CAST($3):DECIMAL(15, 4) NOT NULL, CAST($4):DECIMAL(15, 4) NOT NULL)], return_rank=[RANK() OVER (ORDER BY /(CAST($1):DECIMAL(15, 4) NOT NULL, CAST($2):DECIMAL(15, 4) NOT NULL) NULLS FIRST)], currency_rank=[RANK() OVER (ORDER BY /(CAST($3):DECIMAL(15, 4) NOT NULL, CAST($4):DECIMAL(15, 4) NOT NULL) NULLS FIRST)])
      :           +- LogicalAggregate(group=[{0}], agg#0=[SUM($1)], agg#1=[SUM($2)], agg#2=[SUM($3)], agg#3=[SUM($4)])
      :              +- LogicalProject(item=[$15], $f1=[coalesce($51, 0)], $f2=[coalesce($18, 0)], $f3=[coalesce($52, 0:DOUBLE)], $f4=[coalesce($29, 0:DOUBLE)])
      :                 +- LogicalFilter(condition=[AND(>($52, 10000), >($33, 1), >($29, 0), >($18, 0), =($0, $61), =($67, 2000), =($69, 12))])
      :                    +- LogicalJoin(condition=[true], joinType=[inner])
      :                       :- LogicalJoin(condition=[AND(=($17, $50), =($15, $36))], joinType=[left])
      :                       :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
      :                       :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns]])
      :                       +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      +- LogicalProject(channel=[_UTF-16LE'store'], item=[$0], return_ratio=[$1], return_rank=[$3], currency_rank=[$4])
         +- LogicalFilter(condition=[OR(<=($3, 10), <=($4, 10))])
            +- LogicalProject(item=[$0], return_ratio=[/(CAST($1):DECIMAL(15, 4) NOT NULL, CAST($2):DECIMAL(15, 4) NOT NULL)], currency_ratio=[/(CAST($3):DECIMAL(15, 4) NOT NULL, CAST($4):DECIMAL(15, 4) NOT NULL)], return_rank=[RANK() OVER (ORDER BY /(CAST($1):DECIMAL(15, 4) NOT NULL, CAST($2):DECIMAL(15, 4) NOT NULL) NULLS FIRST)], currency_rank=[RANK() OVER (ORDER BY /(CAST($3):DECIMAL(15, 4) NOT NULL, CAST($4):DECIMAL(15, 4) NOT NULL) NULLS FIRST)])
               +- LogicalAggregate(group=[{0}], agg#0=[SUM($1)], agg#1=[SUM($2)], agg#2=[SUM($3)], agg#3=[SUM($4)])
                  +- LogicalProject(item=[$2], $f1=[coalesce($33, 0)], $f2=[coalesce($10, 0)], $f3=[coalesce($34, 0:DOUBLE)], $f4=[coalesce($20, 0:DOUBLE)])
                     +- LogicalFilter(condition=[AND(>($34, 10000), >($22, 1), >($20, 0), >($10, 0), =($0, $43), =($49, 2000), =($51, 12))])
                        +- LogicalJoin(condition=[true], joinType=[inner])
                           :- LogicalJoin(condition=[AND(=($9, $32), =($2, $25))], joinType=[left])
                           :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
                           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[channel ASC, return_rank ASC, currency_rank ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[channel ASC, return_rank ASC, currency_rank ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[channel, item, return_ratio, return_rank, currency_rank], select=[channel, item, return_ratio, return_rank, currency_rank])
         +- Exchange(distribution=[hash[channel, item, return_ratio, return_rank, currency_rank]])
            +- LocalHashAggregate(groupBy=[channel, item, return_ratio, return_rank, currency_rank], select=[channel, item, return_ratio, return_rank, currency_rank])
               +- Union(all=[true], union=[channel, item, return_ratio, return_rank, currency_rank])
                  :- Union(all=[true], union=[channel, item, return_ratio, return_rank, currency_rank])
                  :  :- Calc(select=['web' AS channel, item, $1 AS return_ratio, w0$o0 AS return_rank, w1$o0 AS currency_rank], where=[((w0$o0 <= 10) OR (w1$o0 <= 10))])
                  :  :  +- OverAggregate(orderBy=[$2 ASC], window#0=[RANK(*) AS w1$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[item, $1, $2, w0$o0, w1$o0])
                  :  :     +- Sort(orderBy=[$2 ASC])
                  :  :        +- OverAggregate(orderBy=[$1 ASC], window#0=[RANK(*) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[item, $1, $2, w0$o0])
                  :  :           +- Sort(orderBy=[$1 ASC])
                  :  :              +- Exchange(distribution=[single])
                  :  :                 +- Calc(select=[item, (CAST($f1 AS DECIMAL(15, 4)) / CAST($f2 AS DECIMAL(15, 4))) AS $1, (CAST($f3 AS DECIMAL(15, 4)) / CAST($f4 AS DECIMAL(15, 4))) AS $2])
                  :  :                    +- HashAggregate(isMerge=[false], groupBy=[item], select=[item, SUM($f1) AS $f1, SUM($f2) AS $f2, SUM($f3) AS $f3, SUM($f4) AS $f4])
                  :  :                       +- Calc(select=[ws_item_sk AS item, coalesce(wr_return_quantity, 0) AS $f1, coalesce(ws_quantity, 0) AS $f2, coalesce(wr_return_amt, 0) AS $f3, coalesce(ws_net_paid, 0) AS $f4])
                  :  :                          +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_quantity, ws_net_paid, wr_return_quantity, wr_return_amt, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ws_sold_date_sk, ws_item_sk, ws_quantity, ws_net_paid, wr_return_quantity, wr_return_amt])\n:  +- HashJoin(joinType=[InnerJoin], where=[((ws_order_number = wr_order_number) AND (ws_item_sk = wr_item_sk))], select=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_net_paid, wr_item_sk, wr_order_number, wr_return_quantity, wr_return_amt], build=[right])\n:     :- [#2] Exchange(distribution=[hash[ws_item_sk]])\n:     +- [#3] Exchange(distribution=[hash[wr_item_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :  :                             :- Exchange(distribution=[broadcast])(reuse_id=[1])
                  :  :                             :  +- Calc(select=[d_date_sk], where=[((d_year = 2000) AND (d_moy = 12))])
                  :  :                             :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                  :  :                             :- Exchange(distribution=[hash[ws_item_sk]])
                  :  :                             :  +- Calc(select=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_net_paid], where=[((ws_net_profit > 1) AND (ws_net_paid > 0) AND (ws_quantity > 0))])
                  :  :                             :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_net_paid, ws_net_profit]]], fields=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_net_paid, ws_net_profit])
                  :  :                             +- Exchange(distribution=[hash[wr_item_sk]])
                  :  :                                +- Calc(select=[wr_item_sk, wr_order_number, wr_return_quantity, wr_return_amt], where=[(wr_return_amt > 10000)])
                  :  :                                   +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_returns, project=[wr_item_sk, wr_order_number, wr_return_quantity, wr_return_amt]]], fields=[wr_item_sk, wr_order_number, wr_return_quantity, wr_return_amt])
                  :  +- Calc(select=['catalog' AS channel, item, $1 AS return_ratio, w0$o0 AS return_rank, w1$o0 AS currency_rank], where=[((w0$o0 <= 10) OR (w1$o0 <= 10))])
                  :     +- OverAggregate(orderBy=[$2 ASC], window#0=[RANK(*) AS w1$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[item, $1, $2, w0$o0, w1$o0])
                  :        +- Sort(orderBy=[$2 ASC])
                  :           +- OverAggregate(orderBy=[$1 ASC], window#0=[RANK(*) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[item, $1, $2, w0$o0])
                  :              +- Sort(orderBy=[$1 ASC])
                  :                 +- Exchange(distribution=[single])
                  :                    +- Calc(select=[item, (CAST($f1 AS DECIMAL(15, 4)) / CAST($f2 AS DECIMAL(15, 4))) AS $1, (CAST($f3 AS DECIMAL(15, 4)) / CAST($f4 AS DECIMAL(15, 4))) AS $2])
                  :                       +- HashAggregate(isMerge=[false], groupBy=[item], select=[item, SUM($f1) AS $f1, SUM($f2) AS $f2, SUM($f3) AS $f3, SUM($f4) AS $f4])
                  :                          +- Calc(select=[cs_item_sk AS item, coalesce(cr_return_quantity, 0) AS $f1, coalesce(cs_quantity, 0) AS $f2, coalesce(cr_return_amount, 0) AS $f3, coalesce(cs_net_paid, 0) AS $f4])
                  :                             +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_net_paid, cr_return_quantity, cr_return_amount, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_quantity, cs_net_paid, cr_return_quantity, cr_return_amount])\n:  +- HashJoin(joinType=[InnerJoin], where=[((cs_order_number = cr_order_number) AND (cs_item_sk = cr_item_sk))], select=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_net_paid, cr_item_sk, cr_order_number, cr_return_quantity, cr_return_amount], build=[right])\n:     :- [#2] Exchange(distribution=[hash[cs_item_sk]])\n:     +- [#3] Exchange(distribution=[hash[cr_item_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :                                :- Reused(reference_id=[1])
                  :                                :- Exchange(distribution=[hash[cs_item_sk]])
                  :                                :  +- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_net_paid], where=[((cs_net_profit > 1) AND (cs_net_paid > 0) AND (cs_quantity > 0))])
                  :                                :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_net_paid, cs_net_profit]]], fields=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_net_paid, cs_net_profit])
                  :                                +- Exchange(distribution=[hash[cr_item_sk]])
                  :                                   +- Calc(select=[cr_item_sk, cr_order_number, cr_return_quantity, cr_return_amount], where=[(cr_return_amount > 10000)])
                  :                                      +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns, project=[cr_item_sk, cr_order_number, cr_return_quantity, cr_return_amount]]], fields=[cr_item_sk, cr_order_number, cr_return_quantity, cr_return_amount])
                  +- Calc(select=['store' AS channel, item, $1 AS return_ratio, w0$o0 AS return_rank, w1$o0 AS currency_rank], where=[((w0$o0 <= 10) OR (w1$o0 <= 10))])
                     +- OverAggregate(orderBy=[$2 ASC], window#0=[RANK(*) AS w1$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[item, $1, $2, w0$o0, w1$o0])
                        +- Sort(orderBy=[$2 ASC])
                           +- OverAggregate(orderBy=[$1 ASC], window#0=[RANK(*) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[item, $1, $2, w0$o0])
                              +- Sort(orderBy=[$1 ASC])
                                 +- Exchange(distribution=[single])
                                    +- Calc(select=[item, (CAST($f1 AS DECIMAL(15, 4)) / CAST($f2 AS DECIMAL(15, 4))) AS $1, (CAST($f3 AS DECIMAL(15, 4)) / CAST($f4 AS DECIMAL(15, 4))) AS $2])
                                       +- HashAggregate(isMerge=[false], groupBy=[item], select=[item, SUM($f1) AS $f1, SUM($f2) AS $f2, SUM($f3) AS $f3, SUM($f4) AS $f4])
                                          +- Calc(select=[ss_item_sk AS item, coalesce(sr_return_quantity, 0) AS $f1, coalesce(ss_quantity, 0) AS $f2, coalesce(sr_return_amt, 0) AS $f3, coalesce(ss_net_paid, 0) AS $f4])
                                             +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_net_paid, sr_return_quantity, sr_return_amt, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_quantity, ss_net_paid, sr_return_quantity, sr_return_amt])\n:  +- HashJoin(joinType=[InnerJoin], where=[((ss_ticket_number = sr_ticket_number) AND (ss_item_sk = sr_item_sk))], select=[ss_sold_date_sk, ss_item_sk, ss_ticket_number, ss_quantity, ss_net_paid, sr_item_sk, sr_ticket_number, sr_return_quantity, sr_return_amt], build=[right])\n:     :- [#2] Exchange(distribution=[hash[ss_item_sk]])\n:     +- [#3] Exchange(distribution=[hash[sr_item_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                                :- Reused(reference_id=[1])
                                                :- Exchange(distribution=[hash[ss_item_sk]])
                                                :  +- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_ticket_number, ss_quantity, ss_net_paid], where=[((ss_net_profit > 1) AND (ss_net_paid > 0) AND (ss_quantity > 0))])
                                                :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_ticket_number, ss_quantity, ss_net_paid, ss_net_profit]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ticket_number, ss_quantity, ss_net_paid, ss_net_profit])
                                                +- Exchange(distribution=[hash[sr_item_sk]])
                                                   +- Calc(select=[sr_item_sk, sr_ticket_number, sr_return_quantity, sr_return_amt], where=[(sr_return_amt > 10000)])
                                                      +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_item_sk, sr_ticket_number, sr_return_quantity, sr_return_amt]]], fields=[sr_item_sk, sr_ticket_number, sr_return_quantity, sr_return_amt])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q4]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query4.tpl and seed 1819994127
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100

-- end query 1 in stream 0 using template query4.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalProject(customer_preferred_cust_flag=[$13])
   +- LogicalFilter(condition=[AND(=($10, $0), =($0, $30), =($0, $20), =($0, $40), =($0, $50), =($9, _UTF-16LE's'), =($29, _UTF-16LE'c'), =($49, _UTF-16LE'w'), =($19, _UTF-16LE's'), =($39, _UTF-16LE'c'), =($59, _UTF-16LE'w'), =($7, 2001), =($17, +(2001, 1)), =($27, 2001), =($37, +(2001, 1)), =($47, 2001), =($57, +(2001, 1)), >($8, 0), >($28, 0), >($48, 0), >(CASE(>($28, 0), /($38, $28), null:DOUBLE), CASE(>($8, 0), /($18, $8), null:DOUBLE)), >(CASE(>($28, 0), /($38, $28), null:DOUBLE), CASE(>($48, 0), /($58, $48), null:DOUBLE)))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :- LogicalUnion(all=[true])
         :  :  :  :  :  :- LogicalUnion(all=[true])
         :  :  :  :  :  :  :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=[_UTF-16LE's'])
         :  :  :  :  :  :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :  :  :  :  :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$47], $f8=[/(+(-(-($35, $34), $32), $33), 2)])
         :  :  :  :  :  :  :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41))])
         :  :  :  :  :  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :  :  :              :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :  :  :  :  :  :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :  :  :  :  :  :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :  :  :  :  :  +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=[_UTF-16LE'c'])
         :  :  :  :  :  :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :  :  :  :        +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :  :  :  :  :  :           +- LogicalFilter(condition=[AND(=($0, $21), =($18, $52))])
         :  :  :  :  :  :              +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :  :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :  :                 :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :  :  :  :  :  :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
         :  :  :  :  :  :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :  :  :  :  +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=[_UTF-16LE'w'])
         :  :  :  :  :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :  :  :        +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :  :  :  :  :           +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52))])
         :  :  :  :  :              +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :                 :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :  :  :  :  :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
         :  :  :  :  :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :  :  :  +- LogicalUnion(all=[true])
         :  :  :  :     :- LogicalUnion(all=[true])
         :  :  :  :     :  :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=[_UTF-16LE's'])
         :  :  :  :     :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :  :     :  :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$47], $f8=[/(+(-(-($35, $34), $32), $33), 2)])
         :  :  :  :     :  :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41))])
         :  :  :  :     :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :     :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :     :  :              :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :  :  :  :     :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :  :  :  :     :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :  :  :     :  +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=[_UTF-16LE'c'])
         :  :  :  :     :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :  :     :        +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :  :  :  :     :           +- LogicalFilter(condition=[AND(=($0, $21), =($18, $52))])
         :  :  :  :     :              +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :     :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :     :                 :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :  :  :  :     :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
         :  :  :  :     :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :  :  :     +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=[_UTF-16LE'w'])
         :  :  :  :        +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :  :           +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :  :  :  :              +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52))])
         :  :  :  :                 +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :                    :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :                    :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :  :  :  :                    :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
         :  :  :  :                    +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :  :  +- LogicalUnion(all=[true])
         :  :  :     :- LogicalUnion(all=[true])
         :  :  :     :  :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=[_UTF-16LE's'])
         :  :  :     :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :     :  :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$47], $f8=[/(+(-(-($35, $34), $32), $33), 2)])
         :  :  :     :  :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41))])
         :  :  :     :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :     :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :     :  :              :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :  :  :     :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :  :  :     :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :  :     :  +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=[_UTF-16LE'c'])
         :  :  :     :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :     :        +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :  :  :     :           +- LogicalFilter(condition=[AND(=($0, $21), =($18, $52))])
         :  :  :     :              +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :     :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :     :                 :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :  :  :     :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
         :  :  :     :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :  :     +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=[_UTF-16LE'w'])
         :  :  :        +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :  :           +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :  :  :              +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52))])
         :  :  :                 +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :                    :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :                    :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :  :  :                    :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
         :  :  :                    +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :  +- LogicalUnion(all=[true])
         :  :     :- LogicalUnion(all=[true])
         :  :     :  :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=[_UTF-16LE's'])
         :  :     :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :     :  :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$47], $f8=[/(+(-(-($35, $34), $32), $33), 2)])
         :  :     :  :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41))])
         :  :     :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :     :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :     :  :              :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :  :     :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :  :     :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :     :  +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=[_UTF-16LE'c'])
         :  :     :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :     :        +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :  :     :           +- LogicalFilter(condition=[AND(=($0, $21), =($18, $52))])
         :  :     :              +- LogicalJoin(condition=[true], joinType=[inner])
         :  :     :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :  :     :                 :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :  :     :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
         :  :     :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :     +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=[_UTF-16LE'w'])
         :  :        +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :  :           +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :  :              +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52))])
         :  :                 +- LogicalJoin(condition=[true], joinType=[inner])
         :  :                    :- LogicalJoin(condition=[true], joinType=[inner])
         :  :                    :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :  :                    :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
         :  :                    +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  +- LogicalUnion(all=[true])
         :     :- LogicalUnion(all=[true])
         :     :  :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=[_UTF-16LE's'])
         :     :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :     :  :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$47], $f8=[/(+(-(-($35, $34), $32), $33), 2)])
         :     :  :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41))])
         :     :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :     :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :     :  :              :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :     :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :     :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :     :  +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=[_UTF-16LE'c'])
         :     :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :     :        +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :     :           +- LogicalFilter(condition=[AND(=($0, $21), =($18, $52))])
         :     :              +- LogicalJoin(condition=[true], joinType=[inner])
         :     :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :     :                 :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :     :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
         :     :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :     +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=[_UTF-16LE'w'])
         :        +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
         :           +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
         :              +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52))])
         :                 +- LogicalJoin(condition=[true], joinType=[inner])
         :                    :- LogicalJoin(condition=[true], joinType=[inner])
         :                    :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :                    :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
         :                    +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         +- LogicalUnion(all=[true])
            :- LogicalUnion(all=[true])
            :  :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=[_UTF-16LE's'])
            :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
            :  :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$47], $f8=[/(+(-(-($35, $34), $32), $33), 2)])
            :  :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41))])
            :  :           +- LogicalJoin(condition=[true], joinType=[inner])
            :  :              :- LogicalJoin(condition=[true], joinType=[inner])
            :  :              :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
            :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
            :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            :  +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=[_UTF-16LE'c'])
            :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
            :        +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
            :           +- LogicalFilter(condition=[AND(=($0, $21), =($18, $52))])
            :              +- LogicalJoin(condition=[true], joinType=[inner])
            :                 :- LogicalJoin(condition=[true], joinType=[inner])
            :                 :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
            :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
            :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], customer_preferred_cust_flag=[$3], customer_birth_country=[$4], customer_login=[$5], customer_email_address=[$6], dyear=[$7], year_total=[$8], sale_type=[_UTF-16LE'w'])
               +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], year_total=[SUM($8)])
                  +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], customer_preferred_cust_flag=[$10], customer_birth_country=[$14], customer_login=[$15], customer_email_address=[$16], dyear=[$58], $f8=[/(+(-(-($43, $42), $40), $41), 2)])
                     +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52))])
                        +- LogicalJoin(condition=[true], joinType=[inner])
                           :- LogicalJoin(condition=[true], joinType=[inner])
                           :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
                           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[customer_preferred_cust_flag000 AS customer_preferred_cust_flag])
+- SortLimit(orderBy=[customer_preferred_cust_flag000 ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[customer_preferred_cust_flag000 ASC], offset=[0], fetch=[100], global=[false])
         +- HashJoin(joinType=[InnerJoin], where=[(CASE((year_total > 0), CASE((year_total0000 > 0), ((year_total00 / year_total0000) > (year_total0 / year_total)), false), false) AND (customer_id = customer_id00))], select=[customer_id, year_total, year_total0, customer_id00, year_total00, customer_preferred_cust_flag000, year_total0000], build=[right])
            :- Exchange(distribution=[hash[customer_id]])
            :  +- Calc(select=[customer_id, year_total], where=[(year_total > 0)])
            :     +- HashAggregate(isMerge=[false], groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, SUM($f8) AS year_total])
            :        +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear]])
            :           +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, c_preferred_cust_flag AS customer_preferred_cust_flag, c_birth_country AS customer_birth_country, c_login AS customer_login, c_email_address AS customer_email_address, CAST(2001 AS INTEGER) AS dyear, ((((ws_ext_list_price - ws_ext_wholesale_cost) - ws_ext_discount_amt) + ws_ext_sales_price) / 2) AS $f8])
            :              +- HashJoin(joinType=[InnerJoin], where=[(c_customer_sk = ws_bill_customer_sk)], select=[ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address], build=[right])
            :                 :- Exchange(distribution=[hash[ws_bill_customer_sk]])
            :                 :  +- Calc(select=[ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price])
            :                 :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price]]], fields=[ws_sold_date_sk, ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price])\n+- [#2] Exchange(distribution=[broadcast])\n])
            :                 :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price]]], fields=[ws_sold_date_sk, ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price])
            :                 :        +- Exchange(distribution=[broadcast])(reuse_id=[1])
            :                 :           +- Calc(select=[d_date_sk], where=[(d_year = 2001)])
            :                 :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
            :                 +- Exchange(distribution=[hash[c_customer_sk]])
            :                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address]]], fields=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address])
            +- Exchange(distribution=[hash[customer_id00]])
               +- Calc(select=[year_total0, customer_id0 AS customer_id00, year_total00, customer_preferred_cust_flag00 AS customer_preferred_cust_flag000, year_total0000])
                  +- HashJoin(joinType=[InnerJoin], where=[(CASE((year_total > 0), CASE((year_total0000 > 0), ((year_total00 / year_total0000) > (year_total000 / year_total)), false), false) AND (customer_id = customer_id00))], select=[customer_id, year_total, year_total0, customer_id0, year_total00, customer_id00, customer_preferred_cust_flag00, year_total000, year_total0000], build=[left])
                     :- Exchange(distribution=[hash[customer_id]])
                     :  +- Calc(select=[customer_id, year_total], where=[(year_total > 0)])
                     :     +- HashAggregate(isMerge=[false], groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, SUM($f8) AS year_total])
                     :        +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear]])
                     :           +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, c_preferred_cust_flag AS customer_preferred_cust_flag, c_birth_country AS customer_birth_country, c_login AS customer_login, c_email_address AS customer_email_address, CAST(2001 AS INTEGER) AS dyear, ((((ss_ext_list_price - ss_ext_wholesale_cost) - ss_ext_discount_amt) + ss_ext_sales_price) / 2) AS $f8])
                     :              +- HashJoin(joinType=[InnerJoin], where=[(c_customer_sk = ss_customer_sk)], select=[ss_customer_sk, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address], build=[right])
                     :                 :- Exchange(distribution=[hash[ss_customer_sk]])
                     :                 :  +- Calc(select=[ss_customer_sk, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price])
                     :                 :     +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_customer_sk, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, d_date_sk], isBroadcast=[true], build=[right])
                     :                 :        :- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price], where=[ss_customer_sk IS NOT NULL])(reuse_id=[3])
                     :                 :        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price])
                     :                 :        +- Reused(reference_id=[1])
                     :                 +- Exchange(distribution=[hash[c_customer_sk]])
                     :                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address]]], fields=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address])
                     +- Exchange(distribution=[hash[customer_id00]])
                        +- Calc(select=[year_total, customer_id0, year_total0, customer_id00, customer_preferred_cust_flag AS customer_preferred_cust_flag00, year_total00, year_total000])
                           +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(customer_id = customer_id000)], select=[customer_id, year_total, customer_id0, year_total0, customer_id00, customer_preferred_cust_flag, year_total00, customer_id000, year_total000], build=[left])\n:- [#1] Exchange(distribution=[hash[customer_id]])\n+- HashJoin(joinType=[InnerJoin], where=[(customer_id = customer_id00)], select=[customer_id, year_total, customer_id0, customer_preferred_cust_flag, year_total0, customer_id00, year_total00], build=[left])\n   :- [#2] Exchange(distribution=[hash[customer_id]])\n   +- HashJoin(joinType=[InnerJoin], where=[(customer_id0 = customer_id)], select=[customer_id, customer_preferred_cust_flag, year_total, customer_id0, year_total0], build=[right])\n      :- [#3] Exchange(distribution=[hash[customer_id]])\n      +- [#4] Exchange(distribution=[hash[customer_id]])\n])
                              :- Exchange(distribution=[hash[customer_id]])
                              :  +- Calc(select=[customer_id, year_total])
                              :     +- HashAggregate(isMerge=[false], groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, SUM($f8) AS year_total])
                              :        +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear]])
                              :           +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, c_preferred_cust_flag AS customer_preferred_cust_flag, c_birth_country AS customer_birth_country, c_login AS customer_login, c_email_address AS customer_email_address, CAST(2002 AS INTEGER) AS dyear, ((((ws_ext_list_price - ws_ext_wholesale_cost) - ws_ext_discount_amt) + ws_ext_sales_price) / 2) AS $f8])
                              :              +- HashJoin(joinType=[InnerJoin], where=[(c_customer_sk = ws_bill_customer_sk)], select=[ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address], build=[right])
                              :                 :- Exchange(distribution=[hash[ws_bill_customer_sk]])
                              :                 :  +- Calc(select=[ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price])
                              :                 :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price]]], fields=[ws_sold_date_sk, ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price])\n+- [#2] Exchange(distribution=[broadcast])\n])
                              :                 :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price]]], fields=[ws_sold_date_sk, ws_bill_customer_sk, ws_ext_discount_amt, ws_ext_sales_price, ws_ext_wholesale_cost, ws_ext_list_price])
                              :                 :        +- Exchange(distribution=[broadcast])(reuse_id=[2])
                              :                 :           +- Calc(select=[d_date_sk], where=[(d_year = 2002)])
                              :                 :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
                              :                 +- Exchange(distribution=[hash[c_customer_sk]])
                              :                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address]]], fields=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address])
                              :- Exchange(distribution=[hash[customer_id]])
                              :  +- Calc(select=[customer_id, year_total])
                              :     +- HashAggregate(isMerge=[false], groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, SUM($f8) AS year_total])
                              :        +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear]])
                              :           +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, c_preferred_cust_flag AS customer_preferred_cust_flag, c_birth_country AS customer_birth_country, c_login AS customer_login, c_email_address AS customer_email_address, CAST(2002 AS INTEGER) AS dyear, ((((cs_ext_list_price - cs_ext_wholesale_cost) - cs_ext_discount_amt) + cs_ext_sales_price) / 2) AS $f8])
                              :              +- HashJoin(joinType=[InnerJoin], where=[(c_customer_sk = cs_bill_customer_sk)], select=[cs_bill_customer_sk, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address], build=[right])
                              :                 :- Exchange(distribution=[hash[cs_bill_customer_sk]])
                              :                 :  +- Calc(select=[cs_bill_customer_sk, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price])
                              :                 :     +- HashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_bill_customer_sk, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, d_date_sk], isBroadcast=[true], build=[right])
                              :                 :        :- Calc(select=[cs_sold_date_sk, cs_bill_customer_sk, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price], where=[cs_bill_customer_sk IS NOT NULL])(reuse_id=[4])
                              :                 :        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_customer_sk, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price])
                              :                 :        +- Reused(reference_id=[2])
                              :                 +- Exchange(distribution=[hash[c_customer_sk]])
                              :                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address]]], fields=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address])
                              :- Exchange(distribution=[hash[customer_id]])
                              :  +- Calc(select=[customer_id, customer_preferred_cust_flag, year_total])
                              :     +- HashAggregate(isMerge=[false], groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, SUM($f8) AS year_total])
                              :        +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear]])
                              :           +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, c_preferred_cust_flag AS customer_preferred_cust_flag, c_birth_country AS customer_birth_country, c_login AS customer_login, c_email_address AS customer_email_address, CAST(2002 AS INTEGER) AS dyear, ((((ss_ext_list_price - ss_ext_wholesale_cost) - ss_ext_discount_amt) + ss_ext_sales_price) / 2) AS $f8])
                              :              +- HashJoin(joinType=[InnerJoin], where=[(c_customer_sk = ss_customer_sk)], select=[ss_customer_sk, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address], build=[right])
                              :                 :- Exchange(distribution=[hash[ss_customer_sk]])
                              :                 :  +- Calc(select=[ss_customer_sk, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price])
                              :                 :     +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_customer_sk, ss_ext_discount_amt, ss_ext_sales_price, ss_ext_wholesale_cost, ss_ext_list_price, d_date_sk], isBroadcast=[true], build=[right])
                              :                 :        :- Reused(reference_id=[3])
                              :                 :        +- Reused(reference_id=[2])
                              :                 +- Exchange(distribution=[hash[c_customer_sk]])
                              :                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address]]], fields=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address])
                              +- Exchange(distribution=[hash[customer_id]])
                                 +- Calc(select=[customer_id, year_total], where=[(year_total > 0)])
                                    +- HashAggregate(isMerge=[false], groupBy=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear], select=[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear, SUM($f8) AS year_total])
                                       +- Exchange(distribution=[hash[customer_id, customer_first_name, customer_last_name, customer_preferred_cust_flag, customer_birth_country, customer_login, customer_email_address, dyear]])
                                          +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, c_preferred_cust_flag AS customer_preferred_cust_flag, c_birth_country AS customer_birth_country, c_login AS customer_login, c_email_address AS customer_email_address, CAST(2001 AS INTEGER) AS dyear, ((((cs_ext_list_price - cs_ext_wholesale_cost) - cs_ext_discount_amt) + cs_ext_sales_price) / 2) AS $f8])
                                             +- HashJoin(joinType=[InnerJoin], where=[(c_customer_sk = cs_bill_customer_sk)], select=[cs_bill_customer_sk, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address], build=[right])
                                                :- Exchange(distribution=[hash[cs_bill_customer_sk]])
                                                :  +- Calc(select=[cs_bill_customer_sk, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price])
                                                :     +- HashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_bill_customer_sk, cs_ext_discount_amt, cs_ext_sales_price, cs_ext_wholesale_cost, cs_ext_list_price, d_date_sk], isBroadcast=[true], build=[right])
                                                :        :- Reused(reference_id=[4])
                                                :        +- Reused(reference_id=[1])
                                                +- Exchange(distribution=[hash[c_customer_sk]])
                                                   +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address]]], fields=[c_customer_sk, c_customer_id, c_first_name, c_last_name, c_preferred_cust_flag, c_birth_country, c_login, c_email_address])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q50]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query50.tpl and seed 1819994127
select  
   s_store_name
  ,s_company_id
  ,s_street_number
  ,s_street_name
  ,s_street_type
  ,s_suite_number
  ,s_city
  ,s_county
  ,s_state
  ,s_zip
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk <= 30 ) then 1 else 0 end)  as `30 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 30) and 
                 (sr_returned_date_sk - ss_sold_date_sk <= 60) then 1 else 0 end )  as `31-60 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 60) and 
                 (sr_returned_date_sk - ss_sold_date_sk <= 90) then 1 else 0 end)  as `61-90 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk > 90) and
                 (sr_returned_date_sk - ss_sold_date_sk <= 120) then 1 else 0 end)  as `91-120 days` 
  ,sum(case when (sr_returned_date_sk - ss_sold_date_sk  > 120) then 1 else 0 end)  as `>120 days` 
from
   store_sales
  ,store_returns
  ,store
  ,date_dim d1
  ,date_dim d2
where
    d2.d_year = 2000
and d2.d_moy  = 9
and ss_ticket_number = sr_ticket_number
and ss_item_sk = sr_item_sk
and ss_sold_date_sk   = d1.d_date_sk
and sr_returned_date_sk   = d2.d_date_sk
and ss_customer_sk = sr_customer_sk
and ss_store_sk = s_store_sk
group by
   s_store_name
  ,s_company_id
  ,s_street_number
  ,s_street_name
  ,s_street_type
  ,s_suite_number
  ,s_city
  ,s_county
  ,s_state
  ,s_zip
order by s_store_name
        ,s_company_id
        ,s_street_number
        ,s_street_name
        ,s_street_type
        ,s_suite_number
        ,s_city
        ,s_county
        ,s_state
        ,s_zip
limit 100

-- end query 1 in stream 0 using template query50.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], sort5=[$5], sort6=[$6], sort7=[$7], sort8=[$8], sort9=[$9], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first], dir8=[ASC-nulls-first], dir9=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}], 30 days=[SUM($10)], 31-60 days=[SUM($11)], 61-90 days=[SUM($12)], 91-120 days=[SUM($13)], >120 days=[SUM($14)])
   +- LogicalProject(s_store_name=[$48], s_company_id=[$59], s_street_number=[$61], s_street_name=[$62], s_street_type=[$63], s_suite_number=[$64], s_city=[$65], s_county=[$66], s_state=[$67], s_zip=[$68], $f10=[CASE(<=(-($23, $0), 30), 1, 0)], $f11=[CASE(AND(>(-($23, $0), 30), <=(-($23, $0), 60)), 1, 0)], $f12=[CASE(AND(>(-($23, $0), 60), <=(-($23, $0), 90)), 1, 0)], $f13=[CASE(AND(>(-($23, $0), 90), <=(-($23, $0), 120)), 1, 0)], $f14=[CASE(>(-($23, $0), 120), 1, 0)])
      +- LogicalFilter(condition=[AND(=($106, 2000), =($108, 9), =($9, $32), =($2, $25), =($0, $72), =($23, $100), =($3, $26), =($7, $43))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
            :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[s_store_name ASC, s_company_id ASC, s_street_number ASC, s_street_name ASC, s_street_type ASC, s_suite_number ASC, s_city ASC, s_county ASC, s_state ASC, s_zip ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[s_store_name ASC, s_company_id ASC, s_street_number ASC, s_street_name ASC, s_street_type ASC, s_suite_number ASC, s_city ASC, s_county ASC, s_state ASC, s_zip ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[s_store_name, s_company_id, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip], select=[s_store_name, s_company_id, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, Final_SUM(sum$0) AS 30 days, Final_SUM(sum$1) AS 31-60 days, Final_SUM(sum$2) AS 61-90 days, Final_SUM(sum$3) AS 91-120 days, Final_SUM(sum$4) AS >120 days])
         +- Exchange(distribution=[hash[s_store_name, s_company_id, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip]])
            +- LocalHashAggregate(groupBy=[s_store_name, s_company_id, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip], select=[s_store_name, s_company_id, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, Partial_SUM($f10) AS sum$0, Partial_SUM($f11) AS sum$1, Partial_SUM($f12) AS sum$2, Partial_SUM($f13) AS sum$3, Partial_SUM($f14) AS sum$4])
               +- Calc(select=[s_store_name, s_company_id, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip, CASE(((sr_returned_date_sk - ss_sold_date_sk) <= 30), 1, 0) AS $f10, CASE((((sr_returned_date_sk - ss_sold_date_sk) > 30) AND ((sr_returned_date_sk - ss_sold_date_sk) <= 60)), 1, 0) AS $f11, CASE((((sr_returned_date_sk - ss_sold_date_sk) > 60) AND ((sr_returned_date_sk - ss_sold_date_sk) <= 90)), 1, 0) AS $f12, CASE((((sr_returned_date_sk - ss_sold_date_sk) > 90) AND ((sr_returned_date_sk - ss_sold_date_sk) <= 120)), 1, 0) AS $f13, CASE(((sr_returned_date_sk - ss_sold_date_sk) > 120), 1, 0) AS $f14])
                  +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_sold_date_sk, ss_store_sk, sr_returned_date_sk, s_store_sk, s_store_name, s_company_id, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_store_sk, sr_returned_date_sk])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_store_sk, sr_returned_date_sk, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_store_sk, sr_returned_date_sk])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[((ss_ticket_number = sr_ticket_number) AND (ss_item_sk = sr_item_sk) AND (ss_customer_sk = sr_customer_sk))], select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number], build=[right])\n:     :     :- [#3] Exchange(distribution=[hash[ss_ticket_number, ss_item_sk, ss_customer_sk]])\n:     :     +- [#4] Exchange(distribution=[hash[sr_ticket_number, sr_item_sk, sr_customer_sk]])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :- Exchange(distribution=[broadcast])
                     :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_store_name, s_company_id, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip]]], fields=[s_store_sk, s_store_name, s_company_id, s_street_number, s_street_name, s_street_type, s_suite_number, s_city, s_county, s_state, s_zip])
                     :- Exchange(distribution=[broadcast])
                     :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk]]], fields=[d_date_sk])
                     :- Exchange(distribution=[hash[ss_ticket_number, ss_item_sk, ss_customer_sk]])
                     :  +- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number], where=[ss_customer_sk IS NOT NULL])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ticket_number])
                     +- Exchange(distribution=[hash[sr_ticket_number, sr_item_sk, sr_customer_sk]])
                        +- Calc(select=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number])
                           +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(sr_returned_date_sk = d_date_sk)], select=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number], where=[sr_customer_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number]]], fields=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number])\n+- [#1] Exchange(distribution=[broadcast])\n])
                              :- Exchange(distribution=[broadcast])
                              :  +- Calc(select=[d_date_sk], where=[((d_year = 2000) AND (d_moy = 9))])
                              :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number]]], fields=[sr_returned_date_sk, sr_item_sk, sr_customer_sk, sr_ticket_number])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q51]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query51.tpl and seed 1819994127
WITH web_v1 as (
select
  ws_item_sk item_sk, d_date,
  sum(sum(ws_sales_price))
      over (partition by ws_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from web_sales
    ,date_dim
where ws_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ws_item_sk is not NULL
group by ws_item_sk, d_date),
store_v1 as (
select
  ss_item_sk item_sk, d_date,
  sum(sum(ss_sales_price))
      over (partition by ss_item_sk order by d_date rows between unbounded preceding and current row) cume_sales
from store_sales
    ,date_dim
where ss_sold_date_sk=d_date_sk
  and d_month_seq between 1212 and 1212+11
  and ss_item_sk is not NULL
group by ss_item_sk, d_date)
 select  *
from (select item_sk
     ,d_date
     ,web_sales
     ,store_sales
     ,max(web_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) web_cumulative
     ,max(store_sales)
         over (partition by item_sk order by d_date rows between unbounded preceding and current row) store_cumulative
     from (select case when web.item_sk is not null then web.item_sk else store.item_sk end item_sk
                 ,case when web.d_date is not null then web.d_date else store.d_date end d_date
                 ,web.cume_sales web_sales
                 ,store.cume_sales store_sales
           from web_v1 web full outer join store_v1 store on (web.item_sk = store.item_sk
                                                          and web.d_date = store.d_date)
          )x )y
where web_cumulative > store_cumulative
order by item_sk
        ,d_date
limit 100

-- end query 1 in stream 0 using template query51.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalProject(item_sk=[$0], d_date=[$1], web_sales=[$2], store_sales=[$3], web_cumulative=[$4], store_cumulative=[$5])
   +- LogicalFilter(condition=[>($4, $5)])
      +- LogicalProject(item_sk=[CASE(IS NOT NULL($0), $0, $3)], d_date=[CASE(IS NOT NULL($1), $1, $4)], web_sales=[$2], store_sales=[$5], web_cumulative=[MAX($2) OVER (PARTITION BY CASE(IS NOT NULL($0), $0, $3) ORDER BY CASE(IS NOT NULL($1), $1, $4) NULLS FIRST ROWS UNBOUNDED PRECEDING)], store_cumulative=[MAX($5) OVER (PARTITION BY CASE(IS NOT NULL($0), $0, $3) ORDER BY CASE(IS NOT NULL($1), $1, $4) NULLS FIRST ROWS UNBOUNDED PRECEDING)])
         +- LogicalJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[full])
            :- LogicalProject(item_sk=[$0], d_date=[$1], cume_sales=[CASE(>(COUNT($2) OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST ROWS UNBOUNDED PRECEDING), 0), $SUM0($2) OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST ROWS UNBOUNDED PRECEDING), null:DOUBLE)])
            :  +- LogicalAggregate(group=[{0, 1}], agg#0=[SUM($2)])
            :     +- LogicalProject(item_sk=[$3], d_date=[$36], ws_sales_price=[$21])
            :        +- LogicalFilter(condition=[AND(=($0, $34), >=($37, 1212), <=($37, +(1212, 11)), IS NOT NULL($3))])
            :           +- LogicalJoin(condition=[true], joinType=[inner])
            :              :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
            :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            +- LogicalProject(item_sk=[$0], d_date=[$1], cume_sales=[CASE(>(COUNT($2) OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST ROWS UNBOUNDED PRECEDING), 0), $SUM0($2) OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST ROWS UNBOUNDED PRECEDING), null:DOUBLE)])
               +- LogicalAggregate(group=[{0, 1}], agg#0=[SUM($2)])
                  +- LogicalProject(item_sk=[$2], d_date=[$25], ss_sales_price=[$13])
                     +- LogicalFilter(condition=[AND(=($0, $23), >=($26, 1212), <=($26, +(1212, 11)), IS NOT NULL($2))])
                        +- LogicalJoin(condition=[true], joinType=[inner])
                           :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[item_sk ASC, d_date ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[item_sk ASC, d_date ASC], offset=[0], fetch=[100], global=[false])
      +- Calc(select=[$2 AS item_sk, $3 AS d_date, cume_sales AS web_sales, cume_sales0 AS store_sales, w0$o0 AS web_cumulative, w0$o1 AS store_cumulative], where=[(w0$o0 > w0$o1)])
         +- OverAggregate(partitionBy=[$2], orderBy=[$3 ASC], window#0=[MAX(cume_sales) AS w0$o0, MAX(cume_sales0) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[cume_sales, cume_sales0, $2, $3, w0$o0, w0$o1])
            +- Sort(orderBy=[$2 ASC, $3 ASC])
               +- Exchange(distribution=[hash[$2]])
                  +- Calc(select=[cume_sales0 AS cume_sales, cume_sales AS cume_sales0, CASE(item_sk0 IS NOT NULL, item_sk0, item_sk) AS $2, CASE(d_date0 IS NOT NULL, d_date0, d_date) AS $3])
                     +- HashJoin(joinType=[FullOuterJoin], where=[((item_sk0 = item_sk) AND (d_date0 = d_date))], select=[item_sk, d_date, cume_sales, item_sk0, d_date0, cume_sales0], build=[right])
                        :- Exchange(distribution=[hash[item_sk, d_date]])
                        :  +- Calc(select=[item_sk, d_date, CASE((w0$o0 > 0), w0$o1, null:DOUBLE) AS cume_sales])
                        :     +- OverAggregate(partitionBy=[item_sk], orderBy=[d_date ASC], window#0=[COUNT($f2) AS w0$o0, $SUM0($f2) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[item_sk, d_date, $f2, w0$o0, w0$o1])
                        :        +- Sort(orderBy=[item_sk ASC, d_date ASC])
                        :           +- Exchange(distribution=[hash[item_sk]])
                        :              +- HashAggregate(isMerge=[true], groupBy=[item_sk, d_date], select=[item_sk, d_date, Final_SUM(sum$0) AS $f2])
                        :                 +- Exchange(distribution=[hash[item_sk, d_date]])
                        :                    +- LocalHashAggregate(groupBy=[item_sk, d_date], select=[item_sk, d_date, Partial_SUM(ss_sales_price) AS sum$0])
                        :                       +- Calc(select=[ss_item_sk AS item_sk, d_date, ss_sales_price])
                        :                          +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_sales_price, d_date_sk, d_date], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_sales_price], where=[ss_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :                             :- Exchange(distribution=[broadcast])(reuse_id=[1])
                        :                             :  +- Calc(select=[d_date_sk, d_date], where=[SEARCH(d_month_seq, Sarg[[1212..1223]])])
                        :                             :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date, d_month_seq]]], fields=[d_date_sk, d_date, d_month_seq])
                        :                             +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_sales_price])
                        +- Exchange(distribution=[hash[item_sk, d_date]])
                           +- Calc(select=[item_sk, d_date, CASE((w0$o0 > 0), w0$o1, null:DOUBLE) AS cume_sales])
                              +- OverAggregate(partitionBy=[item_sk], orderBy=[d_date ASC], window#0=[COUNT($f2) AS w0$o0, $SUM0($f2) AS w0$o1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[item_sk, d_date, $f2, w0$o0, w0$o1])
                                 +- Sort(orderBy=[item_sk ASC, d_date ASC])
                                    +- Exchange(distribution=[hash[item_sk]])
                                       +- HashAggregate(isMerge=[true], groupBy=[item_sk, d_date], select=[item_sk, d_date, Final_SUM(sum$0) AS $f2])
                                          +- Exchange(distribution=[hash[item_sk, d_date]])
                                             +- LocalHashAggregate(groupBy=[item_sk, d_date], select=[item_sk, d_date, Partial_SUM(ws_sales_price) AS sum$0])
                                                +- Calc(select=[ws_item_sk AS item_sk, d_date, ws_sales_price])
                                                   +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_sales_price, d_date_sk, d_date], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_sales_price])\n+- [#2] Exchange(distribution=[broadcast])\n])
                                                      :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_sales_price])
                                                      +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q52]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query52.tpl and seed 1819994127
select  dt.d_year
 	,item.i_brand_id brand_id
 	,item.i_brand brand
 	,sum(ss_ext_sales_price) ext_price
 from date_dim dt
     ,store_sales
     ,item
 where dt.d_date_sk = store_sales.ss_sold_date_sk
    and store_sales.ss_item_sk = item.i_item_sk
    and item.i_manager_id = 1
    and dt.d_moy=12
    and dt.d_year=1998
 group by dt.d_year
 	,item.i_brand
 	,item.i_brand_id
 order by dt.d_year
 	,ext_price desc
 	,brand_id
limit 100 

-- end query 1 in stream 0 using template query52.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$3], sort2=[$1], dir0=[ASC-nulls-first], dir1=[DESC-nulls-last], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalProject(d_year=[$0], brand_id=[$2], brand=[$1], ext_price=[$3])
   +- LogicalAggregate(group=[{0, 1, 2}], ext_price=[SUM($3)])
      +- LogicalProject(d_year=[$6], brand=[$59], brand_id=[$58], ss_ext_sales_price=[$43])
         +- LogicalFilter(condition=[AND(=($0, $28), =($30, $51), =($71, 1), =($8, 12), =($6, 1998))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
               :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
               +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[d_year, brand_id, brand, ext_price])
+- SortLimit(orderBy=[d_year ASC, ext_price DESC, brand_id ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[d_year ASC, ext_price DESC, brand_id ASC], offset=[0], fetch=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[d_year, brand, brand_id], select=[d_year, brand, brand_id, Final_SUM(sum$0) AS ext_price])
            +- Exchange(distribution=[hash[d_year, brand, brand_id]])
               +- LocalHashAggregate(groupBy=[d_year, brand, brand_id], select=[d_year, brand, brand_id, Partial_SUM(ss_ext_sales_price) AS sum$0])
                  +- Calc(select=[CAST(1998 AS INTEGER) AS d_year, i_brand AS brand, i_brand_id AS brand_id, ss_ext_sales_price])
                     +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(d_date_sk = ss_sold_date_sk)], select=[ss_sold_date_sk, ss_ext_sales_price, i_brand_id, i_brand, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_ext_sales_price, i_brand_id, i_brand])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price, i_item_sk, i_brand_id, i_brand], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price], where=[ss_sold_date_sk IS NOT NULL])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :- Exchange(distribution=[broadcast])
                        :  +- Calc(select=[d_date_sk], where=[((d_moy = 12) AND (d_year = 1998))])
                        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                        :- Exchange(distribution=[broadcast])
                        :  +- Calc(select=[i_item_sk, i_brand_id, i_brand], where=[(i_manager_id = 1)])
                        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_brand, i_manager_id]]], fields=[i_item_sk, i_brand_id, i_brand, i_manager_id])
                        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q53]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query53.tpl and seed 1819994127
select  * from 
(select i_manufact_id,
sum(ss_sales_price) sum_sales,
avg(sum(ss_sales_price)) over (partition by i_manufact_id) avg_quarterly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
ss_sold_date_sk = d_date_sk and
ss_store_sk = s_store_sk and
d_month_seq in (1212,1212+1,1212+2,1212+3,1212+4,1212+5,1212+6,1212+7,1212+8,1212+9,1212+10,1212+11) and
((i_category in ('Books','Children','Electronics') and
i_class in ('personal','portable','reference','self-help') and
i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		'exportiunivamalg #9','scholaramalgamalg #9'))
or(i_category in ('Women','Music','Men') and
i_class in ('accessories','classical','fragrances','pants') and
i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		'importoamalg #1')))
group by i_manufact_id, d_qoy ) tmp1
where case when avg_quarterly_sales > 0 
	then abs (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales 
	else null end > 0.1
order by avg_quarterly_sales,
	 sum_sales,
	 i_manufact_id
limit 100

-- end query 1 in stream 0 using template query53.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$2], sort1=[$1], sort2=[$0], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalProject(i_manufact_id=[$0], sum_sales=[$1], avg_quarterly_sales=[$2])
   +- LogicalFilter(condition=[>(CASE(>($2, 0), /(ABS(-($1, $2)), $2), null:DOUBLE), 0.1:DECIMAL(2, 1))])
      +- LogicalProject(i_manufact_id=[$0], sum_sales=[$2], avg_quarterly_sales=[/(CASE(>(COUNT($2) OVER (PARTITION BY $0), 0), $SUM0($2) OVER (PARTITION BY $0), null:DOUBLE), COUNT($2) OVER (PARTITION BY $0))])
         +- LogicalAggregate(group=[{0, 1}], sum_sales=[SUM($2)])
            +- LogicalProject(i_manufact_id=[$13], d_qoy=[$55], ss_sales_price=[$35])
               +- LogicalFilter(condition=[AND(=($24, $0), =($22, $45), =($29, $73), OR(=($48, 1212), =($48, +(1212, 1)), =($48, +(1212, 2)), =($48, +(1212, 3)), =($48, +(1212, 4)), =($48, +(1212, 5)), =($48, +(1212, 6)), =($48, +(1212, 7)), =($48, +(1212, 8)), =($48, +(1212, 9)), =($48, +(1212, 10)), =($48, +(1212, 11))), OR(AND(OR(=($12, _UTF-16LE'Books'), =($12, _UTF-16LE'Children'), =($12, _UTF-16LE'Electronics')), OR(=($10, _UTF-16LE'personal'), =($10, _UTF-16LE'portable'), =($10, _UTF-16LE'reference'), =($10, _UTF-16LE'self-help')), OR(=($8, _UTF-16LE'scholaramalgamalg #14'), =($8, _UTF-16LE'scholaramalgamalg #7'), =($8, _UTF-16LE'exportiunivamalg #9'), =($8, _UTF-16LE'scholaramalgamalg #9'))), AND(OR(=($12, _UTF-16LE'Women'), =($12, _UTF-16LE'Music'), =($12, _UTF-16LE'Men')), OR(=($10, _UTF-16LE'accessories'), =($10, _UTF-16LE'classical'), =($10, _UTF-16LE'fragrances'), =($10, _UTF-16LE'pants')), OR(=($8, _UTF-16LE'amalgimporto #1'), =($8, _UTF-16LE'edu packscholar #1'), =($8, _UTF-16LE'exportiimporto #1'), =($8, _UTF-16LE'importoamalg #1')))))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                     :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                     :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[avg_quarterly_sales ASC, sum_sales ASC, i_manufact_id ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[avg_quarterly_sales ASC, sum_sales ASC, i_manufact_id ASC], offset=[0], fetch=[100], global=[false])
      +- Calc(select=[i_manufact_id, sum_sales, (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0) AS avg_quarterly_sales], where=[CASE(((CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0) > 0), ((ABS((sum_sales - (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0))) / (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0)) > 0.1), false)])
         +- OverAggregate(partitionBy=[i_manufact_id], window#0=[COUNT(sum_sales) AS w0$o0, $SUM0(sum_sales) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[i_manufact_id, sum_sales, w0$o0, w0$o1])
            +- Sort(orderBy=[i_manufact_id ASC])
               +- Exchange(distribution=[hash[i_manufact_id]])
                  +- Calc(select=[i_manufact_id, sum_sales])
                     +- HashAggregate(isMerge=[true], groupBy=[i_manufact_id, d_qoy], select=[i_manufact_id, d_qoy, Final_SUM(sum$0) AS sum_sales])
                        +- Exchange(distribution=[hash[i_manufact_id, d_qoy]])
                           +- LocalHashAggregate(groupBy=[i_manufact_id, d_qoy], select=[i_manufact_id, d_qoy, Partial_SUM(ss_sales_price) AS sum$0])
                              +- Calc(select=[i_manufact_id, d_qoy, ss_sales_price])
                                 +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, ss_sales_price, i_manufact_id, d_qoy, s_store_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk, ss_sales_price, i_manufact_id, d_qoy])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_store_sk, ss_sales_price, i_manufact_id, d_date_sk, d_qoy], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_sales_price, i_manufact_id])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price, i_item_sk, i_manufact_id], isBroadcast=[true], build=[right])\n:     :     :- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                    :- Exchange(distribution=[broadcast])
                                    :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk]]], fields=[s_store_sk])
                                    :- Exchange(distribution=[broadcast])
                                    :  +- Calc(select=[d_date_sk, d_qoy], where=[SEARCH(d_month_seq, Sarg[1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223])])
                                    :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_month_seq, d_qoy]]], fields=[d_date_sk, d_month_seq, d_qoy])
                                    :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price])
                                    +- Exchange(distribution=[broadcast])
                                       +- Calc(select=[i_item_sk, i_manufact_id], where=[((SEARCH(i_category, Sarg[_UTF-16LE'Books', _UTF-16LE'Children', _UTF-16LE'Electronics']) AND SEARCH(i_class, Sarg[_UTF-16LE'personal', _UTF-16LE'portable', _UTF-16LE'reference', _UTF-16LE'self-help']) AND SEARCH(i_brand, Sarg[_UTF-16LE'exportiunivamalg #9', _UTF-16LE'scholaramalgamalg #14', _UTF-16LE'scholaramalgamalg #7', _UTF-16LE'scholaramalgamalg #9'])) OR (SEARCH(i_category, Sarg[_UTF-16LE'Men', _UTF-16LE'Music', _UTF-16LE'Women']) AND SEARCH(i_class, Sarg[_UTF-16LE'accessories', _UTF-16LE'classical', _UTF-16LE'fragrances', _UTF-16LE'pants']) AND SEARCH(i_brand, Sarg[_UTF-16LE'amalgimporto #1', _UTF-16LE'edu packscholar #1', _UTF-16LE'exportiimporto #1', _UTF-16LE'importoamalg #1'])))])
                                          +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand, i_class, i_category, i_manufact_id]]], fields=[i_item_sk, i_brand, i_class, i_category, i_manufact_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q55]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query55.tpl and seed 2031708268
select  i_brand_id brand_id, i_brand brand,
 	sum(ss_ext_sales_price) ext_price
 from date_dim, store_sales, item
 where d_date_sk = ss_sold_date_sk
 	and ss_item_sk = i_item_sk
 	and i_manager_id=36
 	and d_moy=12
 	and d_year=2001
 group by i_brand, i_brand_id
 order by ext_price desc, i_brand_id
limit 100 

-- end query 1 in stream 0 using template query55.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$2], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalProject(brand_id=[$1], brand=[$0], ext_price=[$2])
   +- LogicalAggregate(group=[{0, 1}], ext_price=[SUM($2)])
      +- LogicalProject(brand=[$59], brand_id=[$58], ss_ext_sales_price=[$43])
         +- LogicalFilter(condition=[AND(=($0, $28), =($30, $51), =($71, 36), =($8, 12), =($6, 2001))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
               :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
               +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[brand_id, brand, ext_price])
+- SortLimit(orderBy=[ext_price DESC, brand_id ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[ext_price DESC, brand_id ASC], offset=[0], fetch=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[brand, brand_id], select=[brand, brand_id, Final_SUM(sum$0) AS ext_price])
            +- Exchange(distribution=[hash[brand, brand_id]])
               +- LocalHashAggregate(groupBy=[brand, brand_id], select=[brand, brand_id, Partial_SUM(ss_ext_sales_price) AS sum$0])
                  +- Calc(select=[i_brand AS brand, i_brand_id AS brand_id, ss_ext_sales_price])
                     +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(d_date_sk = ss_sold_date_sk)], select=[ss_sold_date_sk, ss_ext_sales_price, i_brand_id, i_brand, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_ext_sales_price, i_brand_id, i_brand])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price, i_item_sk, i_brand_id, i_brand], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price], where=[ss_sold_date_sk IS NOT NULL])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :- Exchange(distribution=[broadcast])
                        :  +- Calc(select=[d_date_sk], where=[((d_moy = 12) AND (d_year = 2001))])
                        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                        :- Exchange(distribution=[broadcast])
                        :  +- Calc(select=[i_item_sk, i_brand_id, i_brand], where=[(i_manager_id = 36)])
                        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_brand, i_manager_id]]], fields=[i_item_sk, i_brand_id, i_brand, i_manager_id])
                        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q56]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query56.tpl and seed 1951559352
with ss as (
 select i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where i_item_id in (select
     i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -8 
 group by i_item_id),
 cs as (
 select i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -8 
 group by i_item_id),
 ws as (
 select i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from item
where i_color in ('orchid','chiffon','lace'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 2000
 and     d_moy                   = 1
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -8
 group by i_item_id)
  select  i_item_id ,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by total_sales
 limit 100

-- end query 1 in stream 0 using template query56.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
   +- LogicalUnion(all=[true])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(i_item_id=[$0], total_sales=[$1])
      :  :  +- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
      :  :     +- LogicalProject(i_item_id=[$65], ss_ext_sales_price=[$15])
      :  :        +- LogicalFilter(condition=[AND(IN($65, {
LogicalProject(i_item_id=[$1])
  LogicalFilter(condition=[OR(=($17, _UTF-16LE'orchid'), =($17, _UTF-16LE'chiffon'), =($17, _UTF-16LE'lace'))])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
}), =($2, $64), =($0, $23), =($29, 2000), =($31, 1), =($6, $51), =($62, -8))])
      :  :           +- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
      :  :              :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
      :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
      :  +- LogicalProject(i_item_id=[$0], total_sales=[$1])
      :     +- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
      :        +- LogicalProject(i_item_id=[$76], cs_ext_sales_price=[$23])
      :           +- LogicalFilter(condition=[AND(IN($76, {
LogicalProject(i_item_id=[$1])
  LogicalFilter(condition=[OR(=($17, _UTF-16LE'orchid'), =($17, _UTF-16LE'chiffon'), =($17, _UTF-16LE'lace'))])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
}), =($15, $75), =($0, $34), =($40, 2000), =($42, 1), =($6, $62), =($73, -8))])
      :              +- LogicalJoin(condition=[true], joinType=[inner])
      :                 :- LogicalJoin(condition=[true], joinType=[inner])
      :                 :  :- LogicalJoin(condition=[true], joinType=[inner])
      :                 :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
      :                 :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
      :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
      +- LogicalProject(i_item_id=[$0], total_sales=[$1])
         +- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
            +- LogicalProject(i_item_id=[$76], ws_ext_sales_price=[$23])
               +- LogicalFilter(condition=[AND(IN($76, {
LogicalProject(i_item_id=[$1])
  LogicalFilter(condition=[OR(=($17, _UTF-16LE'orchid'), =($17, _UTF-16LE'chiffon'), =($17, _UTF-16LE'lace'))])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
}), =($3, $75), =($0, $34), =($40, 2000), =($42, 1), =($7, $62), =($73, -8))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                     :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                     :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
                     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[total_sales ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[total_sales ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[false], groupBy=[i_item_id], select=[i_item_id, SUM(total_sales) AS total_sales])
         +- Union(all=[true], union=[i_item_id, total_sales])
            :- Union(all=[true], union=[i_item_id, total_sales])
            :  :- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_SUM(sum$0) AS total_sales])
            :  :  +- Exchange(distribution=[hash[i_item_id]])
            :  :     +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_SUM(ss_ext_sales_price) AS sum$0])
            :  :        +- Calc(select=[ss_ext_sales_price, i_item_id])
            :  :           +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, ss_ext_sales_price, i_item_sk, i_item_id], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_item_sk, ss_ext_sales_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_addr_sk = ca_address_sk)], select=[ss_item_sk, ss_addr_sk, ss_ext_sales_price, ca_address_sk], build=[right])\n:     :- [#2] Exchange(distribution=[hash[ss_addr_sk]])\n:     +- [#3] Exchange(distribution=[hash[ca_address_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :  :              :- Exchange(distribution=[broadcast])(reuse_id=[1])
            :  :              :  +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[LeftSemiJoin], where=[(i_item_id = i_item_id0)], select=[i_item_sk, i_item_id], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])\n+- [#2] Exchange(distribution=[broadcast])\n])
            :  :              :     :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])
            :  :              :     +- Exchange(distribution=[broadcast])
            :  :              :        +- Calc(select=[i_item_id], where=[SEARCH(i_color, Sarg[_UTF-16LE'chiffon', _UTF-16LE'lace', _UTF-16LE'orchid'])])
            :  :              :           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_id, i_color]]], fields=[i_item_id, i_color])
            :  :              :- Exchange(distribution=[hash[ss_addr_sk]])
            :  :              :  +- Calc(select=[ss_item_sk, ss_addr_sk, ss_ext_sales_price])
            :  :              :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price], where=[ss_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :  :              :        :- Exchange(distribution=[broadcast])(reuse_id=[2])
            :  :              :        :  +- Calc(select=[d_date_sk], where=[((d_year = 2000) AND (d_moy = 1))])
            :  :              :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
            :  :              :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price])
            :  :              +- Exchange(distribution=[hash[ca_address_sk]])(reuse_id=[3])
            :  :                 +- Calc(select=[ca_address_sk], where=[(ca_gmt_offset = -8)])
            :  :                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_gmt_offset]]], fields=[ca_address_sk, ca_gmt_offset])
            :  +- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_SUM(sum$0) AS total_sales])
            :     +- Exchange(distribution=[hash[i_item_id]])
            :        +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_SUM(cs_ext_sales_price) AS sum$0])
            :           +- Calc(select=[cs_ext_sales_price, i_item_id])
            :              +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_item_sk = i_item_sk)], select=[cs_item_sk, cs_ext_sales_price, i_item_sk, i_item_id], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_item_sk, cs_ext_sales_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(cs_bill_addr_sk = ca_address_sk)], select=[cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price, ca_address_sk], build=[right])\n:     :- [#2] Exchange(distribution=[hash[cs_bill_addr_sk]])\n:     +- [#3] Exchange(distribution=[hash[ca_address_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :                 :- Reused(reference_id=[1])
            :                 :- Exchange(distribution=[hash[cs_bill_addr_sk]])
            :                 :  +- Calc(select=[cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price])
            :                 :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price], where=[cs_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price]]], fields=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :                 :        :- Reused(reference_id=[2])
            :                 :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price]]], fields=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price])
            :                 +- Reused(reference_id=[3])
            +- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_SUM(sum$0) AS total_sales])
               +- Exchange(distribution=[hash[i_item_id]])
                  +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_SUM(ws_ext_sales_price) AS sum$0])
                     +- Calc(select=[ws_ext_sales_price, i_item_id])
                        +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_item_sk = i_item_sk)], select=[ws_item_sk, ws_ext_sales_price, i_item_sk, i_item_id], isBroadcast=[true], build=[right])\n:- Calc(select=[ws_item_sk, ws_ext_sales_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ws_bill_addr_sk = ca_address_sk)], select=[ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price, ca_address_sk], build=[right])\n:     :- [#2] Exchange(distribution=[hash[ws_bill_addr_sk]])\n:     +- [#3] Exchange(distribution=[hash[ca_address_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                           :- Reused(reference_id=[1])
                           :- Exchange(distribution=[hash[ws_bill_addr_sk]])
                           :  +- Calc(select=[ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price])
                           :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price])\n+- [#2] Exchange(distribution=[broadcast])\n])
                           :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price])
                           :        +- Reused(reference_id=[2])
                           +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q57]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query57.tpl and seed 2031708268
with v1 as(
 select i_category, i_brand,
        cc_name,
        d_year, d_moy,
        sum(cs_sales_price) sum_sales,
        avg(sum(cs_sales_price)) over
          (partition by i_category, i_brand,
                     cc_name, d_year)
          avg_monthly_sales,
        rank() over
          (partition by i_category, i_brand,
                     cc_name
           order by d_year, d_moy) rn
 from item, catalog_sales, date_dim, call_center
 where cs_item_sk = i_item_sk and
       cs_sold_date_sk = d_date_sk and
       cc_call_center_sk= cs_call_center_sk and
       (
         d_year = 2000 or
         ( d_year = 2000-1 and d_moy =12) or
         ( d_year = 2000+1 and d_moy =1)
       )
 group by i_category, i_brand,
          cc_name , d_year, d_moy),
 v2 as(
 select v1.i_category, v1.i_brand
        ,v1.d_year, v1.d_moy
        ,v1.avg_monthly_sales
        ,v1.sum_sales, v1_lag.sum_sales psum, v1_lead.sum_sales nsum
 from v1, v1 v1_lag, v1 v1_lead
 where v1.i_category = v1_lag.i_category and
       v1.i_category = v1_lead.i_category and
       v1.i_brand = v1_lag.i_brand and
       v1.i_brand = v1_lead.i_brand and
       v1. cc_name = v1_lag. cc_name and
       v1. cc_name = v1_lead. cc_name and
       v1.rn = v1_lag.rn + 1 and
       v1.rn = v1_lead.rn - 1)
  select  *
 from v2
 where  d_year = 2000 and
        avg_monthly_sales > 0 and
        case when avg_monthly_sales > 0 then abs(sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
 order by sum_sales - avg_monthly_sales, 3
 limit 100

-- end query 1 in stream 0 using template query57.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(i_category=[$0], i_brand=[$1], d_year=[$2], d_moy=[$3], avg_monthly_sales=[$4], sum_sales=[$5], psum=[$6], nsum=[$7])
+- LogicalSort(sort0=[$8], sort1=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
   +- LogicalProject(i_category=[$0], i_brand=[$1], d_year=[$2], d_moy=[$3], avg_monthly_sales=[$4], sum_sales=[$5], psum=[$6], nsum=[$7], EXPR$8=[-($5, $4)])
      +- LogicalFilter(condition=[AND(=($2, 2000), >($4, 0), >(CASE(>($4, 0), /(ABS(-($5, $4)), $4), null:DOUBLE), 0.1:DECIMAL(2, 1)))])
         +- LogicalProject(i_category=[$0], i_brand=[$1], d_year=[$3], d_moy=[$4], avg_monthly_sales=[$6], sum_sales=[$5], psum=[$13], nsum=[$21])
            +- LogicalFilter(condition=[AND(=($0, $8), =($0, $16), =($1, $9), =($1, $17), =($2, $10), =($2, $18), =($7, +($15, 1)), =($7, -($23, 1)))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalProject(i_category=[$0], i_brand=[$1], cc_name=[$2], d_year=[$3], d_moy=[$4], sum_sales=[$5], avg_monthly_sales=[/(CASE(>(COUNT($5) OVER (PARTITION BY $0, $1, $2, $3), 0), $SUM0($5) OVER (PARTITION BY $0, $1, $2, $3), null:DOUBLE), COUNT($5) OVER (PARTITION BY $0, $1, $2, $3))], rn=[RANK() OVER (PARTITION BY $0, $1, $2 ORDER BY $3 NULLS FIRST, $4 NULLS FIRST)])
                  :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], sum_sales=[SUM($5)])
                  :  :     +- LogicalProject(i_category=[$12], i_brand=[$8], cc_name=[$90], d_year=[$62], d_moy=[$64], cs_sales_price=[$43])
                  :  :        +- LogicalFilter(condition=[AND(=($37, $0), =($22, $56), =($84, $33), OR(=($62, 2000), AND(=($62, -(2000, 1)), =($64, 12)), AND(=($62, +(2000, 1)), =($64, 1))))])
                  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
                  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :              :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                  :  :              :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
                  :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                  :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, call_center]])
                  :  +- LogicalProject(i_category=[$0], i_brand=[$1], cc_name=[$2], d_year=[$3], d_moy=[$4], sum_sales=[$5], avg_monthly_sales=[/(CASE(>(COUNT($5) OVER (PARTITION BY $0, $1, $2, $3), 0), $SUM0($5) OVER (PARTITION BY $0, $1, $2, $3), null:DOUBLE), COUNT($5) OVER (PARTITION BY $0, $1, $2, $3))], rn=[RANK() OVER (PARTITION BY $0, $1, $2 ORDER BY $3 NULLS FIRST, $4 NULLS FIRST)])
                  :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], sum_sales=[SUM($5)])
                  :        +- LogicalProject(i_category=[$12], i_brand=[$8], cc_name=[$90], d_year=[$62], d_moy=[$64], cs_sales_price=[$43])
                  :           +- LogicalFilter(condition=[AND(=($37, $0), =($22, $56), =($84, $33), OR(=($62, 2000), AND(=($62, -(2000, 1)), =($64, 12)), AND(=($62, +(2000, 1)), =($64, 1))))])
                  :              +- LogicalJoin(condition=[true], joinType=[inner])
                  :                 :- LogicalJoin(condition=[true], joinType=[inner])
                  :                 :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :                 :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                  :                 :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
                  :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                  :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, call_center]])
                  +- LogicalProject(i_category=[$0], i_brand=[$1], cc_name=[$2], d_year=[$3], d_moy=[$4], sum_sales=[$5], avg_monthly_sales=[/(CASE(>(COUNT($5) OVER (PARTITION BY $0, $1, $2, $3), 0), $SUM0($5) OVER (PARTITION BY $0, $1, $2, $3), null:DOUBLE), COUNT($5) OVER (PARTITION BY $0, $1, $2, $3))], rn=[RANK() OVER (PARTITION BY $0, $1, $2 ORDER BY $3 NULLS FIRST, $4 NULLS FIRST)])
                     +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], sum_sales=[SUM($5)])
                        +- LogicalProject(i_category=[$12], i_brand=[$8], cc_name=[$90], d_year=[$62], d_moy=[$64], cs_sales_price=[$43])
                           +- LogicalFilter(condition=[AND(=($37, $0), =($22, $56), =($84, $33), OR(=($62, 2000), AND(=($62, -(2000, 1)), =($64, 12)), AND(=($62, +(2000, 1)), =($64, 1))))])
                              +- LogicalJoin(condition=[true], joinType=[inner])
                                 :- LogicalJoin(condition=[true], joinType=[inner])
                                 :  :- LogicalJoin(condition=[true], joinType=[inner])
                                 :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                                 :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
                                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, call_center]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[i_category, i_brand, d_year, d_moy, avg_monthly_sales, sum_sales, psum, nsum])
+- SortLimit(orderBy=[EXPR$8 ASC, d_year ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[EXPR$8 ASC, d_year ASC], offset=[0], fetch=[100], global=[false])
         +- Calc(select=[i_category0 AS i_category, i_brand0 AS i_brand, d_year, d_moy, avg_monthly_sales, sum_sales0 AS sum_sales, sum_sales00 AS psum, sum_sales AS nsum, (sum_sales0 - avg_monthly_sales) AS EXPR$8])
            +- MultipleInput(readOrder=[2,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[((i_category0 = i_category) AND (i_brand0 = i_brand) AND (cc_name0 = cc_name) AND (rn = $f8))], select=[i_category, i_brand, cc_name, sum_sales, $f8, i_category0, i_brand0, cc_name0, d_year, d_moy, sum_sales0, avg_monthly_sales, rn, sum_sales00], build=[right])\n:- [#1] Exchange(distribution=[hash[i_category, i_brand, cc_name, $f8]], shuffle_mode=[BATCH])\n+- Calc(select=[i_category0 AS i_category, i_brand0 AS i_brand, cc_name0 AS cc_name, d_year, d_moy, sum_sales0 AS sum_sales, avg_monthly_sales, rn, sum_sales AS sum_sales0])\n   +- HashJoin(joinType=[InnerJoin], where=[((i_category0 = i_category) AND (i_brand0 = i_brand) AND (cc_name0 = cc_name) AND (rn = $f8))], select=[i_category, i_brand, cc_name, sum_sales, $f8, i_category0, i_brand0, cc_name0, d_year, d_moy, sum_sales0, avg_monthly_sales, rn], build=[right])\n      :- [#2] Exchange(distribution=[hash[i_category, i_brand, cc_name, $f8]], shuffle_mode=[BATCH])\n      +- [#3] Exchange(distribution=[hash[i_category, i_brand, cc_name, rn]])\n])
               :- Exchange(distribution=[hash[i_category, i_brand, cc_name, $f8]], shuffle_mode=[BATCH])
               :  +- Calc(select=[i_category, i_brand, cc_name, sum_sales, (w1$o0 - 1) AS $f8])
               :     +- OverAggregate(partitionBy=[i_category, i_brand, cc_name, d_year], window#0=[COUNT(sum_sales) AS w1$o0, $SUM0(sum_sales) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[i_category, i_brand, cc_name, d_year, d_moy, sum_sales, w0$o1, w1$o0, w0$o0])(reuse_id=[1])
               :        +- OverAggregate(partitionBy=[i_category, i_brand, cc_name], orderBy=[d_year ASC, d_moy ASC], window#0=[RANK(*) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[i_category, i_brand, cc_name, d_year, d_moy, sum_sales, w0$o1])
               :           +- Sort(orderBy=[i_category ASC, i_brand ASC, cc_name ASC, d_year ASC, d_moy ASC])
               :              +- Exchange(distribution=[hash[i_category, i_brand, cc_name]])
               :                 +- HashAggregate(isMerge=[true], groupBy=[i_category, i_brand, cc_name, d_year, d_moy], select=[i_category, i_brand, cc_name, d_year, d_moy, Final_SUM(sum$0) AS sum_sales])
               :                    +- Exchange(distribution=[hash[i_category, i_brand, cc_name, d_year, d_moy]])
               :                       +- LocalHashAggregate(groupBy=[i_category, i_brand, cc_name, d_year, d_moy], select=[i_category, i_brand, cc_name, d_year, d_moy, Partial_SUM(cs_sales_price) AS sum$0])
               :                          +- Calc(select=[i_category, i_brand, cc_name, d_year, d_moy, cs_sales_price])
               :                             +- HashJoin(joinType=[InnerJoin], where=[(cs_item_sk = i_item_sk)], select=[cs_item_sk, cs_sales_price, d_year, d_moy, cc_name, i_item_sk, i_brand, i_category], build=[right])
               :                                :- Exchange(distribution=[hash[cs_item_sk]])
               :                                :  +- Calc(select=[cs_item_sk, cs_sales_price, d_year, d_moy, cc_name])
               :                                :     +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cc_call_center_sk = cs_call_center_sk)], select=[cs_call_center_sk, cs_item_sk, cs_sales_price, d_year, d_moy, cc_call_center_sk, cc_name], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_call_center_sk, cs_item_sk, cs_sales_price, d_year, d_moy])\n:  +- HashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_call_center_sk, cs_item_sk, cs_sales_price, d_date_sk, d_year, d_moy], isBroadcast=[true], build=[right])\n:     :- Calc(select=[cs_sold_date_sk, cs_call_center_sk, cs_item_sk, cs_sales_price], where=[cs_sold_date_sk IS NOT NULL])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_call_center_sk, cs_item_sk, cs_sales_price]]], fields=[cs_sold_date_sk, cs_call_center_sk, cs_item_sk, cs_sales_price])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
               :                                :        :- Exchange(distribution=[broadcast])
               :                                :        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, call_center, project=[cc_call_center_sk, cc_name]]], fields=[cc_call_center_sk, cc_name])
               :                                :        :- Exchange(distribution=[broadcast])
               :                                :        :  +- Calc(select=[d_date_sk, d_year, d_moy], where=[((d_year = 2000) OR ((d_year = 1999) AND (d_moy = 12)) OR ((d_year = 2001) AND (d_moy = 1)))])
               :                                :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
               :                                :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_call_center_sk, cs_item_sk, cs_sales_price]]], fields=[cs_sold_date_sk, cs_call_center_sk, cs_item_sk, cs_sales_price])
               :                                +- Exchange(distribution=[hash[i_item_sk]])
               :                                   +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand, i_category]]], fields=[i_item_sk, i_brand, i_category])
               :- Exchange(distribution=[hash[i_category, i_brand, cc_name, $f8]], shuffle_mode=[BATCH])
               :  +- Calc(select=[i_category, i_brand, cc_name, sum_sales, (w1$o0 + 1) AS $f8])
               :     +- Reused(reference_id=[1])
               +- Exchange(distribution=[hash[i_category, i_brand, cc_name, rn]])
                  +- Calc(select=[i_category, i_brand, cc_name, CAST(2000 AS INTEGER) AS d_year, d_moy, sum_sales, (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0) AS avg_monthly_sales, w1$o0 AS rn], where=[((d_year = 2000) AND ((CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0) > 0) AND CASE(((CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0) > 0), ((ABS((sum_sales - (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0))) / (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0)) > 0.1), false))])
                     +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q59]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query59.tpl and seed 1819994127
with wss as 
 (select d_week_seq,
        ss_store_sk,
        sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then ss_sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales
 from store_sales,date_dim
 where d_date_sk = ss_sold_date_sk
 group by d_week_seq,ss_store_sk
 )
  select  s_store_name1,s_store_id1,d_week_seq1
       ,sun_sales1/sun_sales2,mon_sales1/mon_sales2
       ,tue_sales1/tue_sales1,wed_sales1/wed_sales2,thu_sales1/thu_sales2
       ,fri_sales1/fri_sales2,sat_sales1/sat_sales2
 from
 (select s_store_name s_store_name1,wss.d_week_seq d_week_seq1
        ,s_store_id s_store_id1,sun_sales sun_sales1
        ,mon_sales mon_sales1,tue_sales tue_sales1
        ,wed_sales wed_sales1,thu_sales thu_sales1
        ,fri_sales fri_sales1,sat_sales sat_sales1
  from wss,store,date_dim d
  where d.d_week_seq = wss.d_week_seq and
        ss_store_sk = s_store_sk and 
        d_month_seq between 1185 and 1185 + 11) y,
 (select s_store_name s_store_name2,wss.d_week_seq d_week_seq2
        ,s_store_id s_store_id2,sun_sales sun_sales2
        ,mon_sales mon_sales2,tue_sales tue_sales2
        ,wed_sales wed_sales2,thu_sales thu_sales2
        ,fri_sales fri_sales2,sat_sales sat_sales2
  from wss,store,date_dim d
  where d.d_week_seq = wss.d_week_seq and
        ss_store_sk = s_store_sk and 
        d_month_seq between 1185+ 12 and 1185 + 23) x
 where s_store_id1=s_store_id2
   and d_week_seq1=d_week_seq2-52
 order by s_store_name1,s_store_id1,d_week_seq1
limit 100

-- end query 1 in stream 0 using template query59.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalProject(s_store_name1=[$0], s_store_id1=[$2], d_week_seq1=[$1], EXPR$3=[/($3, $13)], EXPR$4=[/($4, $14)], EXPR$5=[/($5, $5)], EXPR$6=[/($6, $16)], EXPR$7=[/($7, $17)], EXPR$8=[/($8, $18)], EXPR$9=[/($9, $19)])
   +- LogicalFilter(condition=[AND(=($2, $12), =($1, -($11, 52)))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(s_store_name1=[$14], d_week_seq1=[$0], s_store_id1=[$10], sun_sales1=[$2], mon_sales1=[$3], tue_sales1=[$4], wed_sales1=[$5], thu_sales1=[$6], fri_sales1=[$7], sat_sales1=[$8])
         :  +- LogicalFilter(condition=[AND(=($42, $0), =($1, $9), >=($41, 1185), <=($41, +(1185, 11)))])
         :     +- LogicalJoin(condition=[true], joinType=[inner])
         :        :- LogicalJoin(condition=[true], joinType=[inner])
         :        :  :- LogicalAggregate(group=[{0, 1}], sun_sales=[SUM($2)], mon_sales=[SUM($3)], tue_sales=[SUM($4)], wed_sales=[SUM($5)], thu_sales=[SUM($6)], fri_sales=[SUM($7)], sat_sales=[SUM($8)])
         :        :  :  +- LogicalProject(d_week_seq=[$27], ss_store_sk=[$7], $f2=[CASE(=($37, _UTF-16LE'Sunday'), $13, null:DOUBLE)], $f3=[CASE(=($37, _UTF-16LE'Monday'), $13, null:DOUBLE)], $f4=[CASE(=($37, _UTF-16LE'Tuesday'), $13, null:DOUBLE)], $f5=[CASE(=($37, _UTF-16LE'Wednesday'), $13, null:DOUBLE)], $f6=[CASE(=($37, _UTF-16LE'Thursday'), $13, null:DOUBLE)], $f7=[CASE(=($37, _UTF-16LE'Friday'), $13, null:DOUBLE)], $f8=[CASE(=($37, _UTF-16LE'Saturday'), $13, null:DOUBLE)])
         :        :  :     +- LogicalFilter(condition=[=($23, $0)])
         :        :  :        +- LogicalJoin(condition=[true], joinType=[inner])
         :        :  :           :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :        :  :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :        :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
         :        +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         +- LogicalProject(s_store_name2=[$14], d_week_seq2=[$0], s_store_id2=[$10], sun_sales2=[$2], mon_sales2=[$3], tue_sales2=[$4], wed_sales2=[$5], thu_sales2=[$6], fri_sales2=[$7], sat_sales2=[$8])
            +- LogicalFilter(condition=[AND(=($42, $0), =($1, $9), >=($41, +(1185, 12)), <=($41, +(1185, 23)))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalAggregate(group=[{0, 1}], sun_sales=[SUM($2)], mon_sales=[SUM($3)], tue_sales=[SUM($4)], wed_sales=[SUM($5)], thu_sales=[SUM($6)], fri_sales=[SUM($7)], sat_sales=[SUM($8)])
                  :  :  +- LogicalProject(d_week_seq=[$27], ss_store_sk=[$7], $f2=[CASE(=($37, _UTF-16LE'Sunday'), $13, null:DOUBLE)], $f3=[CASE(=($37, _UTF-16LE'Monday'), $13, null:DOUBLE)], $f4=[CASE(=($37, _UTF-16LE'Tuesday'), $13, null:DOUBLE)], $f5=[CASE(=($37, _UTF-16LE'Wednesday'), $13, null:DOUBLE)], $f6=[CASE(=($37, _UTF-16LE'Thursday'), $13, null:DOUBLE)], $f7=[CASE(=($37, _UTF-16LE'Friday'), $13, null:DOUBLE)], $f8=[CASE(=($37, _UTF-16LE'Saturday'), $13, null:DOUBLE)])
                  :  :     +- LogicalFilter(condition=[=($23, $0)])
                  :  :        +- LogicalJoin(condition=[true], joinType=[inner])
                  :  :           :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                  :  :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
                  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[s_store_name1, s_store_id1, d_week_seq1, (sun_sales1 / sun_sales2) AS EXPR$3, (mon_sales1 / mon_sales2) AS EXPR$4, (tue_sales1 / tue_sales1) AS EXPR$5, (wed_sales1 / wed_sales2) AS EXPR$6, (thu_sales1 / thu_sales2) AS EXPR$7, (fri_sales1 / fri_sales2) AS EXPR$8, (sat_sales1 / sat_sales2) AS EXPR$9])
+- SortLimit(orderBy=[s_store_name1 ASC, s_store_id1 ASC, d_week_seq1 ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[s_store_name1 ASC, s_store_id1 ASC, d_week_seq1 ASC], offset=[0], fetch=[100], global=[false])
         +- HashJoin(joinType=[InnerJoin], where=[((s_store_id1 = s_store_id2) AND (d_week_seq1 = $f10))], select=[s_store_id2, sun_sales2, mon_sales2, wed_sales2, thu_sales2, fri_sales2, sat_sales2, $f10, s_store_name1, d_week_seq1, s_store_id1, sun_sales1, mon_sales1, tue_sales1, wed_sales1, thu_sales1, fri_sales1, sat_sales1], build=[left])
            :- Exchange(distribution=[hash[s_store_id2, $f10]])
            :  +- Calc(select=[s_store_id AS s_store_id2, sun_sales AS sun_sales2, mon_sales AS mon_sales2, wed_sales AS wed_sales2, thu_sales AS thu_sales2, fri_sales AS fri_sales2, sat_sales AS sat_sales2, (d_week_seq - 52) AS $f10])
            :     +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[d_week_seq, ss_store_sk, sun_sales, mon_sales, wed_sales, thu_sales, fri_sales, sat_sales, s_store_sk, s_store_id], isBroadcast=[true], build=[right])\n:- Calc(select=[d_week_seq, ss_store_sk, sun_sales, mon_sales, wed_sales, thu_sales, fri_sales, sat_sales])\n:  +- HashJoin(joinType=[InnerJoin], where=[(d_week_seq0 = d_week_seq)], select=[d_week_seq, ss_store_sk, sun_sales, mon_sales, wed_sales, thu_sales, fri_sales, sat_sales, d_week_seq0], isBroadcast=[true], build=[right])\n:     :- HashAggregate(isMerge=[true], groupBy=[d_week_seq, ss_store_sk], select=[d_week_seq, ss_store_sk, Final_SUM(sum$0) AS sun_sales, Final_SUM(sum$1) AS mon_sales, Final_SUM(sum$2) AS wed_sales, Final_SUM(sum$3) AS thu_sales, Final_SUM(sum$4) AS fri_sales, Final_SUM(sum$5) AS sat_sales])\n:     :  +- [#3] Exchange(distribution=[hash[d_week_seq, ss_store_sk]])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :        :- Exchange(distribution=[broadcast])
            :        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_store_id]]], fields=[s_store_sk, s_store_id])
            :        :- Exchange(distribution=[broadcast])
            :        :  +- Calc(select=[d_week_seq], where=[SEARCH(d_month_seq, Sarg[[1197..1208]])])
            :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_month_seq, d_week_seq]]], fields=[d_month_seq, d_week_seq])
            :        +- Exchange(distribution=[hash[d_week_seq, ss_store_sk]])
            :           +- LocalHashAggregate(groupBy=[d_week_seq, ss_store_sk], select=[d_week_seq, ss_store_sk, Partial_SUM($f2) AS sum$0, Partial_SUM($f3) AS sum$1, Partial_SUM($f5) AS sum$2, Partial_SUM($f6) AS sum$3, Partial_SUM($f7) AS sum$4, Partial_SUM($f8) AS sum$5])
            :              +- Calc(select=[d_week_seq, ss_store_sk, CASE((d_day_name = 'Sunday'), ss_sales_price, null:DOUBLE) AS $f2, CASE((d_day_name = 'Monday'), ss_sales_price, null:DOUBLE) AS $f3, CASE((d_day_name = 'Tuesday'), ss_sales_price, null:DOUBLE) AS $f4, CASE((d_day_name = 'Wednesday'), ss_sales_price, null:DOUBLE) AS $f5, CASE((d_day_name = 'Thursday'), ss_sales_price, null:DOUBLE) AS $f6, CASE((d_day_name = 'Friday'), ss_sales_price, null:DOUBLE) AS $f7, CASE((d_day_name = 'Saturday'), ss_sales_price, null:DOUBLE) AS $f8])(reuse_id=[1])
            :                 +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(d_date_sk = ss_sold_date_sk)], select=[ss_sold_date_sk, ss_store_sk, ss_sales_price, d_date_sk, d_week_seq, d_day_name], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_sales_price], where=[ss_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_store_sk, ss_sales_price]]], fields=[ss_sold_date_sk, ss_store_sk, ss_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :                    :- Exchange(distribution=[broadcast])
            :                    :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_week_seq, d_day_name]]], fields=[d_date_sk, d_week_seq, d_day_name])
            :                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_store_sk, ss_sales_price]]], fields=[ss_sold_date_sk, ss_store_sk, ss_sales_price])
            +- Exchange(distribution=[hash[s_store_id1, d_week_seq1]])
               +- Calc(select=[s_store_name AS s_store_name1, d_week_seq AS d_week_seq1, s_store_id AS s_store_id1, sun_sales AS sun_sales1, mon_sales AS mon_sales1, tue_sales AS tue_sales1, wed_sales AS wed_sales1, thu_sales AS thu_sales1, fri_sales AS fri_sales1, sat_sales AS sat_sales1])
                  +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[d_week_seq, ss_store_sk, sun_sales, mon_sales, tue_sales, wed_sales, thu_sales, fri_sales, sat_sales, s_store_sk, s_store_id, s_store_name], isBroadcast=[true], build=[right])\n:- Calc(select=[d_week_seq, ss_store_sk, sun_sales, mon_sales, tue_sales, wed_sales, thu_sales, fri_sales, sat_sales])\n:  +- HashJoin(joinType=[InnerJoin], where=[(d_week_seq0 = d_week_seq)], select=[d_week_seq, ss_store_sk, sun_sales, mon_sales, tue_sales, wed_sales, thu_sales, fri_sales, sat_sales, d_week_seq0], isBroadcast=[true], build=[right])\n:     :- HashAggregate(isMerge=[true], groupBy=[d_week_seq, ss_store_sk], select=[d_week_seq, ss_store_sk, Final_SUM(sum$0) AS sun_sales, Final_SUM(sum$1) AS mon_sales, Final_SUM(sum$2) AS tue_sales, Final_SUM(sum$3) AS wed_sales, Final_SUM(sum$4) AS thu_sales, Final_SUM(sum$5) AS fri_sales, Final_SUM(sum$6) AS sat_sales])\n:     :  +- [#3] Exchange(distribution=[hash[d_week_seq, ss_store_sk]])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :- Exchange(distribution=[broadcast])
                     :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_store_id, s_store_name]]], fields=[s_store_sk, s_store_id, s_store_name])
                     :- Exchange(distribution=[broadcast])
                     :  +- Calc(select=[d_week_seq], where=[SEARCH(d_month_seq, Sarg[[1185..1196]])])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_month_seq, d_week_seq]]], fields=[d_month_seq, d_week_seq])
                     +- Exchange(distribution=[hash[d_week_seq, ss_store_sk]])
                        +- LocalHashAggregate(groupBy=[d_week_seq, ss_store_sk], select=[d_week_seq, ss_store_sk, Partial_SUM($f2) AS sum$0, Partial_SUM($f3) AS sum$1, Partial_SUM($f4) AS sum$2, Partial_SUM($f5) AS sum$3, Partial_SUM($f6) AS sum$4, Partial_SUM($f7) AS sum$5, Partial_SUM($f8) AS sum$6])
                           +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q5]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query5.tpl and seed 1819994127
with ssr as
 (select s_store_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as `returns`,
        sum(net_loss) as profit_loss
 from
  ( select  ss_store_sk as store_sk,
            ss_sold_date_sk  as date_sk,
            ss_ext_sales_price as sales_price,
            ss_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from store_sales
    union all
    select sr_store_sk as store_sk,
           sr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           sr_return_amt as return_amt,
           sr_net_loss as net_loss
    from store_returns
   ) salesreturns,
     date_dim,
     store
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  interval '14' day)
       and store_sk = s_store_sk
 group by s_store_id)
 ,
 csr as
 (select cp_catalog_page_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as `returns`,
        sum(net_loss) as profit_loss
 from
  ( select  cs_catalog_page_sk as page_sk,
            cs_sold_date_sk  as date_sk,
            cs_ext_sales_price as sales_price,
            cs_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from catalog_sales
    union all
    select cr_catalog_page_sk as page_sk,
           cr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           cr_return_amount as return_amt,
           cr_net_loss as net_loss
    from catalog_returns
   ) salesreturns,
     date_dim,
     catalog_page
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  interval '14' day)
       and page_sk = cp_catalog_page_sk
 group by cp_catalog_page_id)
 ,
 wsr as
 (select web_site_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as `returns`,
        sum(net_loss) as profit_loss
 from
  ( select  ws_web_site_sk as wsr_web_site_sk,
            ws_sold_date_sk  as date_sk,
            ws_ext_sales_price as sales_price,
            ws_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from web_sales
    union all
    select ws_web_site_sk as wsr_web_site_sk,
           wr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           wr_return_amt as return_amt,
           wr_net_loss as net_loss
    from web_returns left outer join web_sales on
         ( wr_item_sk = ws_item_sk
           and wr_order_number = ws_order_number)
   ) salesreturns,
     date_dim,
     web_site
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  interval '14' day)
       and wsr_web_site_sk = web_site_sk
 group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(`returns`) as `returns`
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || s_store_id as id
        , sales
        , `returns`
        , (profit - profit_loss) as profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || cp_catalog_page_id as id
        , sales
        , `returns`
        , (profit - profit_loss) as profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , `returns`
        , (profit - profit_loss) as profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100

-- end query 1 in stream 0 using template query5.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], sales=[SUM($2)], returns=[SUM($3)], profit=[SUM($4)])
   +- LogicalUnion(all=[true])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(channel=[_UTF-16LE'store channel'], id=[||(_UTF-16LE'store', $0)], sales=[$1], returns=[$3], profit=[-($2, $4)])
      :  :  +- LogicalAggregate(group=[{0}], sales=[SUM($1)], profit=[SUM($2)], returns=[SUM($3)], profit_loss=[SUM($4)])
      :  :     +- LogicalProject(s_store_id=[$35], sales_price=[$2], profit=[$3], return_amt=[$4], net_loss=[$5])
      :  :        +- LogicalFilter(condition=[AND(=($1, $6), >=($8, CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL), <=($8, +(CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL, 1209600000:INTERVAL DAY)), =($0, $34))])
      :  :           +- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :  :- LogicalUnion(all=[true])
      :  :              :  :  :- LogicalProject(store_sk=[$7], date_sk=[$0], sales_price=[$15], profit=[$22], return_amt=[0:DECIMAL(7, 2)], net_loss=[0:DECIMAL(7, 2)])
      :  :              :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
      :  :              :  :  +- LogicalProject(store_sk=[$7], date_sk=[$0], sales_price=[0:DECIMAL(7, 2)], profit=[0:DECIMAL(7, 2)], return_amt=[$11], net_loss=[$19])
      :  :              :  :     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
      :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
      :  +- LogicalProject(channel=[_UTF-16LE'catalog channel'], id=[||(_UTF-16LE'catalog_page', $0)], sales=[$1], returns=[$3], profit=[-($2, $4)])
      :     +- LogicalAggregate(group=[{0}], sales=[SUM($1)], profit=[SUM($2)], returns=[SUM($3)], profit_loss=[SUM($4)])
      :        +- LogicalProject(cp_catalog_page_id=[$35], sales_price=[$2], profit=[$3], return_amt=[$4], net_loss=[$5])
      :           +- LogicalFilter(condition=[AND(=($1, $6), >=($8, CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL), <=($8, +(CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL, 1209600000:INTERVAL DAY)), =($0, $34))])
      :              +- LogicalJoin(condition=[true], joinType=[inner])
      :                 :- LogicalJoin(condition=[true], joinType=[inner])
      :                 :  :- LogicalUnion(all=[true])
      :                 :  :  :- LogicalProject(page_sk=[$12], date_sk=[$0], sales_price=[$23], profit=[$33], return_amt=[0:DECIMAL(7, 2)], net_loss=[0:DECIMAL(7, 2)])
      :                 :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
      :                 :  :  +- LogicalProject(page_sk=[$12], date_sk=[$0], sales_price=[0:DECIMAL(7, 2)], profit=[0:DECIMAL(7, 2)], return_amt=[$18], net_loss=[$26])
      :                 :  :     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns]])
      :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_page]])
      +- LogicalProject(channel=[_UTF-16LE'web channel'], id=[||(_UTF-16LE'web_site', $0)], sales=[$1], returns=[$3], profit=[-($2, $4)])
         +- LogicalAggregate(group=[{0}], sales=[SUM($1)], profit=[SUM($2)], returns=[SUM($3)], profit_loss=[SUM($4)])
            +- LogicalProject(web_site_id=[$35], sales_price=[$2], profit=[$3], return_amt=[$4], net_loss=[$5])
               +- LogicalFilter(condition=[AND(=($1, $6), >=($8, CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL), <=($8, +(CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL, 1209600000:INTERVAL DAY)), =($0, $34))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalUnion(all=[true])
                     :  :  :- LogicalProject(wsr_web_site_sk=[$13], date_sk=[$0], sales_price=[$23], profit=[$33], return_amt=[0:DECIMAL(7, 2)], net_loss=[0:DECIMAL(7, 2)])
                     :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                     :  :  +- LogicalProject(wsr_web_site_sk=[$37], date_sk=[$0], sales_price=[0:DECIMAL(7, 2)], profit=[0:DECIMAL(7, 2)], return_amt=[$15], net_loss=[$23])
                     :  :     +- LogicalJoin(condition=[AND(=($2, $27), =($13, $41))], joinType=[left])
                     :  :        :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_returns]])
                     :  :        +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                     :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_site]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[channel, id, sales, returns, profit])
+- SortLimit(orderBy=[channel ASC, id ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[channel ASC, id ASC], offset=[0], fetch=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[channel, id, $e], select=[channel, id, $e, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS returns, Final_SUM(sum$2) AS profit])
            +- Exchange(distribution=[hash[channel, id, $e]])
               +- LocalHashAggregate(groupBy=[channel, id, $e], select=[channel, id, $e, Partial_SUM(sales) AS sum$0, Partial_SUM(returns) AS sum$1, Partial_SUM(profit) AS sum$2])
                  +- Expand(projects=[{channel, id, sales, returns, profit, 0 AS $e}, {channel, null AS id, sales, returns, profit, 1 AS $e}, {null AS channel, null AS id, sales, returns, profit, 3 AS $e}])
                     +- Union(all=[true], union=[channel, id, sales, returns, profit])
                        :- Union(all=[true], union=[channel, id, sales, returns, profit])
                        :  :- Calc(select=['store channel' AS channel, ||('store', s_store_id) AS id, sales, returns, (profit - profit_loss) AS profit])
                        :  :  +- HashAggregate(isMerge=[true], groupBy=[s_store_id], select=[s_store_id, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit, Final_SUM(sum$2) AS returns, Final_SUM(sum$3) AS profit_loss])
                        :  :     +- Exchange(distribution=[hash[s_store_id]])
                        :  :        +- LocalHashAggregate(groupBy=[s_store_id], select=[s_store_id, Partial_SUM(sales) AS sum$0, Partial_SUM(profit) AS sum$1, Partial_SUM(returns) AS sum$2, Partial_SUM(profit_loss) AS sum$3])
                        :  :           +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(store_sk = s_store_sk)], select=[store_sk, sales, profit, returns, profit_loss, s_store_sk, s_store_id], isBroadcast=[true], build=[right])\n:- HashAggregate(isMerge=[true], groupBy=[store_sk], select=[store_sk, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit, Final_SUM(sum$2) AS returns, Final_SUM(sum$3) AS profit_loss])\n:  +- [#2] Exchange(distribution=[hash[store_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :  :              :- Exchange(distribution=[broadcast])
                        :  :              :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_store_id]]], fields=[s_store_sk, s_store_id])
                        :  :              +- Exchange(distribution=[hash[store_sk]])
                        :  :                 +- LocalHashAggregate(groupBy=[store_sk], select=[store_sk, Partial_SUM(sales_price) AS sum$0, Partial_SUM(profit) AS sum$1, Partial_SUM(return_amt) AS sum$2, Partial_SUM(net_loss) AS sum$3])
                        :  :                    +- Calc(select=[store_sk, sales_price, profit, return_amt, net_loss])
                        :  :                       +- MultipleInput(readOrder=[0,1,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(date_sk = d_date_sk)], select=[store_sk, date_sk, sales_price, profit, return_amt, net_loss, d_date_sk], isBroadcast=[true], build=[right])\n:- Union(all=[true], union=[store_sk, date_sk, sales_price, profit, return_amt, net_loss])\n:  :- Calc(select=[ss_store_sk AS store_sk, ss_sold_date_sk AS date_sk, ss_ext_sales_price AS sales_price, ss_net_profit AS profit, CAST(0E0 AS DOUBLE) AS return_amt, CAST(0E0 AS DOUBLE) AS net_loss])\n:  :  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_store_sk, ss_sold_date_sk, ss_ext_sales_price, ss_net_profit]]], fields=[ss_store_sk, ss_sold_date_sk, ss_ext_sales_price, ss_net_profit])\n:  +- Calc(select=[sr_store_sk AS store_sk, sr_returned_date_sk AS date_sk, CAST(0E0 AS DOUBLE) AS sales_price, CAST(0E0 AS DOUBLE) AS profit, sr_return_amt AS return_amt, sr_net_loss AS net_loss])\n:     +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_store_sk, sr_returned_date_sk, sr_return_amt, sr_net_loss]]], fields=[sr_store_sk, sr_returned_date_sk, sr_return_amt, sr_net_loss])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :  :                          :- Exchange(distribution=[broadcast])(reuse_id=[1])
                        :  :                          :  +- Calc(select=[d_date_sk], where=[SEARCH(d_date, Sarg[[1998-08-04..1998-08-18]])])
                        :  :                          :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
                        :  :                          :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_store_sk, ss_sold_date_sk, ss_ext_sales_price, ss_net_profit]]], fields=[ss_store_sk, ss_sold_date_sk, ss_ext_sales_price, ss_net_profit])
                        :  :                          +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_store_sk, sr_returned_date_sk, sr_return_amt, sr_net_loss]]], fields=[sr_store_sk, sr_returned_date_sk, sr_return_amt, sr_net_loss])
                        :  +- Calc(select=['catalog channel' AS channel, ||('catalog_page', cp_catalog_page_id) AS id, sales, returns, (profit - profit_loss) AS profit])
                        :     +- HashAggregate(isMerge=[true], groupBy=[cp_catalog_page_id], select=[cp_catalog_page_id, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit, Final_SUM(sum$2) AS returns, Final_SUM(sum$3) AS profit_loss])
                        :        +- Exchange(distribution=[hash[cp_catalog_page_id]])
                        :           +- LocalHashAggregate(groupBy=[cp_catalog_page_id], select=[cp_catalog_page_id, Partial_SUM(sales) AS sum$0, Partial_SUM(profit) AS sum$1, Partial_SUM(returns) AS sum$2, Partial_SUM(profit_loss) AS sum$3])
                        :              +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(page_sk = cp_catalog_page_sk)], select=[page_sk, sales, profit, returns, profit_loss, cp_catalog_page_sk, cp_catalog_page_id], isBroadcast=[true], build=[right])\n:- HashAggregate(isMerge=[true], groupBy=[page_sk], select=[page_sk, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit, Final_SUM(sum$2) AS returns, Final_SUM(sum$3) AS profit_loss])\n:  +- [#2] Exchange(distribution=[hash[page_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :                 :- Exchange(distribution=[broadcast])
                        :                 :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_page, project=[cp_catalog_page_sk, cp_catalog_page_id]]], fields=[cp_catalog_page_sk, cp_catalog_page_id])
                        :                 +- Exchange(distribution=[hash[page_sk]])
                        :                    +- LocalHashAggregate(groupBy=[page_sk], select=[page_sk, Partial_SUM(sales_price) AS sum$0, Partial_SUM(profit) AS sum$1, Partial_SUM(return_amt) AS sum$2, Partial_SUM(net_loss) AS sum$3])
                        :                       +- Calc(select=[page_sk, sales_price, profit, return_amt, net_loss])
                        :                          +- MultipleInput(readOrder=[0,1,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(date_sk = d_date_sk)], select=[page_sk, date_sk, sales_price, profit, return_amt, net_loss, d_date_sk], isBroadcast=[true], build=[right])\n:- Union(all=[true], union=[page_sk, date_sk, sales_price, profit, return_amt, net_loss])\n:  :- Calc(select=[cs_catalog_page_sk AS page_sk, cs_sold_date_sk AS date_sk, cs_ext_sales_price AS sales_price, cs_net_profit AS profit, CAST(0E0 AS DOUBLE) AS return_amt, CAST(0E0 AS DOUBLE) AS net_loss])\n:  :  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_catalog_page_sk, cs_sold_date_sk, cs_ext_sales_price, cs_net_profit]]], fields=[cs_catalog_page_sk, cs_sold_date_sk, cs_ext_sales_price, cs_net_profit])\n:  +- Calc(select=[cr_catalog_page_sk AS page_sk, cr_returned_date_sk AS date_sk, CAST(0E0 AS DOUBLE) AS sales_price, CAST(0E0 AS DOUBLE) AS profit, cr_return_amount AS return_amt, cr_net_loss AS net_loss])\n:     +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns, project=[cr_catalog_page_sk, cr_returned_date_sk, cr_return_amount, cr_net_loss]]], fields=[cr_catalog_page_sk, cr_returned_date_sk, cr_return_amount, cr_net_loss])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :                             :- Reused(reference_id=[1])
                        :                             :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_catalog_page_sk, cs_sold_date_sk, cs_ext_sales_price, cs_net_profit]]], fields=[cs_catalog_page_sk, cs_sold_date_sk, cs_ext_sales_price, cs_net_profit])
                        :                             +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns, project=[cr_catalog_page_sk, cr_returned_date_sk, cr_return_amount, cr_net_loss]]], fields=[cr_catalog_page_sk, cr_returned_date_sk, cr_return_amount, cr_net_loss])
                        +- Calc(select=['web channel' AS channel, ||('web_site', web_site_id) AS id, sales, returns, (profit - profit_loss) AS profit])
                           +- HashAggregate(isMerge=[true], groupBy=[web_site_id], select=[web_site_id, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit, Final_SUM(sum$2) AS returns, Final_SUM(sum$3) AS profit_loss])
                              +- Exchange(distribution=[hash[web_site_id]])
                                 +- LocalHashAggregate(groupBy=[web_site_id], select=[web_site_id, Partial_SUM(sales_price) AS sum$0, Partial_SUM(profit) AS sum$1, Partial_SUM(return_amt) AS sum$2, Partial_SUM(net_loss) AS sum$3])
                                    +- Calc(select=[web_site_id, sales_price, profit, return_amt, net_loss])
                                       +- MultipleInput(readOrder=[0,0,1,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(wsr_web_site_sk = web_site_sk)], select=[wsr_web_site_sk, sales_price, profit, return_amt, net_loss, web_site_sk, web_site_id], isBroadcast=[true], build=[right])\n:- Calc(select=[wsr_web_site_sk, sales_price, profit, return_amt, net_loss])\n:  +- HashJoin(joinType=[InnerJoin], where=[(date_sk = d_date_sk)], select=[wsr_web_site_sk, date_sk, sales_price, profit, return_amt, net_loss, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Union(all=[true], union=[wsr_web_site_sk, date_sk, sales_price, profit, return_amt, net_loss])\n:     :  :- Calc(select=[ws_web_site_sk AS wsr_web_site_sk, ws_sold_date_sk AS date_sk, ws_ext_sales_price AS sales_price, ws_net_profit AS profit, CAST(0E0 AS DOUBLE) AS return_amt, CAST(0E0 AS DOUBLE) AS net_loss])\n:     :  :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_web_site_sk, ws_sold_date_sk, ws_ext_sales_price, ws_net_profit]]], fields=[ws_web_site_sk, ws_sold_date_sk, ws_ext_sales_price, ws_net_profit])\n:     :  +- Calc(select=[ws_web_site_sk AS wsr_web_site_sk, wr_returned_date_sk AS date_sk, CAST(0E0 AS DOUBLE) AS sales_price, CAST(0E0 AS DOUBLE) AS profit, wr_return_amt AS return_amt, wr_net_loss AS net_loss])\n:     :     +- HashJoin(joinType=[RightOuterJoin], where=[((wr_item_sk = ws_item_sk) AND (wr_order_number = ws_order_number))], select=[ws_item_sk, ws_web_site_sk, ws_order_number, wr_returned_date_sk, wr_item_sk, wr_order_number, wr_return_amt, wr_net_loss], build=[right])\n:     :        :- [#4] Exchange(distribution=[hash[ws_item_sk, ws_order_number]])\n:     :        +- [#5] Exchange(distribution=[hash[wr_item_sk, wr_order_number]])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                          :- Exchange(distribution=[broadcast])
                                          :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_site, project=[web_site_sk, web_site_id]]], fields=[web_site_sk, web_site_id])
                                          :- Reused(reference_id=[1])
                                          :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_web_site_sk, ws_sold_date_sk, ws_ext_sales_price, ws_net_profit]]], fields=[ws_web_site_sk, ws_sold_date_sk, ws_ext_sales_price, ws_net_profit])
                                          :- Exchange(distribution=[hash[ws_item_sk, ws_order_number]])
                                          :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_item_sk, ws_web_site_sk, ws_order_number]]], fields=[ws_item_sk, ws_web_site_sk, ws_order_number])
                                          +- Exchange(distribution=[hash[wr_item_sk, wr_order_number]])
                                             +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_returns, project=[wr_returned_date_sk, wr_item_sk, wr_order_number, wr_return_amt, wr_net_loss]]], fields=[wr_returned_date_sk, wr_item_sk, wr_order_number, wr_return_amt, wr_net_loss])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q60]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query60.tpl and seed 1930872976
with ss as (
 select
          i_item_id,sum(ss_ext_sales_price) total_sales
 from
 	store_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ss_item_sk              = i_item_sk
 and     ss_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ss_addr_sk              = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 cs as (
 select
          i_item_id,sum(cs_ext_sales_price) total_sales
 from
 	catalog_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     cs_item_sk              = i_item_sk
 and     cs_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     cs_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6 
 group by i_item_id),
 ws as (
 select
          i_item_id,sum(ws_ext_sales_price) total_sales
 from
 	web_sales,
 	date_dim,
         customer_address,
         item
 where
         i_item_id               in (select
  i_item_id
from
 item
where i_category in ('Children'))
 and     ws_item_sk              = i_item_sk
 and     ws_sold_date_sk         = d_date_sk
 and     d_year                  = 1999
 and     d_moy                   = 9
 and     ws_bill_addr_sk         = ca_address_sk
 and     ca_gmt_offset           = -6
 group by i_item_id)
  select   
  i_item_id
,sum(total_sales) total_sales
 from  (select * from ss 
        union all
        select * from cs 
        union all
        select * from ws) tmp1
 group by i_item_id
 order by i_item_id
      ,total_sales
 limit 100

-- end query 1 in stream 0 using template query60.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
   +- LogicalUnion(all=[true])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(i_item_id=[$0], total_sales=[$1])
      :  :  +- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
      :  :     +- LogicalProject(i_item_id=[$65], ss_ext_sales_price=[$15])
      :  :        +- LogicalFilter(condition=[AND(IN($65, {
LogicalProject(i_item_id=[$1])
  LogicalFilter(condition=[=($12, _UTF-16LE'Children')])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
}), =($2, $64), =($0, $23), =($29, 1999), =($31, 9), =($6, $51), =($62, -6))])
      :  :           +- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
      :  :              :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
      :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
      :  +- LogicalProject(i_item_id=[$0], total_sales=[$1])
      :     +- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
      :        +- LogicalProject(i_item_id=[$76], cs_ext_sales_price=[$23])
      :           +- LogicalFilter(condition=[AND(IN($76, {
LogicalProject(i_item_id=[$1])
  LogicalFilter(condition=[=($12, _UTF-16LE'Children')])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
}), =($15, $75), =($0, $34), =($40, 1999), =($42, 9), =($6, $62), =($73, -6))])
      :              +- LogicalJoin(condition=[true], joinType=[inner])
      :                 :- LogicalJoin(condition=[true], joinType=[inner])
      :                 :  :- LogicalJoin(condition=[true], joinType=[inner])
      :                 :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
      :                 :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
      :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
      +- LogicalProject(i_item_id=[$0], total_sales=[$1])
         +- LogicalAggregate(group=[{0}], total_sales=[SUM($1)])
            +- LogicalProject(i_item_id=[$76], ws_ext_sales_price=[$23])
               +- LogicalFilter(condition=[AND(IN($76, {
LogicalProject(i_item_id=[$1])
  LogicalFilter(condition=[=($12, _UTF-16LE'Children')])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
}), =($3, $75), =($0, $34), =($40, 1999), =($42, 9), =($7, $62), =($73, -6))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                     :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                     :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
                     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[i_item_id ASC, total_sales ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_item_id ASC, total_sales ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[false], groupBy=[i_item_id], select=[i_item_id, SUM(total_sales) AS total_sales])
         +- Union(all=[true], union=[i_item_id, total_sales])
            :- Union(all=[true], union=[i_item_id, total_sales])
            :  :- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_SUM(sum$0) AS total_sales])
            :  :  +- Exchange(distribution=[hash[i_item_id]])
            :  :     +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_SUM(ss_ext_sales_price) AS sum$0])
            :  :        +- Calc(select=[ss_ext_sales_price, i_item_id])
            :  :           +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, ss_ext_sales_price, i_item_sk, i_item_id], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_item_sk, ss_ext_sales_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_addr_sk = ca_address_sk)], select=[ss_item_sk, ss_addr_sk, ss_ext_sales_price, ca_address_sk], build=[right])\n:     :- [#2] Exchange(distribution=[hash[ss_addr_sk]])\n:     +- [#3] Exchange(distribution=[hash[ca_address_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :  :              :- Exchange(distribution=[broadcast])(reuse_id=[1])
            :  :              :  +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[LeftSemiJoin], where=[(i_item_id = i_item_id0)], select=[i_item_sk, i_item_id], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])\n+- [#2] Exchange(distribution=[broadcast])\n])
            :  :              :     :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])
            :  :              :     +- Exchange(distribution=[broadcast])
            :  :              :        +- Calc(select=[i_item_id], where=[(i_category = 'Children')])
            :  :              :           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_id, i_category]]], fields=[i_item_id, i_category])
            :  :              :- Exchange(distribution=[hash[ss_addr_sk]])
            :  :              :  +- Calc(select=[ss_item_sk, ss_addr_sk, ss_ext_sales_price])
            :  :              :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price], where=[ss_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :  :              :        :- Exchange(distribution=[broadcast])(reuse_id=[2])
            :  :              :        :  +- Calc(select=[d_date_sk], where=[((d_year = 1999) AND (d_moy = 9))])
            :  :              :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
            :  :              :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price])
            :  :              +- Exchange(distribution=[hash[ca_address_sk]])(reuse_id=[3])
            :  :                 +- Calc(select=[ca_address_sk], where=[(ca_gmt_offset = -6)])
            :  :                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_gmt_offset]]], fields=[ca_address_sk, ca_gmt_offset])
            :  +- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_SUM(sum$0) AS total_sales])
            :     +- Exchange(distribution=[hash[i_item_id]])
            :        +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_SUM(cs_ext_sales_price) AS sum$0])
            :           +- Calc(select=[cs_ext_sales_price, i_item_id])
            :              +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_item_sk = i_item_sk)], select=[cs_item_sk, cs_ext_sales_price, i_item_sk, i_item_id], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_item_sk, cs_ext_sales_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(cs_bill_addr_sk = ca_address_sk)], select=[cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price, ca_address_sk], build=[right])\n:     :- [#2] Exchange(distribution=[hash[cs_bill_addr_sk]])\n:     +- [#3] Exchange(distribution=[hash[ca_address_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :                 :- Reused(reference_id=[1])
            :                 :- Exchange(distribution=[hash[cs_bill_addr_sk]])
            :                 :  +- Calc(select=[cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price])
            :                 :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price], where=[cs_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price]]], fields=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :                 :        :- Reused(reference_id=[2])
            :                 :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price]]], fields=[cs_sold_date_sk, cs_bill_addr_sk, cs_item_sk, cs_ext_sales_price])
            :                 +- Reused(reference_id=[3])
            +- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_SUM(sum$0) AS total_sales])
               +- Exchange(distribution=[hash[i_item_id]])
                  +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_SUM(ws_ext_sales_price) AS sum$0])
                     +- Calc(select=[ws_ext_sales_price, i_item_id])
                        +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_item_sk = i_item_sk)], select=[ws_item_sk, ws_ext_sales_price, i_item_sk, i_item_id], isBroadcast=[true], build=[right])\n:- Calc(select=[ws_item_sk, ws_ext_sales_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ws_bill_addr_sk = ca_address_sk)], select=[ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price, ca_address_sk], build=[right])\n:     :- [#2] Exchange(distribution=[hash[ws_bill_addr_sk]])\n:     +- [#3] Exchange(distribution=[hash[ca_address_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                           :- Reused(reference_id=[1])
                           :- Exchange(distribution=[hash[ws_bill_addr_sk]])
                           :  +- Calc(select=[ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price])
                           :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price])\n+- [#2] Exchange(distribution=[broadcast])\n])
                           :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_addr_sk, ws_ext_sales_price])
                           :        +- Reused(reference_id=[2])
                           +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q61]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query61.tpl and seed 1930872976
select  promotions,total,cast(promotions as decimal(15,4))/cast(total as decimal(15,4))*100
from
  (select sum(ss_ext_sales_price) promotions
   from  store_sales
        ,store
        ,promotion
        ,date_dim
        ,customer
        ,customer_address 
        ,item
   where ss_sold_date_sk = d_date_sk
   and   ss_store_sk = s_store_sk
   and   ss_promo_sk = p_promo_sk
   and   ss_customer_sk= c_customer_sk
   and   ca_address_sk = c_current_addr_sk
   and   ss_item_sk = i_item_sk 
   and   ca_gmt_offset = -7
   and   i_category = 'Electronics'
   and   (p_channel_dmail = 'Y' or p_channel_email = 'Y' or p_channel_tv = 'Y')
   and   s_gmt_offset = -7
   and   d_year = 1999
   and   d_moy  = 11) promotional_sales,
  (select sum(ss_ext_sales_price) total
   from  store_sales
        ,store
        ,date_dim
        ,customer
        ,customer_address
        ,item
   where ss_sold_date_sk = d_date_sk
   and   ss_store_sk = s_store_sk
   and   ss_customer_sk= c_customer_sk
   and   ca_address_sk = c_current_addr_sk
   and   ss_item_sk = i_item_sk
   and   ca_gmt_offset = -7
   and   i_category = 'Electronics'
   and   s_gmt_offset = -7
   and   d_year = 1999
   and   d_moy  = 11) all_sales
order by promotions, total
limit 100

-- end query 1 in stream 0 using template query61.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalProject(promotions=[$0], total=[$1], EXPR$2=[*(/(CAST($0):DECIMAL(15, 4), CAST($1):DECIMAL(15, 4)), 100)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalAggregate(group=[{}], promotions=[SUM($0)])
      :  +- LogicalProject(ss_ext_sales_price=[$15])
      :     +- LogicalFilter(condition=[AND(=($0, $71), =($7, $23), =($8, $52), =($3, $99), =($117, $103), =($2, $130), =($128, -7), =($142, _UTF-16LE'Electronics'), OR(=($60, _UTF-16LE'Y'), =($61, _UTF-16LE'Y'), =($63, _UTF-16LE'Y')), =($50, -7), =($77, 1999), =($79, 11))])
      :        +- LogicalJoin(condition=[true], joinType=[inner])
      :           :- LogicalJoin(condition=[true], joinType=[inner])
      :           :  :- LogicalJoin(condition=[true], joinType=[inner])
      :           :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :           :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :           :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :           :  :  :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
      :           :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
      :           :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, promotion]])
      :           :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      :           :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
      :           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
      :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
      +- LogicalAggregate(group=[{}], total=[SUM($0)])
         +- LogicalProject(ss_ext_sales_price=[$15])
            +- LogicalFilter(condition=[AND(=($0, $52), =($7, $23), =($3, $80), =($98, $84), =($2, $111), =($109, -7), =($123, _UTF-16LE'Electronics'), =($50, -7), =($58, 1999), =($60, 11))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
                  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
                  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
                  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[promotions ASC, total ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[promotions ASC, total ASC], offset=[0], fetch=[100], global=[false])
      +- Calc(select=[promotions, total, ((CAST(promotions AS DECIMAL(15, 4)) / CAST(total AS DECIMAL(15, 4))) * 100) AS EXPR$2])
         +- NestedLoopJoin(joinType=[InnerJoin], where=[true], select=[promotions, total], build=[left], singleRowJoin=[true])
            :- Exchange(distribution=[broadcast])
            :  +- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS promotions])
            :     +- Exchange(distribution=[single])
            :        +- LocalHashAggregate(select=[Partial_SUM(ss_ext_sales_price) AS sum$0])
            :           +- Calc(select=[ss_ext_sales_price])
            :              +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, ss_ext_sales_price, s_store_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk, ss_ext_sales_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_promo_sk = p_promo_sk)], select=[ss_store_sk, ss_promo_sk, ss_ext_sales_price, p_promo_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_store_sk, ss_promo_sk, ss_ext_sales_price])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_customer_sk = c_customer_sk)], select=[ss_customer_sk, ss_store_sk, ss_promo_sk, ss_ext_sales_price, c_customer_sk], build=[right])\n:     :     :- [#3] Exchange(distribution=[hash[ss_customer_sk]])\n:     :     +- [#4] Exchange(distribution=[hash[c_customer_sk]])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :                 :- Exchange(distribution=[broadcast])(reuse_id=[1])
            :                 :  +- Calc(select=[s_store_sk], where=[(s_gmt_offset = -7)])
            :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_gmt_offset]]], fields=[s_store_sk, s_gmt_offset])
            :                 :- Exchange(distribution=[broadcast])
            :                 :  +- Calc(select=[p_promo_sk], where=[((p_channel_dmail = 'Y') OR (p_channel_email = 'Y') OR (p_channel_tv = 'Y'))])
            :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, promotion, project=[p_promo_sk, p_channel_dmail, p_channel_email, p_channel_tv]]], fields=[p_promo_sk, p_channel_dmail, p_channel_email, p_channel_tv])
            :                 :- Exchange(distribution=[hash[ss_customer_sk]])
            :                 :  +- Calc(select=[ss_customer_sk, ss_store_sk, ss_promo_sk, ss_ext_sales_price])
            :                 :     +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, ss_customer_sk, ss_store_sk, ss_promo_sk, ss_ext_sales_price, i_item_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_item_sk, ss_customer_sk, ss_store_sk, ss_promo_sk, ss_ext_sales_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_promo_sk, ss_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_promo_sk, ss_ext_sales_price], where=[ss_store_sk IS NOT NULL])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_promo_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_promo_sk, ss_ext_sales_price])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :                 :        :- Exchange(distribution=[broadcast])(reuse_id=[2])
            :                 :        :  +- Calc(select=[i_item_sk], where=[(i_category = 'Electronics')])
            :                 :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_category]]], fields=[i_item_sk, i_category])
            :                 :        :- Exchange(distribution=[broadcast])(reuse_id=[3])
            :                 :        :  +- Calc(select=[d_date_sk], where=[((d_year = 1999) AND (d_moy = 11))])
            :                 :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
            :                 :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_promo_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_promo_sk, ss_ext_sales_price])
            :                 +- Exchange(distribution=[hash[c_customer_sk]])(reuse_id=[4])
            :                    +- Calc(select=[c_customer_sk])
            :                       +- HashJoin(joinType=[InnerJoin], where=[(ca_address_sk = c_current_addr_sk)], select=[c_customer_sk, c_current_addr_sk, ca_address_sk], build=[right])
            :                          :- Exchange(distribution=[hash[c_current_addr_sk]])
            :                          :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_current_addr_sk]]], fields=[c_customer_sk, c_current_addr_sk])
            :                          +- Exchange(distribution=[hash[ca_address_sk]])
            :                             +- Calc(select=[ca_address_sk], where=[(ca_gmt_offset = -7)])
            :                                +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_gmt_offset]]], fields=[ca_address_sk, ca_gmt_offset])
            +- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS total])
               +- Exchange(distribution=[single])
                  +- LocalHashAggregate(select=[Partial_SUM(ss_ext_sales_price) AS sum$0])
                     +- Calc(select=[ss_ext_sales_price])
                        +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, ss_ext_sales_price, s_store_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk, ss_ext_sales_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_customer_sk = c_customer_sk)], select=[ss_customer_sk, ss_store_sk, ss_ext_sales_price, c_customer_sk], build=[right])\n:     :- [#2] Exchange(distribution=[hash[ss_customer_sk]])\n:     +- [#3] Exchange(distribution=[hash[c_customer_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                           :- Reused(reference_id=[1])
                           :- Exchange(distribution=[hash[ss_customer_sk]])
                           :  +- Calc(select=[ss_customer_sk, ss_store_sk, ss_ext_sales_price])
                           :     +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price, i_item_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price], where=[ss_store_sk IS NOT NULL])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                           :        :- Reused(reference_id=[2])
                           :        :- Reused(reference_id=[3])
                           :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_store_sk, ss_ext_sales_price])
                           +- Reused(reference_id=[4])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q62]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query62.tpl and seed 1819994127
select  
   substr(w_warehouse_name,1,20)
  ,sm_type
  ,web_name
  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk <= 30 ) then 1 else 0 end)  as `30 days` 
  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 30) and 
                 (ws_ship_date_sk - ws_sold_date_sk <= 60) then 1 else 0 end )  as `31-60 days` 
  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 60) and 
                 (ws_ship_date_sk - ws_sold_date_sk <= 90) then 1 else 0 end)  as `61-90 days` 
  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk > 90) and
                 (ws_ship_date_sk - ws_sold_date_sk <= 120) then 1 else 0 end)  as `91-120 days` 
  ,sum(case when (ws_ship_date_sk - ws_sold_date_sk  > 120) then 1 else 0 end)  as `>120 days` 
from
   web_sales
  ,warehouse
  ,ship_mode
  ,web_site
  ,date_dim
where
    d_month_seq between 1212 and 1212 + 11
and ws_ship_date_sk   = d_date_sk
and ws_warehouse_sk   = w_warehouse_sk
and ws_ship_mode_sk   = sm_ship_mode_sk
and ws_web_site_sk    = web_site_sk
group by
   substr(w_warehouse_name,1,20)
  ,sm_type
  ,web_name
order by substr(w_warehouse_name,1,20)
        ,sm_type
       ,web_name
limit 100

-- end query 1 in stream 0 using template query62.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2}], 30 days=[SUM($3)], 31-60 days=[SUM($4)], 61-90 days=[SUM($5)], 91-120 days=[SUM($6)], >120 days=[SUM($7)])
   +- LogicalProject(EXPR$0=[SUBSTR($36, 1, 20)], sm_type=[$50], web_name=[$58], $f3=[CASE(<=(-($2, $0), 30), 1, 0)], $f4=[CASE(AND(>(-($2, $0), 30), <=(-($2, $0), 60)), 1, 0)], $f5=[CASE(AND(>(-($2, $0), 60), <=(-($2, $0), 90)), 1, 0)], $f6=[CASE(AND(>(-($2, $0), 90), <=(-($2, $0), 120)), 1, 0)], $f7=[CASE(>(-($2, $0), 120), 1, 0)])
      +- LogicalFilter(condition=[AND(>=($83, 1212), <=($83, +(1212, 11)), =($2, $80), =($15, $34), =($14, $48), =($13, $54))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
            :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, warehouse]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, ship_mode]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_site]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[EXPR$0 ASC, sm_type ASC, web_name ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[EXPR$0 ASC, sm_type ASC, web_name ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[false], groupBy=[EXPR$0, sm_type, web_name], select=[EXPR$0, sm_type, web_name, SUM($f3) AS 30 days, SUM($f4) AS 31-60 days, SUM($f5) AS 61-90 days, SUM($f6) AS 91-120 days, SUM($f7) AS >120 days])
         +- Exchange(distribution=[hash[EXPR$0, sm_type, web_name]])
            +- Calc(select=[SUBSTR(w_warehouse_name, 1, 20) AS EXPR$0, sm_type, web_name, CASE(((ws_ship_date_sk - ws_sold_date_sk) <= 30), 1, 0) AS $f3, CASE((((ws_ship_date_sk - ws_sold_date_sk) > 30) AND ((ws_ship_date_sk - ws_sold_date_sk) <= 60)), 1, 0) AS $f4, CASE((((ws_ship_date_sk - ws_sold_date_sk) > 60) AND ((ws_ship_date_sk - ws_sold_date_sk) <= 90)), 1, 0) AS $f5, CASE((((ws_ship_date_sk - ws_sold_date_sk) > 90) AND ((ws_ship_date_sk - ws_sold_date_sk) <= 120)), 1, 0) AS $f6, CASE(((ws_ship_date_sk - ws_sold_date_sk) > 120), 1, 0) AS $f7])
               +- MultipleInput(readOrder=[0,0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_warehouse_sk = w_warehouse_sk)], select=[ws_sold_date_sk, ws_ship_date_sk, ws_warehouse_sk, web_name, sm_type, w_warehouse_sk, w_warehouse_name], isBroadcast=[true], build=[right])\n:- Calc(select=[ws_sold_date_sk, ws_ship_date_sk, ws_warehouse_sk, web_name, sm_type])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ws_ship_mode_sk = sm_ship_mode_sk)], select=[ws_sold_date_sk, ws_ship_date_sk, ws_ship_mode_sk, ws_warehouse_sk, web_name, sm_ship_mode_sk, sm_type], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ws_sold_date_sk, ws_ship_date_sk, ws_ship_mode_sk, ws_warehouse_sk, web_name])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ws_web_site_sk = web_site_sk)], select=[ws_sold_date_sk, ws_ship_date_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, web_site_sk, web_name], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[ws_sold_date_sk, ws_ship_date_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk])\n:     :     :  +- HashJoin(joinType=[InnerJoin], where=[(ws_ship_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_ship_date_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk, d_date_sk], isBroadcast=[true], build=[right])\n:     :     :     :- [#4] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_ship_date_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk]]], fields=[ws_sold_date_sk, ws_ship_date_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk])\n:     :     :     +- [#5] Exchange(distribution=[broadcast])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :- Exchange(distribution=[broadcast])
                  :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, warehouse, project=[w_warehouse_sk, w_warehouse_name]]], fields=[w_warehouse_sk, w_warehouse_name])
                  :- Exchange(distribution=[broadcast])
                  :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, ship_mode, project=[sm_ship_mode_sk, sm_type]]], fields=[sm_ship_mode_sk, sm_type])
                  :- Exchange(distribution=[broadcast])
                  :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_site, project=[web_site_sk, web_name]]], fields=[web_site_sk, web_name])
                  :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_ship_date_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk]]], fields=[ws_sold_date_sk, ws_ship_date_sk, ws_web_site_sk, ws_ship_mode_sk, ws_warehouse_sk])
                  +- Exchange(distribution=[broadcast])
                     +- Calc(select=[d_date_sk], where=[SEARCH(d_month_seq, Sarg[[1212..1223]])])
                        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_month_seq]]], fields=[d_date_sk, d_month_seq])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q63]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query63.tpl and seed 1819994127
select  * 
from (select i_manager_id
             ,sum(ss_sales_price) sum_sales
             ,avg(sum(ss_sales_price)) over (partition by i_manager_id) avg_monthly_sales
      from item
          ,store_sales
          ,date_dim
          ,store
      where ss_item_sk = i_item_sk
        and ss_sold_date_sk = d_date_sk
        and ss_store_sk = s_store_sk
        and d_month_seq in (1212,1212+1,1212+2,1212+3,1212+4,1212+5,1212+6,1212+7,1212+8,1212+9,1212+10,1212+11)
        and ((    i_category in ('Books','Children','Electronics')
              and i_class in ('personal','portable','refernece','self-help')
              and i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7',
		                  'exportiunivamalg #9','scholaramalgamalg #9'))
           or(    i_category in ('Women','Music','Men')
              and i_class in ('accessories','classical','fragrances','pants')
              and i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1',
		                 'importoamalg #1')))
group by i_manager_id, d_moy) tmp1
where case when avg_monthly_sales > 0 then abs (sum_sales - avg_monthly_sales) / avg_monthly_sales else null end > 0.1
order by i_manager_id
        ,avg_monthly_sales
        ,sum_sales
limit 100

-- end query 1 in stream 0 using template query63.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$2], sort2=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalProject(i_manager_id=[$0], sum_sales=[$1], avg_monthly_sales=[$2])
   +- LogicalFilter(condition=[>(CASE(>($2, 0), /(ABS(-($1, $2)), $2), null:DOUBLE), 0.1:DECIMAL(2, 1))])
      +- LogicalProject(i_manager_id=[$0], sum_sales=[$2], avg_monthly_sales=[/(CASE(>(COUNT($2) OVER (PARTITION BY $0), 0), $SUM0($2) OVER (PARTITION BY $0), null:DOUBLE), COUNT($2) OVER (PARTITION BY $0))])
         +- LogicalAggregate(group=[{0, 1}], sum_sales=[SUM($2)])
            +- LogicalProject(i_manager_id=[$20], d_moy=[$53], ss_sales_price=[$35])
               +- LogicalFilter(condition=[AND(=($24, $0), =($22, $45), =($29, $73), OR(=($48, 1212), =($48, +(1212, 1)), =($48, +(1212, 2)), =($48, +(1212, 3)), =($48, +(1212, 4)), =($48, +(1212, 5)), =($48, +(1212, 6)), =($48, +(1212, 7)), =($48, +(1212, 8)), =($48, +(1212, 9)), =($48, +(1212, 10)), =($48, +(1212, 11))), OR(AND(OR(=($12, _UTF-16LE'Books'), =($12, _UTF-16LE'Children'), =($12, _UTF-16LE'Electronics')), OR(=($10, _UTF-16LE'personal'), =($10, _UTF-16LE'portable'), =($10, _UTF-16LE'refernece'), =($10, _UTF-16LE'self-help')), OR(=($8, _UTF-16LE'scholaramalgamalg #14'), =($8, _UTF-16LE'scholaramalgamalg #7'), =($8, _UTF-16LE'exportiunivamalg #9'), =($8, _UTF-16LE'scholaramalgamalg #9'))), AND(OR(=($12, _UTF-16LE'Women'), =($12, _UTF-16LE'Music'), =($12, _UTF-16LE'Men')), OR(=($10, _UTF-16LE'accessories'), =($10, _UTF-16LE'classical'), =($10, _UTF-16LE'fragrances'), =($10, _UTF-16LE'pants')), OR(=($8, _UTF-16LE'amalgimporto #1'), =($8, _UTF-16LE'edu packscholar #1'), =($8, _UTF-16LE'exportiimporto #1'), =($8, _UTF-16LE'importoamalg #1')))))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                     :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                     :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[i_manager_id ASC, avg_monthly_sales ASC, sum_sales ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_manager_id ASC, avg_monthly_sales ASC, sum_sales ASC], offset=[0], fetch=[100], global=[false])
      +- Calc(select=[i_manager_id, sum_sales, (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0) AS avg_monthly_sales], where=[CASE(((CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0) > 0), ((ABS((sum_sales - (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0))) / (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0)) > 0.1), false)])
         +- OverAggregate(partitionBy=[i_manager_id], window#0=[COUNT(sum_sales) AS w0$o0, $SUM0(sum_sales) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[i_manager_id, sum_sales, w0$o0, w0$o1])
            +- Sort(orderBy=[i_manager_id ASC])
               +- Exchange(distribution=[hash[i_manager_id]])
                  +- Calc(select=[i_manager_id, sum_sales])
                     +- HashAggregate(isMerge=[true], groupBy=[i_manager_id, d_moy], select=[i_manager_id, d_moy, Final_SUM(sum$0) AS sum_sales])
                        +- Exchange(distribution=[hash[i_manager_id, d_moy]])
                           +- LocalHashAggregate(groupBy=[i_manager_id, d_moy], select=[i_manager_id, d_moy, Partial_SUM(ss_sales_price) AS sum$0])
                              +- Calc(select=[i_manager_id, d_moy, ss_sales_price])
                                 +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, ss_sales_price, i_manager_id, d_moy, s_store_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk, ss_sales_price, i_manager_id, d_moy])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_store_sk, ss_sales_price, i_manager_id, d_date_sk, d_moy], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_sales_price, i_manager_id])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price, i_item_sk, i_manager_id], isBroadcast=[true], build=[right])\n:     :     :- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                    :- Exchange(distribution=[broadcast])
                                    :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk]]], fields=[s_store_sk])
                                    :- Exchange(distribution=[broadcast])
                                    :  +- Calc(select=[d_date_sk, d_moy], where=[SEARCH(d_month_seq, Sarg[1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223])])
                                    :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_month_seq, d_moy]]], fields=[d_date_sk, d_month_seq, d_moy])
                                    :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price])
                                    +- Exchange(distribution=[broadcast])
                                       +- Calc(select=[i_item_sk, i_manager_id], where=[((SEARCH(i_category, Sarg[_UTF-16LE'Books', _UTF-16LE'Children', _UTF-16LE'Electronics']) AND SEARCH(i_class, Sarg[_UTF-16LE'personal', _UTF-16LE'portable', _UTF-16LE'refernece', _UTF-16LE'self-help']) AND SEARCH(i_brand, Sarg[_UTF-16LE'exportiunivamalg #9', _UTF-16LE'scholaramalgamalg #14', _UTF-16LE'scholaramalgamalg #7', _UTF-16LE'scholaramalgamalg #9'])) OR (SEARCH(i_category, Sarg[_UTF-16LE'Men', _UTF-16LE'Music', _UTF-16LE'Women']) AND SEARCH(i_class, Sarg[_UTF-16LE'accessories', _UTF-16LE'classical', _UTF-16LE'fragrances', _UTF-16LE'pants']) AND SEARCH(i_brand, Sarg[_UTF-16LE'amalgimporto #1', _UTF-16LE'edu packscholar #1', _UTF-16LE'exportiimporto #1', _UTF-16LE'importoamalg #1'])))])
                                          +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand, i_class, i_category, i_manager_id]]], fields=[i_item_sk, i_brand, i_class, i_category, i_manager_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q64]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query64.tpl and seed 1220860970
with cs_ui as
 (select cs_item_sk
        ,sum(cs_ext_list_price) as sale,sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) as refund
  from catalog_sales
      ,catalog_returns
  where cs_item_sk = cr_item_sk
    and cs_order_number = cr_order_number
  group by cs_item_sk
  having sum(cs_ext_list_price)>2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
cross_sales as
 (select i_product_name product_name
     ,i_item_sk item_sk
     ,s_store_name store_name
     ,s_zip store_zip
     ,ad1.ca_street_number b_street_number
     ,ad1.ca_street_name b_streen_name
     ,ad1.ca_city b_city
     ,ad1.ca_zip b_zip
     ,ad2.ca_street_number c_street_number
     ,ad2.ca_street_name c_street_name
     ,ad2.ca_city c_city
     ,ad2.ca_zip c_zip
     ,d1.d_year as syear
     ,d2.d_year as fsyear
     ,d3.d_year s2year
     ,count(*) cnt
     ,sum(ss_wholesale_cost) s1
     ,sum(ss_list_price) s2
     ,sum(ss_coupon_amt) s3
  FROM   store_sales
        ,store_returns
        ,cs_ui
        ,date_dim d1
        ,date_dim d2
        ,date_dim d3
        ,store
        ,customer
        ,customer_demographics cd1
        ,customer_demographics cd2
        ,promotion
        ,household_demographics hd1
        ,household_demographics hd2
        ,customer_address ad1
        ,customer_address ad2
        ,income_band ib1
        ,income_band ib2
        ,item
  WHERE  ss_store_sk = s_store_sk AND
         ss_sold_date_sk = d1.d_date_sk AND
         ss_customer_sk = c_customer_sk AND
         ss_cdemo_sk= cd1.cd_demo_sk AND
         ss_hdemo_sk = hd1.hd_demo_sk AND
         ss_addr_sk = ad1.ca_address_sk and
         ss_item_sk = i_item_sk and
         ss_item_sk = sr_item_sk and
         ss_ticket_number = sr_ticket_number and
         ss_item_sk = cs_ui.cs_item_sk and
         c_current_cdemo_sk = cd2.cd_demo_sk AND
         c_current_hdemo_sk = hd2.hd_demo_sk AND
         c_current_addr_sk = ad2.ca_address_sk and
         c_first_sales_date_sk = d2.d_date_sk and
         c_first_shipto_date_sk = d3.d_date_sk and
         ss_promo_sk = p_promo_sk and
         hd1.hd_income_band_sk = ib1.ib_income_band_sk and
         hd2.hd_income_band_sk = ib2.ib_income_band_sk and
         cd1.cd_marital_status <> cd2.cd_marital_status and
         i_color in ('maroon','burnished','dim','steel','navajo','chocolate') and
         i_current_price between 35 and 35 + 10 and
         i_current_price between 35 + 1 and 35 + 15
group by i_product_name
       ,i_item_sk
       ,s_store_name
       ,s_zip
       ,ad1.ca_street_number
       ,ad1.ca_street_name
       ,ad1.ca_city
       ,ad1.ca_zip
       ,ad2.ca_street_number
       ,ad2.ca_street_name
       ,ad2.ca_city
       ,ad2.ca_zip
       ,d1.d_year
       ,d2.d_year
       ,d3.d_year
)
select cs1.product_name
     ,cs1.store_name
     ,cs1.store_zip
     ,cs1.b_street_number
     ,cs1.b_streen_name
     ,cs1.b_city
     ,cs1.b_zip
     ,cs1.c_street_number
     ,cs1.c_street_name
     ,cs1.c_city
     ,cs1.c_zip
     ,cs1.syear
     ,cs1.cnt
     ,cs1.s1
     ,cs1.s2
     ,cs1.s3
     ,cs2.s1
     ,cs2.s2
     ,cs2.s3
     ,cs2.syear
     ,cs2.cnt
from cross_sales cs1,cross_sales cs2
where cs1.item_sk=cs2.item_sk and
     cs1.syear = 2000 and
     cs2.syear = 2000 + 1 and
     cs2.cnt <= cs1.cnt and
     cs1.store_name = cs2.store_name and
     cs1.store_zip = cs2.store_zip
order by cs1.product_name
       ,cs1.store_name
       ,cs2.cnt

-- end query 1 in stream 0 using template query64.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$20], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first])
+- LogicalProject(product_name=[$0], store_name=[$2], store_zip=[$3], b_street_number=[$4], b_streen_name=[$5], b_city=[$6], b_zip=[$7], c_street_number=[$8], c_street_name=[$9], c_city=[$10], c_zip=[$11], syear=[$12], cnt=[$15], s1=[$16], s2=[$17], s3=[$18], s10=[$35], s20=[$36], s30=[$37], syear0=[$31], cnt0=[$34])
   +- LogicalFilter(condition=[AND(=($1, $20), =($12, 2000), =($31, +(2000, 1)), <=($34, $15), =($2, $21), =($3, $22))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}], cnt=[COUNT()], s1=[SUM($15)], s2=[SUM($16)], s3=[SUM($17)])
         :  +- LogicalProject(product_name=[$277], item_sk=[$256], store_name=[$135], store_zip=[$155], b_street_number=[$226], b_streen_name=[$227], b_city=[$230], b_zip=[$233], c_street_number=[$239], c_street_name=[$240], c_city=[$243], c_zip=[$246], syear=[$52], fsyear=[$80], s2year=[$108], ss_wholesale_cost=[$11], ss_list_price=[$12], ss_coupon_amt=[$19])
         :     +- LogicalFilter(condition=[AND(=($7, $130), =($0, $46), =($3, $159), =($4, $177), =($5, $214), =($6, $224), =($2, $256), =($2, $25), =($9, $32), =($2, $43), =($161, $186), =($162, $219), =($163, $237), =($165, $74), =($164, $102), =($8, $195), =($215, $250), =($220, $253), <>($179, $188), OR(=($273, _UTF-16LE'maroon'), =($273, _UTF-16LE'burnished'), =($273, _UTF-16LE'dim'), =($273, _UTF-16LE'steel'), =($273, _UTF-16LE'navajo'), =($273, _UTF-16LE'chocolate')), >=($261, 35), <=($261, +(35, 10)), >=($261, +(35, 1)), <=($261, +(35, 15)))])
         :        +- LogicalJoin(condition=[true], joinType=[inner])
         :           :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalFilter(condition=[>($1, *(2, $2))])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :     +- LogicalAggregate(group=[{0}], sale=[SUM($1)], refund=[SUM($2)])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :        +- LogicalProject(cs_item_sk=[$15], cs_ext_list_price=[$25], $f2=[+(+($57, $58), $59)])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :           +- LogicalFilter(condition=[AND(=($15, $36), =($17, $50))])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :              +- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :                 :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns]])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :           :  :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :           :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :           :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
         :           :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :           :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
         :           :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
         :           :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, promotion]])
         :           :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
         :           :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
         :           :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
         :           :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
         :           :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, income_band]])
         :           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, income_band]])
         :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}], cnt=[COUNT()], s1=[SUM($15)], s2=[SUM($16)], s3=[SUM($17)])
            +- LogicalProject(product_name=[$277], item_sk=[$256], store_name=[$135], store_zip=[$155], b_street_number=[$226], b_streen_name=[$227], b_city=[$230], b_zip=[$233], c_street_number=[$239], c_street_name=[$240], c_city=[$243], c_zip=[$246], syear=[$52], fsyear=[$80], s2year=[$108], ss_wholesale_cost=[$11], ss_list_price=[$12], ss_coupon_amt=[$19])
               +- LogicalFilter(condition=[AND(=($7, $130), =($0, $46), =($3, $159), =($4, $177), =($5, $214), =($6, $224), =($2, $256), =($2, $25), =($9, $32), =($2, $43), =($161, $186), =($162, $219), =($163, $237), =($165, $74), =($164, $102), =($8, $195), =($215, $250), =($220, $253), <>($179, $188), OR(=($273, _UTF-16LE'maroon'), =($273, _UTF-16LE'burnished'), =($273, _UTF-16LE'dim'), =($273, _UTF-16LE'steel'), =($273, _UTF-16LE'navajo'), =($273, _UTF-16LE'chocolate')), >=($261, 35), <=($261, +(35, 10)), >=($261, +(35, 1)), <=($261, +(35, 15)))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalFilter(condition=[>($1, *(2, $2))])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :     +- LogicalAggregate(group=[{0}], sale=[SUM($1)], refund=[SUM($2)])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :        +- LogicalProject(cs_item_sk=[$15], cs_ext_list_price=[$25], $f2=[+(+($57, $58), $59)])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :           +- LogicalFilter(condition=[AND(=($15, $36), =($17, $50))])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :              +- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :                 :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns]])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                     :  :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                     :  :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                     :  :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
                     :  :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
                     :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
                     :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
                     :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, promotion]])
                     :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
                     :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
                     :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
                     :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
                     :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, income_band]])
                     :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, income_band]])
                     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Sort(orderBy=[product_name ASC, store_name ASC, cnt0 ASC])
+- Exchange(distribution=[single])
   +- Calc(select=[product_name, store_name, store_zip, b_street_number, b_streen_name, b_city, b_zip, c_street_number, c_street_name, c_city, c_zip, CAST(2000 AS INTEGER) AS syear, cnt, s1, s2, s3, s10, s20, s30, CAST(2001 AS INTEGER) AS syear0, cnt0])
      +- HashJoin(joinType=[InnerJoin], where=[((item_sk = item_sk0) AND (cnt0 <= cnt) AND (store_name = store_name0) AND (store_zip = store_zip0))], select=[product_name, item_sk, store_name, store_zip, b_street_number, b_streen_name, b_city, b_zip, c_street_number, c_street_name, c_city, c_zip, cnt, s1, s2, s3, item_sk0, store_name0, store_zip0, cnt0, s10, s20, s30], build=[right])
         :- Exchange(distribution=[hash[item_sk, store_name, store_zip]])
         :  +- Calc(select=[product_name, item_sk, store_name, store_zip, b_street_number, b_streen_name, b_city, b_zip, c_street_number, c_street_name, c_city, c_zip, cnt, s1, s2, s3])
         :     +- HashAggregate(isMerge=[false], groupBy=[item_sk, store_name, store_zip, b_street_number, b_streen_name, b_city, b_zip, c_street_number, c_street_name, c_city, c_zip, syear, fsyear, s2year], auxGrouping=[product_name], select=[item_sk, store_name, store_zip, b_street_number, b_streen_name, b_city, b_zip, c_street_number, c_street_name, c_city, c_zip, syear, fsyear, s2year, product_name, COUNT(*) AS cnt, SUM(ss_wholesale_cost) AS s1, SUM(ss_list_price) AS s2, SUM(ss_coupon_amt) AS s3])
         :        +- Exchange(distribution=[hash[item_sk, store_name, store_zip, b_street_number, b_streen_name, b_city, b_zip, c_street_number, c_street_name, c_city, c_zip, syear, fsyear, s2year]])
         :           +- Calc(select=[i_product_name AS product_name, i_item_sk AS item_sk, s_store_name AS store_name, s_zip AS store_zip, ca_street_number AS b_street_number, ca_street_name AS b_streen_name, ca_city AS b_city, ca_zip AS b_zip, ca_street_number0 AS c_street_number, ca_street_name0 AS c_street_name, ca_city0 AS c_city, ca_zip0 AS c_zip, CAST(2000 AS INTEGER) AS syear, d_year0 AS fsyear, d_year AS s2year, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
         :              +- MultipleInput(readOrder=[0,0,0,0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_store_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0, s_store_sk, s_store_name, s_zip], isBroadcast=[true], build=[right])\n:- Calc(select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_store_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_promo_sk = p_promo_sk)], select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0, p_promo_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(c_current_hdemo_sk = hd_demo_sk)], select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, c_current_hdemo_sk, d_year, d_year0, hd_demo_sk], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, c_current_hdemo_sk, d_year, d_year0])\n:     :     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_hdemo_sk = hd_demo_sk)], select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_hdemo_sk, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, c_current_hdemo_sk, d_year, d_year0, hd_demo_sk], isBroadcast=[true], build=[right])\n:     :     :     :- Calc(select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_hdemo_sk, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, c_current_hdemo_sk, d_year, d_year0])\n:     :     :     :  +- HashJoin(joinType=[InnerJoin], where=[(i_item_sk = cs_item_sk)], select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_hdemo_sk, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, c_current_hdemo_sk, d_year, d_year0, cs_item_sk], isBroadcast=[true], build=[right])\n:     :     :     :     :- Calc(select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_hdemo_sk, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, c_current_hdemo_sk, d_year, d_year0])\n:     :     :     :     :  +- HashJoin(joinType=[InnerJoin], where=[((sr_ticket_number = ss_ticket_number) AND (sr_item_sk = ss_item_sk))], select=[sr_item_sk, sr_ticket_number, ca_street_number, ca_street_name, ca_city, ca_zip, ss_item_sk, ss_hdemo_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, c_current_hdemo_sk, d_year, d_year0], build=[right])\n:     :     :     :     :     :- [#6] Exchange(distribution=[hash[sr_ticket_number, sr_item_sk]])\n:     :     :     :     :     +- [#7] Exchange(distribution=[hash[ss_ticket_number, ss_item_sk]])\n:     :     :     :     +- [#5] Exchange(distribution=[broadcast])\n:     :     :     +- [#3] Exchange(distribution=[broadcast])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
         :                 :- Exchange(distribution=[broadcast])
         :                 :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_store_name, s_zip]]], fields=[s_store_sk, s_store_name, s_zip])
         :                 :- Exchange(distribution=[broadcast])
         :                 :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, promotion, project=[p_promo_sk]]], fields=[p_promo_sk])
         :                 :- Exchange(distribution=[broadcast])(reuse_id=[1])
         :                 :  +- Calc(select=[hd_demo_sk])
         :                 :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(hd_income_band_sk = ib_income_band_sk)], select=[hd_demo_sk, hd_income_band_sk, ib_income_band_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, household_demographics, project=[hd_demo_sk, hd_income_band_sk]]], fields=[hd_demo_sk, hd_income_band_sk])\n+- [#2] Exchange(distribution=[broadcast])\n])
         :                 :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, household_demographics, project=[hd_demo_sk, hd_income_band_sk]]], fields=[hd_demo_sk, hd_income_band_sk])
         :                 :        +- Exchange(distribution=[broadcast])
         :                 :           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, income_band, project=[ib_income_band_sk]]], fields=[ib_income_band_sk])
         :                 :- Reused(reference_id=[1])
         :                 :- Exchange(distribution=[broadcast])(reuse_id=[2])
         :                 :  +- Calc(select=[cs_item_sk], where=[(sale > (2 * refund))])
         :                 :     +- HashAggregate(isMerge=[false], groupBy=[cs_item_sk], select=[cs_item_sk, SUM(cs_ext_list_price) AS sale, SUM($f2) AS refund])
         :                 :        +- Calc(select=[cs_item_sk, cs_ext_list_price, ((cr_refunded_cash + cr_reversed_charge) + cr_store_credit) AS $f2])
         :                 :           +- HashJoin(joinType=[InnerJoin], where=[((cs_item_sk = cr_item_sk) AND (cs_order_number = cr_order_number))], select=[cs_item_sk, cs_order_number, cs_ext_list_price, cr_item_sk, cr_order_number, cr_refunded_cash, cr_reversed_charge, cr_store_credit], build=[right])
         :                 :              :- Exchange(distribution=[hash[cs_item_sk]])
         :                 :              :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_item_sk, cs_order_number, cs_ext_list_price]]], fields=[cs_item_sk, cs_order_number, cs_ext_list_price])
         :                 :              +- Exchange(distribution=[hash[cr_item_sk]])
         :                 :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns, project=[cr_item_sk, cr_order_number, cr_refunded_cash, cr_reversed_charge, cr_store_credit]]], fields=[cr_item_sk, cr_order_number, cr_refunded_cash, cr_reversed_charge, cr_store_credit])
         :                 :- Exchange(distribution=[hash[sr_ticket_number, sr_item_sk]])
         :                 :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_item_sk, sr_ticket_number]]], fields=[sr_item_sk, sr_ticket_number])
         :                 +- Exchange(distribution=[hash[ss_ticket_number, ss_item_sk]])
         :                    +- Calc(select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_item_sk, ss_hdemo_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, c_current_hdemo_sk, d_year, d_year0])
         :                       +- HashJoin(joinType=[InnerJoin], where=[(ss_addr_sk = ca_address_sk)], select=[ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip, ss_item_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, c_current_hdemo_sk, d_year, d_year0], build=[right])
         :                          :- Exchange(distribution=[hash[ca_address_sk]])
         :                          :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip]]], fields=[ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip])
         :                          +- Exchange(distribution=[hash[ss_addr_sk]])
         :                             +- Calc(select=[ss_item_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number, ca_street_name, ca_city, ca_zip, c_current_hdemo_sk, d_year, d_year0])
         :                                +- HashJoin(joinType=[InnerJoin], where=[((c_current_cdemo_sk = cd_demo_sk) AND (cd_marital_status0 <> cd_marital_status))], select=[cd_demo_sk, cd_marital_status, cd_marital_status0, ss_item_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number, ca_street_name, ca_city, ca_zip, c_current_cdemo_sk, c_current_hdemo_sk, d_year, d_year0], build=[left])
         :                                   :- Exchange(distribution=[hash[cd_demo_sk]])
         :                                   :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk, cd_marital_status]]], fields=[cd_demo_sk, cd_marital_status])
         :                                   +- Exchange(distribution=[hash[c_current_cdemo_sk]])
         :                                      +- Calc(select=[cd_marital_status, ss_item_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number, ca_street_name, ca_city, ca_zip, c_current_cdemo_sk, c_current_hdemo_sk, d_year, d_year0])
         :                                         +- HashJoin(joinType=[InnerJoin], where=[(ss_cdemo_sk = cd_demo_sk)], select=[cd_demo_sk, cd_marital_status, ss_item_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number, ca_street_name, ca_city, ca_zip, c_current_cdemo_sk, c_current_hdemo_sk, d_year, d_year0], build=[left])
         :                                            :- Exchange(distribution=[hash[cd_demo_sk]])
         :                                            :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk, cd_marital_status]]], fields=[cd_demo_sk, cd_marital_status])
         :                                            +- Exchange(distribution=[hash[ss_cdemo_sk]])
         :                                               +- Calc(select=[ss_item_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number, ca_street_name, ca_city, ca_zip, c_current_cdemo_sk, c_current_hdemo_sk, d_year, d_year0])
         :                                                  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number, ca_street_name, ca_city, ca_zip, c_current_cdemo_sk, c_current_hdemo_sk, d_year, d_year0, d_date_sk], isBroadcast=[true], build=[right])
         :                                                     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number, ca_street_name, ca_city, ca_zip, c_current_cdemo_sk, c_current_hdemo_sk, d_year, d_year0])(reuse_id=[3])
         :                                                     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_customer_sk = c_customer_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number, ca_street_name, ca_city, ca_zip, c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, d_year, d_year0], build=[right])
         :                                                     :     :- Exchange(distribution=[hash[ss_customer_sk]])
         :                                                     :     :  +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt])\n+- [#2] Exchange(distribution=[broadcast])\n])
         :                                                     :     :     :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
         :                                                     :     :     +- Exchange(distribution=[broadcast])
         :                                                     :     :        +- Calc(select=[i_item_sk, i_product_name], where=[(SEARCH(i_color, Sarg[_UTF-16LE'burnished', _UTF-16LE'chocolate', _UTF-16LE'dim', _UTF-16LE'maroon', _UTF-16LE'navajo', _UTF-16LE'steel']) AND SEARCH(i_current_price, Sarg[[36..45]]) AND i_current_price IS NOT NULL)])
         :                                                     :     :           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_current_price, i_color, i_product_name]]], fields=[i_item_sk, i_current_price, i_color, i_product_name])
         :                                                     :     +- Exchange(distribution=[hash[c_customer_sk]])
         :                                                     :        +- Calc(select=[ca_street_number, ca_street_name, ca_city, ca_zip, c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, d_year, d_year0])
         :                                                     :           +- HashJoin(joinType=[InnerJoin], where=[(c_current_addr_sk = ca_address_sk)], select=[ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip, c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, d_year, d_year0], build=[right])
         :                                                     :              :- Exchange(distribution=[hash[ca_address_sk]])
         :                                                     :              :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip]]], fields=[ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip])
         :                                                     :              +- Exchange(distribution=[hash[c_current_addr_sk]])
         :                                                     :                 +- Calc(select=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, d_year, d_year0])
         :                                                     :                    +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(c_first_sales_date_sk = d_date_sk)], select=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_sales_date_sk, d_year, d_date_sk, d_year0], isBroadcast=[true], build=[right])\n:- Calc(select=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_sales_date_sk, d_year])\n:  +- HashJoin(joinType=[InnerJoin], where=[(c_first_shipto_date_sk = d_date_sk)], select=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk, d_date_sk, d_year], isBroadcast=[true], build=[right])\n:     :- Calc(select=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk], where=[(c_first_sales_date_sk IS NOT NULL AND c_first_shipto_date_sk IS NOT NULL)])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk]]], fields=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
         :                                                     :                       :- Exchange(distribution=[broadcast])
         :                                                     :                       :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
         :                                                     :                       :- Exchange(distribution=[broadcast])
         :                                                     :                       :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
         :                                                     :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk]]], fields=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_shipto_date_sk, c_first_sales_date_sk])
         :                                                     +- Exchange(distribution=[broadcast])
         :                                                        +- Calc(select=[d_date_sk], where=[(d_year = 2000)])
         :                                                           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
         +- Exchange(distribution=[hash[item_sk, store_name, store_zip]])
            +- Calc(select=[item_sk, store_name, store_zip, cnt, s1, s2, s3])
               +- HashAggregate(isMerge=[false], groupBy=[item_sk, store_name, store_zip, b_street_number, b_streen_name, b_city, b_zip, c_street_number, c_street_name, c_city, c_zip, syear, fsyear, s2year], select=[item_sk, store_name, store_zip, b_street_number, b_streen_name, b_city, b_zip, c_street_number, c_street_name, c_city, c_zip, syear, fsyear, s2year, COUNT(*) AS cnt, SUM(ss_wholesale_cost) AS s1, SUM(ss_list_price) AS s2, SUM(ss_coupon_amt) AS s3])
                  +- Exchange(distribution=[hash[item_sk, store_name, store_zip, b_street_number, b_streen_name, b_city, b_zip, c_street_number, c_street_name, c_city, c_zip, syear, fsyear, s2year]])
                     +- Calc(select=[i_product_name AS product_name, i_item_sk AS item_sk, s_store_name AS store_name, s_zip AS store_zip, ca_street_number AS b_street_number, ca_street_name AS b_streen_name, ca_city AS b_city, ca_zip AS b_zip, ca_street_number0 AS c_street_number, ca_street_name0 AS c_street_name, ca_city0 AS c_city, ca_zip0 AS c_zip, CAST(2001 AS INTEGER) AS syear, d_year0 AS fsyear, d_year AS s2year, ss_wholesale_cost, ss_list_price, ss_coupon_amt])
                        +- MultipleInput(readOrder=[0,0,0,0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_store_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0, s_store_sk, s_store_name, s_zip], isBroadcast=[true], build=[right])\n:- Calc(select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_store_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_promo_sk = p_promo_sk)], select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0, p_promo_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, d_year, d_year0])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(c_current_hdemo_sk = hd_demo_sk)], select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, c_current_hdemo_sk, d_year, d_year0, hd_demo_sk], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, c_current_hdemo_sk, d_year, d_year0])\n:     :     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_hdemo_sk = hd_demo_sk)], select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_hdemo_sk, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, c_current_hdemo_sk, d_year, d_year0, hd_demo_sk], isBroadcast=[true], build=[right])\n:     :     :     :- Calc(select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_hdemo_sk, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, c_current_hdemo_sk, d_year, d_year0])\n:     :     :     :  +- HashJoin(joinType=[InnerJoin], where=[(i_item_sk = cs_item_sk)], select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_hdemo_sk, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, c_current_hdemo_sk, d_year, d_year0, cs_item_sk], isBroadcast=[true], build=[right])\n:     :     :     :     :- Calc(select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_hdemo_sk, ss_store_sk, ss_promo_sk, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, c_current_hdemo_sk, d_year, d_year0])\n:     :     :     :     :  +- HashJoin(joinType=[InnerJoin], where=[((sr_ticket_number = ss_ticket_number) AND (sr_item_sk = ss_item_sk))], select=[sr_item_sk, sr_ticket_number, ca_street_number, ca_street_name, ca_city, ca_zip, ss_item_sk, ss_hdemo_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, c_current_hdemo_sk, d_year, d_year0], build=[right])\n:     :     :     :     :     :- [#6] Exchange(distribution=[hash[sr_ticket_number, sr_item_sk]])\n:     :     :     :     :     +- [#7] Exchange(distribution=[hash[ss_ticket_number, ss_item_sk]])\n:     :     :     :     +- [#5] Exchange(distribution=[broadcast])\n:     :     :     +- [#3] Exchange(distribution=[broadcast])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                           :- Exchange(distribution=[broadcast])
                           :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_store_name, s_zip]]], fields=[s_store_sk, s_store_name, s_zip])
                           :- Exchange(distribution=[broadcast])
                           :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, promotion, project=[p_promo_sk]]], fields=[p_promo_sk])
                           :- Reused(reference_id=[1])
                           :- Reused(reference_id=[1])
                           :- Reused(reference_id=[2])
                           :- Exchange(distribution=[hash[sr_ticket_number, sr_item_sk]])
                           :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_item_sk, sr_ticket_number]]], fields=[sr_item_sk, sr_ticket_number])
                           +- Exchange(distribution=[hash[ss_ticket_number, ss_item_sk]])
                              +- Calc(select=[ca_street_number, ca_street_name, ca_city, ca_zip, ss_item_sk, ss_hdemo_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, c_current_hdemo_sk, d_year, d_year0])
                                 +- HashJoin(joinType=[InnerJoin], where=[(ss_addr_sk = ca_address_sk)], select=[ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip, ss_item_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number0, ca_street_name0, ca_city0, ca_zip0, c_current_hdemo_sk, d_year, d_year0], build=[right])
                                    :- Exchange(distribution=[hash[ca_address_sk]])
                                    :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip]]], fields=[ca_address_sk, ca_street_number, ca_street_name, ca_city, ca_zip])
                                    +- Exchange(distribution=[hash[ss_addr_sk]])
                                       +- Calc(select=[ss_item_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number, ca_street_name, ca_city, ca_zip, c_current_hdemo_sk, d_year, d_year0])
                                          +- HashJoin(joinType=[InnerJoin], where=[((c_current_cdemo_sk = cd_demo_sk) AND (cd_marital_status0 <> cd_marital_status))], select=[cd_demo_sk, cd_marital_status, cd_marital_status0, ss_item_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number, ca_street_name, ca_city, ca_zip, c_current_cdemo_sk, c_current_hdemo_sk, d_year, d_year0], build=[left])
                                             :- Exchange(distribution=[hash[cd_demo_sk]])
                                             :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk, cd_marital_status]]], fields=[cd_demo_sk, cd_marital_status])
                                             +- Exchange(distribution=[hash[c_current_cdemo_sk]])
                                                +- Calc(select=[cd_marital_status, ss_item_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number, ca_street_name, ca_city, ca_zip, c_current_cdemo_sk, c_current_hdemo_sk, d_year, d_year0])
                                                   +- HashJoin(joinType=[InnerJoin], where=[(ss_cdemo_sk = cd_demo_sk)], select=[cd_demo_sk, cd_marital_status, ss_item_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number, ca_street_name, ca_city, ca_zip, c_current_cdemo_sk, c_current_hdemo_sk, d_year, d_year0], build=[left])
                                                      :- Exchange(distribution=[hash[cd_demo_sk]])
                                                      :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk, cd_marital_status]]], fields=[cd_demo_sk, cd_marital_status])
                                                      +- Exchange(distribution=[hash[ss_cdemo_sk]])
                                                         +- Calc(select=[ss_item_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number, ca_street_name, ca_city, ca_zip, c_current_cdemo_sk, c_current_hdemo_sk, d_year, d_year0])
                                                            +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_wholesale_cost, ss_list_price, ss_coupon_amt, i_item_sk, i_product_name, ca_street_number, ca_street_name, ca_city, ca_zip, c_current_cdemo_sk, c_current_hdemo_sk, d_year, d_year0, d_date_sk], isBroadcast=[true], build=[right])
                                                               :- Reused(reference_id=[3])
                                                               +- Exchange(distribution=[broadcast])
                                                                  +- Calc(select=[d_date_sk], where=[(d_year = 2001)])
                                                                     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q65]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query65.tpl and seed 1819994127
select 
	s_store_name,
	i_item_desc,
	sc.revenue,
	i_current_price,
	i_wholesale_cost,
	i_brand
 from store, item,
     (select ss_store_sk, avg(revenue) as ave
 	from
 	    (select  ss_store_sk, ss_item_sk, 
 		     sum(ss_sales_price) as revenue
 		from store_sales, date_dim
 		where ss_sold_date_sk = d_date_sk and d_month_seq between 1212 and 1212+11
 		group by ss_store_sk, ss_item_sk) sa
 	group by ss_store_sk) sb,
     (select  ss_store_sk, ss_item_sk, sum(ss_sales_price) as revenue
 	from store_sales, date_dim
 	where ss_sold_date_sk = d_date_sk and d_month_seq between 1212 and 1212+11
 	group by ss_store_sk, ss_item_sk) sc
 where sb.ss_store_sk = sc.ss_store_sk and 
       sc.revenue <= 0.1 * sb.ave and
       s_store_sk = sc.ss_store_sk and
       i_item_sk = sc.ss_item_sk
 order by s_store_name, i_item_desc
limit 100

-- end query 1 in stream 0 using template query65.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalProject(s_store_name=[$5], i_item_desc=[$33], revenue=[$55], i_current_price=[$34], i_wholesale_cost=[$35], i_brand=[$37])
   +- LogicalFilter(condition=[AND(=($51, $53), <=($55, *(0.1:DECIMAL(2, 1), $52)), =($0, $53), =($29, $54))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
         :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
         :  +- LogicalAggregate(group=[{0}], ave=[AVG($1)])
         :     +- LogicalProject(ss_store_sk=[$0], revenue=[$2])
         :        +- LogicalAggregate(group=[{0, 1}], revenue=[SUM($2)])
         :           +- LogicalProject(ss_store_sk=[$7], ss_item_sk=[$2], ss_sales_price=[$13])
         :              +- LogicalFilter(condition=[AND(=($0, $23), >=($26, 1212), <=($26, +(1212, 11)))])
         :                 +- LogicalJoin(condition=[true], joinType=[inner])
         :                    :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :                    +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         +- LogicalAggregate(group=[{0, 1}], revenue=[SUM($2)])
            +- LogicalProject(ss_store_sk=[$7], ss_item_sk=[$2], ss_sales_price=[$13])
               +- LogicalFilter(condition=[AND(=($0, $23), >=($26, 1212), <=($26, +(1212, 11)))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[s_store_name, i_item_desc, revenue, i_current_price, i_wholesale_cost, i_brand])
+- SortLimit(orderBy=[s_store_name ASC, i_item_desc ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[s_store_name ASC, i_item_desc ASC], offset=[0], fetch=[100], global=[false])
         +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, revenue, i_item_desc, i_current_price, i_wholesale_cost, i_brand, s_store_sk, s_store_name], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk, revenue, i_item_desc, i_current_price, i_wholesale_cost, i_brand])\n:  +- HashJoin(joinType=[InnerJoin], where=[(i_item_sk = ss_item_sk)], select=[ss_store_sk, ss_item_sk, revenue, i_item_sk, i_item_desc, i_current_price, i_wholesale_cost, i_brand], build=[right])\n:     :- [#2] Exchange(distribution=[hash[ss_item_sk]])\n:     +- [#3] Exchange(distribution=[hash[i_item_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :- Exchange(distribution=[broadcast])
            :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_store_name]]], fields=[s_store_sk, s_store_name])
            :- Exchange(distribution=[hash[ss_item_sk]])
            :  +- Calc(select=[ss_store_sk, ss_item_sk, revenue])
            :     +- HashJoin(joinType=[InnerJoin], where=[((ss_store_sk0 = ss_store_sk) AND (revenue <= (0.1 * ave)))], select=[ss_store_sk, ss_item_sk, revenue, ss_store_sk0, ave], isBroadcast=[true], build=[right])
            :        :- Exchange(distribution=[any], shuffle_mode=[BATCH])
            :        :  +- HashAggregate(isMerge=[false], groupBy=[ss_store_sk, ss_item_sk], select=[ss_store_sk, ss_item_sk, SUM(ss_sales_price) AS revenue])(reuse_id=[1])
            :        :     +- Exchange(distribution=[hash[ss_store_sk, ss_item_sk]])
            :        :        +- Calc(select=[ss_store_sk, ss_item_sk, ss_sales_price])
            :        :           +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price], where=[ss_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :        :              :- Exchange(distribution=[broadcast])
            :        :              :  +- Calc(select=[d_date_sk], where=[SEARCH(d_month_seq, Sarg[[1212..1223]])])
            :        :              :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_month_seq]]], fields=[d_date_sk, d_month_seq])
            :        :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price])
            :        +- Exchange(distribution=[broadcast])
            :           +- HashAggregate(isMerge=[true], groupBy=[ss_store_sk], select=[ss_store_sk, Final_AVG(sum$0, count$1) AS ave])
            :              +- Exchange(distribution=[hash[ss_store_sk]])
            :                 +- LocalHashAggregate(groupBy=[ss_store_sk], select=[ss_store_sk, Partial_AVG(revenue) AS (sum$0, count$1)])
            :                    +- Calc(select=[ss_store_sk, revenue])
            :                       +- Reused(reference_id=[1])
            +- Exchange(distribution=[hash[i_item_sk]])
               +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_desc, i_current_price, i_wholesale_cost, i_brand]]], fields=[i_item_sk, i_item_desc, i_current_price, i_wholesale_cost, i_brand])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q67]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query67.tpl and seed 1819994127
select  *
from (select i_category
            ,i_class
            ,i_brand
            ,i_product_name
            ,d_year
            ,d_qoy
            ,d_moy
            ,s_store_id
            ,sumsales
            ,rank() over (partition by i_category order by sumsales desc) rk
      from (select i_category
                  ,i_class
                  ,i_brand
                  ,i_product_name
                  ,d_year
                  ,d_qoy
                  ,d_moy
                  ,s_store_id
                  ,sum(coalesce(ss_sales_price*ss_quantity,0)) sumsales
            from store_sales
                ,date_dim
                ,store
                ,item
       where  ss_sold_date_sk=d_date_sk
          and ss_item_sk=i_item_sk
          and ss_store_sk = s_store_sk
          and d_month_seq between 1212 and 1212+11
       group by  rollup(i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy,s_store_id))dw1) dw2
where rk <= 100
order by i_category
        ,i_class
        ,i_brand
        ,i_product_name
        ,d_year
        ,d_qoy
        ,d_moy
        ,s_store_id
        ,sumsales
        ,rk
limit 100

-- end query 1 in stream 0 using template query67.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], sort5=[$5], sort6=[$6], sort7=[$7], sort8=[$8], sort9=[$9], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first], dir8=[ASC-nulls-first], dir9=[ASC-nulls-first], fetch=[100])
+- LogicalProject(i_category=[$0], i_class=[$1], i_brand=[$2], i_product_name=[$3], d_year=[$4], d_qoy=[$5], d_moy=[$6], s_store_id=[$7], sumsales=[$8], rk=[$9])
   +- LogicalFilter(condition=[<=($9, 100)])
      +- LogicalProject(i_category=[$0], i_class=[$1], i_brand=[$2], i_product_name=[$3], d_year=[$4], d_qoy=[$5], d_moy=[$6], s_store_id=[$7], sumsales=[$8], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $8 DESC NULLS LAST)])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], groups=[[{0, 1, 2, 3, 4, 5, 6, 7}, {0, 1, 2, 3, 4, 5, 6}, {0, 1, 2, 3, 4, 5}, {0, 1, 2, 3, 4}, {0, 1, 2, 3}, {0, 1, 2}, {0, 1}, {0}, {}]], sumsales=[SUM($8)])
            +- LogicalProject(i_category=[$92], i_class=[$90], i_brand=[$88], i_product_name=[$101], d_year=[$29], d_qoy=[$33], d_moy=[$31], s_store_id=[$52], $f8=[coalesce(*($13, $10), 0:DOUBLE)])
               +- LogicalFilter(condition=[AND(=($0, $23), =($2, $80), =($7, $51), >=($26, 1212), <=($26, +(1212, 11)))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                     :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                     :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
                     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[i_category ASC, i_class ASC, i_brand ASC, i_product_name ASC, d_year ASC, d_qoy ASC, d_moy ASC, s_store_id ASC, sumsales ASC, w0$o0 ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_category ASC, i_class ASC, i_brand ASC, i_product_name ASC, d_year ASC, d_qoy ASC, d_moy ASC, s_store_id ASC, sumsales ASC, w0$o0 ASC], offset=[0], fetch=[100], global=[false])
      +- Rank(rankType=[RANK], rankRange=[rankStart=1, rankEnd=100], partitionBy=[i_category], orderBy=[sumsales DESC], global=[true], select=[i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, sumsales, w0$o0])
         +- Sort(orderBy=[i_category ASC, sumsales DESC])
            +- Exchange(distribution=[hash[i_category]])
               +- Rank(rankType=[RANK], rankRange=[rankStart=1, rankEnd=100], partitionBy=[i_category], orderBy=[sumsales DESC], global=[false], select=[i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, sumsales])
                  +- Sort(orderBy=[i_category ASC, sumsales DESC])
                     +- Calc(select=[i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, sumsales])
                        +- HashAggregate(isMerge=[true], groupBy=[i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, $e], select=[i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, $e, Final_SUM(sum$0) AS sumsales])
                           +- Exchange(distribution=[hash[i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, $e]])
                              +- LocalHashAggregate(groupBy=[i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, $e], select=[i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, $e, Partial_SUM($f8) AS sum$0])
                                 +- Expand(projects=[{i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, $f8, 0 AS $e}, {i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, null AS s_store_id, $f8, 1 AS $e}, {i_category, i_class, i_brand, i_product_name, d_year, d_qoy, null AS d_moy, null AS s_store_id, $f8, 3 AS $e}, {i_category, i_class, i_brand, i_product_name, d_year, null AS d_qoy, null AS d_moy, null AS s_store_id, $f8, 7 AS $e}, {i_category, i_class, i_brand, i_product_name, null AS d_year, null AS d_qoy, null AS d_moy, null AS s_store_id, $f8, 15 AS $e}, {i_category, i_class, i_brand, null AS i_product_name, null AS d_year, null AS d_qoy, null AS d_moy, null AS s_store_id, $f8, 31 AS $e}, {i_category, i_class, null AS i_brand, null AS i_product_name, null AS d_year, null AS d_qoy, null AS d_moy, null AS s_store_id, $f8, 63 AS $e}, {i_category, null AS i_class, null AS i_brand, null AS i_product_name, null AS d_year, null AS d_qoy, null AS d_moy, null AS s_store_id, $f8, 127 AS $e}, {null AS i_category, null AS i_class, null AS i_brand, null AS i_product_name, null AS d_year, null AS d_qoy, null AS d_moy, null AS s_store_id, $f8, 255 AS $e}])
                                    +- Calc(select=[i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, coalesce((ss_sales_price * ss_quantity), 0) AS $f8])
                                       +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, ss_quantity, ss_sales_price, d_year, d_moy, d_qoy, i_brand, i_class, i_category, i_product_name, s_store_sk, s_store_id], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk, ss_quantity, ss_sales_price, d_year, d_moy, d_qoy, i_brand, i_class, i_category, i_product_name])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, ss_store_sk, ss_quantity, ss_sales_price, d_year, d_moy, d_qoy, i_item_sk, i_brand, i_class, i_category, i_product_name], build=[right])\n:     :- [#2] Exchange(distribution=[hash[ss_item_sk]])\n:     +- [#3] Exchange(distribution=[hash[i_item_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                          :- Exchange(distribution=[broadcast])
                                          :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_store_id]]], fields=[s_store_sk, s_store_id])
                                          :- Exchange(distribution=[hash[ss_item_sk]])
                                          :  +- Calc(select=[ss_item_sk, ss_store_sk, ss_quantity, ss_sales_price, d_year, d_moy, d_qoy])
                                          :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, ss_sales_price, d_date_sk, d_year, d_moy, d_qoy], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, ss_sales_price], where=[ss_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, ss_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, ss_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                          :        :- Exchange(distribution=[broadcast])
                                          :        :  +- Calc(select=[d_date_sk, d_year, d_moy, d_qoy], where=[SEARCH(d_month_seq, Sarg[[1212..1223]])])
                                          :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_month_seq, d_year, d_moy, d_qoy]]], fields=[d_date_sk, d_month_seq, d_year, d_moy, d_qoy])
                                          :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, ss_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_quantity, ss_sales_price])
                                          +- Exchange(distribution=[hash[i_item_sk]])
                                             +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand, i_class, i_category, i_product_name]]], fields=[i_item_sk, i_brand, i_class, i_category, i_product_name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q68]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query68.tpl and seed 803547492
select  c_last_name
       ,c_first_name
       ,ca_city
       ,bought_city
       ,ss_ticket_number
       ,extended_price
       ,extended_tax
       ,list_price
 from (select ss_ticket_number
             ,ss_customer_sk
             ,ca_city bought_city
             ,sum(ss_ext_sales_price) extended_price 
             ,sum(ss_ext_list_price) list_price
             ,sum(ss_ext_tax) extended_tax 
       from store_sales
           ,date_dim
           ,store
           ,household_demographics
           ,customer_address 
       where store_sales.ss_sold_date_sk = date_dim.d_date_sk
         and store_sales.ss_store_sk = store.s_store_sk  
        and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
        and store_sales.ss_addr_sk = customer_address.ca_address_sk
        and date_dim.d_dom between 1 and 2 
        and (household_demographics.hd_dep_count = 2 or
             household_demographics.hd_vehicle_count= 1)
        and date_dim.d_year in (1998,1998+1,1998+2)
        and store.s_city in ('Cedar Grove','Wildwood')
       group by ss_ticket_number
               ,ss_customer_sk
               ,ss_addr_sk,ca_city) dn
      ,customer
      ,customer_address current_addr
 where ss_customer_sk = c_customer_sk
   and customer.c_current_addr_sk = current_addr.ca_address_sk
   and current_addr.ca_city <> bought_city
 order by c_last_name
         ,ss_ticket_number
 limit 100

-- end query 1 in stream 0 using template query68.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$4], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalProject(c_last_name=[$15], c_first_name=[$14], ca_city=[$30], bought_city=[$2], ss_ticket_number=[$0], extended_price=[$3], extended_tax=[$5], list_price=[$4])
   +- LogicalFilter(condition=[AND(=($1, $6), =($10, $24), <>($30, $2))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalProject(ss_ticket_number=[$0], ss_customer_sk=[$1], bought_city=[$3], extended_price=[$4], list_price=[$5], extended_tax=[$6])
         :  :  +- LogicalAggregate(group=[{0, 1, 2, 3}], extended_price=[SUM($4)], list_price=[SUM($5)], extended_tax=[SUM($6)])
         :  :     +- LogicalProject(ss_ticket_number=[$9], ss_customer_sk=[$3], ss_addr_sk=[$6], bought_city=[$91], ss_ext_sales_price=[$15], ss_ext_list_price=[$17], ss_ext_tax=[$18])
         :  :        +- LogicalFilter(condition=[AND(=($0, $23), =($7, $51), =($5, $80), =($6, $85), >=($32, 1), <=($32, 2), OR(=($83, 2), =($84, 1)), OR(=($29, 1998), =($29, +(1998, 1)), =($29, +(1998, 2))), OR(=($73, _UTF-16LE'Cedar Grove'), =($73, _UTF-16LE'Wildwood')))])
         :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :              :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :  :              :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :              :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
         :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
         :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
         :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[c_last_name, c_first_name, ca_city, bought_city, ss_ticket_number, extended_price, extended_tax, list_price])
+- SortLimit(orderBy=[c_last_name ASC, ss_ticket_number ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[c_last_name ASC, ss_ticket_number ASC], offset=[0], fetch=[100], global=[false])
         +- HashJoin(joinType=[InnerJoin], where=[((c_current_addr_sk = ca_address_sk) AND (ca_city <> bought_city))], select=[ca_address_sk, ca_city, c_current_addr_sk, c_first_name, c_last_name, ss_ticket_number, bought_city, extended_price, list_price, extended_tax], build=[left])
            :- Exchange(distribution=[hash[ca_address_sk]])
            :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_city]]], fields=[ca_address_sk, ca_city])
            +- Exchange(distribution=[hash[c_current_addr_sk]])
               +- Calc(select=[c_current_addr_sk, c_first_name, c_last_name, ss_ticket_number, bought_city, extended_price, list_price, extended_tax])
                  +- HashJoin(joinType=[InnerJoin], where=[(ss_customer_sk = c_customer_sk)], select=[c_customer_sk, c_current_addr_sk, c_first_name, c_last_name, ss_ticket_number, ss_customer_sk, bought_city, extended_price, list_price, extended_tax], build=[right])
                     :- Exchange(distribution=[hash[c_customer_sk]])
                     :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_current_addr_sk, c_first_name, c_last_name]]], fields=[c_customer_sk, c_current_addr_sk, c_first_name, c_last_name])
                     +- Exchange(distribution=[hash[ss_customer_sk]])
                        +- Calc(select=[ss_ticket_number, ss_customer_sk, ca_city AS bought_city, extended_price, list_price, extended_tax])
                           +- HashJoin(joinType=[InnerJoin], where=[(ss_addr_sk = ca_address_sk)], select=[ca_address_sk, ca_city, ss_customer_sk, ss_addr_sk, ss_ticket_number, extended_price, list_price, extended_tax], build=[left])
                              :- Exchange(distribution=[hash[ca_address_sk]])
                              :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_city]]], fields=[ca_address_sk, ca_city])
                              +- Exchange(distribution=[hash[ss_addr_sk]])
                                 +- HashAggregate(isMerge=[false], groupBy=[ss_customer_sk, ss_addr_sk, ss_ticket_number], select=[ss_customer_sk, ss_addr_sk, ss_ticket_number, SUM(ss_ext_sales_price) AS extended_price, SUM(ss_ext_list_price) AS list_price, SUM(ss_ext_tax) AS extended_tax])
                                    +- Exchange(distribution=[hash[ss_customer_sk, ss_addr_sk, ss_ticket_number]])
                                       +- Calc(select=[ss_customer_sk, ss_addr_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax])
                                          +- MultipleInput(readOrder=[0,0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_hdemo_sk = hd_demo_sk)], select=[ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax, hd_demo_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax, s_store_sk], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax], where=[ss_sold_date_sk IS NOT NULL])\n:     :     :  +- [#4] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                             :- Exchange(distribution=[broadcast])
                                             :  +- Calc(select=[hd_demo_sk], where=[((hd_dep_count = 2) OR (hd_vehicle_count = 1))])
                                             :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, household_demographics, project=[hd_demo_sk, hd_dep_count, hd_vehicle_count]]], fields=[hd_demo_sk, hd_dep_count, hd_vehicle_count])
                                             :- Exchange(distribution=[broadcast])
                                             :  +- Calc(select=[d_date_sk], where=[(SEARCH(d_dom, Sarg[[1..2]]) AND SEARCH(d_year, Sarg[1998, 1999, 2000]))])
                                             :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_dom]]], fields=[d_date_sk, d_year, d_dom])
                                             :- Exchange(distribution=[broadcast])
                                             :  +- Calc(select=[s_store_sk], where=[SEARCH(s_city, Sarg[_UTF-16LE'Cedar Grove', _UTF-16LE'Wildwood'])])
                                             :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_city]]], fields=[s_store_sk, s_city])
                                             +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_ext_sales_price, ss_ext_list_price, ss_ext_tax])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q69]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query69.tpl and seed 797269820
select  
  cd_gender,
  cd_marital_status,
  cd_education_status,
  count(*) cnt1,
  cd_purchase_estimate,
  count(*) cnt2,
  cd_credit_rating,
  count(*) cnt3
 from
  customer c,customer_address ca,customer_demographics
 where
  c.c_current_addr_sk = ca.ca_address_sk and
  ca_state in ('CO','IL','MN') and
  cd_demo_sk = c.c_current_cdemo_sk and 
  exists (select *
          from store_sales,date_dim
          where c.c_customer_sk = ss_customer_sk and
                ss_sold_date_sk = d_date_sk and
                d_year = 1999 and
                d_moy between 1 and 1+2) and
   (not exists (select *
            from web_sales,date_dim
            where c.c_customer_sk = ws_bill_customer_sk and
                  ws_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_moy between 1 and 1+2) and
    not exists (select * 
            from catalog_sales,date_dim
            where c.c_customer_sk = cs_ship_customer_sk and
                  cs_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_moy between 1 and 1+2))
 group by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
 order by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating
 limit 100

-- end query 1 in stream 0 using template query69.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$4], sort4=[$6], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], fetch=[100])
+- LogicalProject(cd_gender=[$0], cd_marital_status=[$1], cd_education_status=[$2], cnt1=[$5], cd_purchase_estimate=[$3], cnt2=[$5], cd_credit_rating=[$4], cnt3=[$5])
   +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], cnt3=[COUNT()])
      +- LogicalProject(cd_gender=[$32], cd_marital_status=[$33], cd_education_status=[$34], cd_purchase_estimate=[$35], cd_credit_rating=[$36])
         +- LogicalFilter(condition=[AND(=($4, $18), OR(=($26, _UTF-16LE'CO'), =($26, _UTF-16LE'IL'), =($26, _UTF-16LE'MN')), =($31, $2), EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $3), =($0, $23), =($29, 1999), >=($31, 1), <=($31, +(1, 2)))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
}), NOT(EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $4), =($0, $34), =($40, 1999), >=($42, 1), <=($42, +(1, 2)))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
})), NOT(EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $7), =($0, $34), =($40, 1999), >=($42, 1), <=($42, +(1, 2)))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
})))], variablesSet=[[$cor0]])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
               :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
               +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[cd_gender, cd_marital_status, cd_education_status, cnt3 AS cnt1, cd_purchase_estimate, cnt3 AS cnt2, cd_credit_rating, cnt3])
+- SortLimit(orderBy=[cd_gender ASC, cd_marital_status ASC, cd_education_status ASC, cd_purchase_estimate ASC, cd_credit_rating ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[cd_gender ASC, cd_marital_status ASC, cd_education_status ASC, cd_purchase_estimate ASC, cd_credit_rating ASC], offset=[0], fetch=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating], select=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, Final_COUNT(count1$0) AS cnt3])
            +- Exchange(distribution=[hash[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating]])
               +- LocalHashAggregate(groupBy=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating], select=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, Partial_COUNT(*) AS count1$0])
                  +- Calc(select=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating])
                     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cd_demo_sk = c_current_cdemo_sk)], select=[c_current_cdemo_sk, cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating], isBroadcast=[true], build=[left])\n:- [#1] Exchange(distribution=[broadcast])\n+- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating]]], fields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating])\n])
                        :- Exchange(distribution=[broadcast])
                        :  +- Calc(select=[c_current_cdemo_sk])
                        :     +- MultipleInput(readOrder=[3,2,0,1], members=[\nHashJoin(joinType=[LeftAntiJoin], where=[(c_customer_sk = cs_ship_customer_sk)], select=[c_customer_sk, c_current_cdemo_sk], build=[left], tryDistinctBuildRow=[true])\n:- HashJoin(joinType=[LeftAntiJoin], where=[(c_customer_sk = ws_bill_customer_sk)], select=[c_customer_sk, c_current_cdemo_sk], build=[left], tryDistinctBuildRow=[true])\n:  :- HashJoin(joinType=[LeftSemiJoin], where=[(c_customer_sk = ss_customer_sk)], select=[c_customer_sk, c_current_cdemo_sk], build=[left], tryDistinctBuildRow=[true])\n:  :  :- [#3] Exchange(distribution=[hash[c_customer_sk]])\n:  :  +- [#4] Exchange(distribution=[hash[ss_customer_sk]])\n:  +- [#2] Exchange(distribution=[hash[ws_bill_customer_sk]])\n+- [#1] Exchange(distribution=[hash[cs_ship_customer_sk]])\n])
                        :        :- Exchange(distribution=[hash[cs_ship_customer_sk]])
                        :        :  +- LocalHashAggregate(groupBy=[cs_ship_customer_sk], select=[cs_ship_customer_sk])
                        :        :     +- Calc(select=[cs_ship_customer_sk])
                        :        :        +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_ship_customer_sk, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_ship_customer_sk], where=[cs_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_ship_customer_sk]]], fields=[cs_sold_date_sk, cs_ship_customer_sk])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :        :           :- Exchange(distribution=[broadcast])(reuse_id=[1])
                        :        :           :  +- Calc(select=[d_date_sk], where=[(SEARCH(d_year, Sarg[1999]) AND SEARCH(d_moy, Sarg[[1..3]]))])
                        :        :           :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                        :        :           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_ship_customer_sk]]], fields=[cs_sold_date_sk, cs_ship_customer_sk])
                        :        :- Exchange(distribution=[hash[ws_bill_customer_sk]])
                        :        :  +- LocalHashAggregate(groupBy=[ws_bill_customer_sk], select=[ws_bill_customer_sk])
                        :        :     +- Calc(select=[ws_bill_customer_sk])
                        :        :        +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_bill_customer_sk, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_customer_sk]]], fields=[ws_sold_date_sk, ws_bill_customer_sk])\n+- [#2] Exchange(distribution=[broadcast])\n])
                        :        :           :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_customer_sk]]], fields=[ws_sold_date_sk, ws_bill_customer_sk])
                        :        :           +- Reused(reference_id=[1])
                        :        :- Exchange(distribution=[hash[c_customer_sk]])
                        :        :  +- Calc(select=[c_customer_sk, c_current_cdemo_sk])
                        :        :     +- HashJoin(joinType=[InnerJoin], where=[(c_current_addr_sk = ca_address_sk)], select=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, ca_address_sk], build=[right])
                        :        :        :- Exchange(distribution=[hash[c_current_addr_sk]])
                        :        :        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk]]], fields=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk])
                        :        :        +- Exchange(distribution=[hash[ca_address_sk]])
                        :        :           +- Calc(select=[ca_address_sk], where=[SEARCH(ca_state, Sarg[_UTF-16LE'CO', _UTF-16LE'IL', _UTF-16LE'MN'])])
                        :        :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state]]], fields=[ca_address_sk, ca_state])
                        :        +- Exchange(distribution=[hash[ss_customer_sk]])
                        :           +- LocalHashAggregate(groupBy=[ss_customer_sk], select=[ss_customer_sk])
                        :              +- Calc(select=[ss_customer_sk])
                        :                 +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_customer_sk, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_customer_sk], where=[ss_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk]]], fields=[ss_sold_date_sk, ss_customer_sk])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :                    :- Reused(reference_id=[1])
                        :                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk]]], fields=[ss_sold_date_sk, ss_customer_sk])
                        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating]]], fields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q6]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query6.tpl and seed 1819994127
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100

-- end query 1 in stream 0 using template query6.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalFilter(condition=[>=($1, 10)])
   +- LogicalAggregate(group=[{0}], cnt=[COUNT()])
      +- LogicalProject(state=[$8])
         +- LogicalFilter(condition=[AND(=($0, $17), =($13, $34), =($31, $54), =($33, $82), =($57, $SCALAR_QUERY({
LogicalAggregate(group=[{0}])
  LogicalProject(d_month_seq=[$3])
    LogicalFilter(condition=[AND(=($6, 2000), =($8, 2))])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
})), >($87, *(1.2:DECIMAL(2, 1), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(i_current_price=[$5])
    LogicalFilter(condition=[=($12, $cor0.i_category)])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
}))))], variablesSet=[[$cor0]])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
               :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
               :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
               :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
               +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[cnt ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[cnt ASC], offset=[0], fetch=[100], global=[false])
      +- Calc(select=[ca_state AS state, cnt], where=[(cnt >= 10)])
         +- HashAggregate(isMerge=[true], groupBy=[ca_state], select=[ca_state, Final_$SUM0(sum$0) AS cnt])
            +- Exchange(distribution=[hash[ca_state]])
               +- LocalHashAggregate(groupBy=[ca_state], select=[ca_state, Partial_$SUM0($f5) AS sum$0])
                  +- Calc(select=[ca_state, (cnt * cnt0) AS $f5])
                     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(c_customer_sk = ss_customer_sk)], select=[ss_customer_sk, cnt, c_customer_sk, ca_state, cnt0], build=[left])\n:- HashAggregate(isMerge=[false], groupBy=[ss_customer_sk], select=[ss_customer_sk, COUNT(*) AS cnt])\n:  +- [#2] Exchange(distribution=[hash[ss_customer_sk]])\n+- [#1] Exchange(distribution=[hash[c_customer_sk]])\n])
                        :- Exchange(distribution=[hash[c_customer_sk]])
                        :  +- HashAggregate(isMerge=[false], groupBy=[c_customer_sk, ca_state], select=[c_customer_sk, ca_state, COUNT(*) AS cnt])
                        :     +- Exchange(distribution=[hash[c_customer_sk, ca_state]])
                        :        +- Calc(select=[c_customer_sk, ca_state])
                        :           +- HashJoin(joinType=[InnerJoin], where=[(ca_address_sk = c_current_addr_sk)], select=[c_customer_sk, c_current_addr_sk, ca_address_sk, ca_state], build=[right])
                        :              :- Exchange(distribution=[hash[c_current_addr_sk]])
                        :              :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_current_addr_sk]]], fields=[c_customer_sk, c_current_addr_sk])
                        :              +- Exchange(distribution=[hash[ca_address_sk]])
                        :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state]]], fields=[ca_address_sk, ca_state])
                        +- Exchange(distribution=[hash[ss_customer_sk]])
                           +- Calc(select=[ss_customer_sk])
                              +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, ss_customer_sk, i_item_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_item_sk, ss_customer_sk])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk], where=[ss_customer_sk IS NOT NULL])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_customer_sk]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                 :- Exchange(distribution=[broadcast])
                                 :  +- Calc(select=[i_item_sk])
                                 :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[((i_category = i_category0) AND (i_current_price > (1.2 * EXPR$0)))], select=[i_item_sk, i_current_price, i_category, i_category0, EXPR$0], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_current_price, i_category]]], fields=[i_item_sk, i_current_price, i_category])\n+- [#2] Exchange(distribution=[broadcast])\n])
                                 :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_current_price, i_category]]], fields=[i_item_sk, i_current_price, i_category])
                                 :        +- Exchange(distribution=[broadcast])
                                 :           +- HashAggregate(isMerge=[true], groupBy=[i_category], select=[i_category, Final_AVG(sum$0, count$1) AS EXPR$0])
                                 :              +- Exchange(distribution=[hash[i_category]])
                                 :                 +- LocalHashAggregate(groupBy=[i_category], select=[i_category, Partial_AVG(i_current_price) AS (sum$0, count$1)])
                                 :                    +- Calc(select=[i_current_price, i_category], where=[i_category IS NOT NULL])
                                 :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_current_price, i_category]]], fields=[i_current_price, i_category])
                                 :- Exchange(distribution=[broadcast])
                                 :  +- Calc(select=[d_date_sk])
                                 :     +- MultipleInput(readOrder=[1,0], members=[\nNestedLoopJoin(joinType=[InnerJoin], where=[(d_month_seq = $f0)], select=[d_date_sk, d_month_seq, $f0], build=[right], singleRowJoin=[true])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_month_seq]]], fields=[d_date_sk, d_month_seq])\n+- [#2] Exchange(distribution=[broadcast])\n])
                                 :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_month_seq]]], fields=[d_date_sk, d_month_seq])
                                 :        +- Exchange(distribution=[broadcast])
                                 :           +- HashAggregate(isMerge=[true], select=[Final_SINGLE_VALUE(value$0, count$1) AS $f0])
                                 :              +- Exchange(distribution=[single])
                                 :                 +- LocalHashAggregate(select=[Partial_SINGLE_VALUE(d_month_seq) AS (value$0, count$1)])
                                 :                    +- HashAggregate(isMerge=[true], groupBy=[d_month_seq], select=[d_month_seq])
                                 :                       +- Exchange(distribution=[hash[d_month_seq]])
                                 :                          +- LocalHashAggregate(groupBy=[d_month_seq], select=[d_month_seq])
                                 :                             +- Calc(select=[d_month_seq], where=[((d_year = 2000) AND (d_moy = 2))])
                                 :                                +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_month_seq, d_year, d_moy]]], fields=[d_month_seq, d_year, d_moy])
                                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_customer_sk]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q71]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query71.tpl and seed 2031708268
select i_brand_id brand_id, i_brand brand,t_hour,t_minute,
 	sum(ext_price) ext_price
 from item, (select ws_ext_sales_price as ext_price, 
                        ws_sold_date_sk as sold_date_sk,
                        ws_item_sk as sold_item_sk,
                        ws_sold_time_sk as time_sk  
                 from web_sales,date_dim
                 where d_date_sk = ws_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 union all
                 select cs_ext_sales_price as ext_price,
                        cs_sold_date_sk as sold_date_sk,
                        cs_item_sk as sold_item_sk,
                        cs_sold_time_sk as time_sk
                 from catalog_sales,date_dim
                 where d_date_sk = cs_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 union all
                 select ss_ext_sales_price as ext_price,
                        ss_sold_date_sk as sold_date_sk,
                        ss_item_sk as sold_item_sk,
                        ss_sold_time_sk as time_sk
                 from store_sales,date_dim
                 where d_date_sk = ss_sold_date_sk
                   and d_moy=12
                   and d_year=2001
                 ) as tmp,time_dim
 where
   sold_item_sk = i_item_sk
   and i_manager_id=1
   and time_sk = t_time_sk
   and (t_meal_time = 'breakfast' or t_meal_time = 'dinner')
 group by i_brand, i_brand_id,t_hour,t_minute
 order by ext_price desc, i_brand_id
 

-- end query 1 in stream 0 using template query71.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$4], sort1=[$0], dir0=[DESC-nulls-last], dir1=[ASC-nulls-first])
+- LogicalProject(brand_id=[$1], brand=[$0], t_hour=[$2], t_minute=[$3], ext_price=[$4])
   +- LogicalAggregate(group=[{0, 1, 2, 3}], ext_price=[SUM($4)])
      +- LogicalProject(brand=[$8], brand_id=[$7], t_hour=[$29], t_minute=[$30], ext_price=[$22])
         +- LogicalFilter(condition=[AND(=($24, $0), =($20, 1), =($25, $26), OR(=($35, _UTF-16LE'breakfast'), =($35, _UTF-16LE'dinner')))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
               :  +- LogicalUnion(all=[true])
               :     :- LogicalUnion(all=[true])
               :     :  :- LogicalProject(ext_price=[$23], sold_date_sk=[$0], sold_item_sk=[$3], time_sk=[$1])
               :     :  :  +- LogicalFilter(condition=[AND(=($34, $0), =($42, 12), =($40, 2001))])
               :     :  :     +- LogicalJoin(condition=[true], joinType=[inner])
               :     :  :        :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
               :     :  :        +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
               :     :  +- LogicalProject(ext_price=[$23], sold_date_sk=[$0], sold_item_sk=[$15], time_sk=[$1])
               :     :     +- LogicalFilter(condition=[AND(=($34, $0), =($42, 12), =($40, 2001))])
               :     :        +- LogicalJoin(condition=[true], joinType=[inner])
               :     :           :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
               :     :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
               :     +- LogicalProject(ext_price=[$15], sold_date_sk=[$0], sold_item_sk=[$2], time_sk=[$1])
               :        +- LogicalFilter(condition=[AND(=($23, $0), =($31, 12), =($29, 2001))])
               :           +- LogicalJoin(condition=[true], joinType=[inner])
               :              :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
               :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
               +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, time_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Sort(orderBy=[ext_price DESC, brand_id ASC])
+- Exchange(distribution=[single])
   +- Calc(select=[brand_id, brand, t_hour, t_minute, ext_price])
      +- HashAggregate(isMerge=[true], groupBy=[brand, brand_id, t_hour, t_minute], select=[brand, brand_id, t_hour, t_minute, Final_SUM(sum$0) AS ext_price])
         +- Exchange(distribution=[hash[brand, brand_id, t_hour, t_minute]])
            +- LocalHashAggregate(groupBy=[brand, brand_id, t_hour, t_minute], select=[brand, brand_id, t_hour, t_minute, Partial_SUM(ext_price) AS sum$0])
               +- Calc(select=[i_brand AS brand, i_brand_id AS brand_id, t_hour, t_minute, ext_price])
                  +- MultipleInput(readOrder=[0,0,0,1,0,0,1,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(time_sk = t_time_sk)], select=[ext_price, time_sk, i_brand_id, i_brand, t_time_sk, t_hour, t_minute], isBroadcast=[true], build=[right])\n:- Calc(select=[ext_price, time_sk, i_brand_id, i_brand])\n:  +- HashJoin(joinType=[InnerJoin], where=[(sold_item_sk = i_item_sk)], select=[ext_price, sold_item_sk, time_sk, i_item_sk, i_brand_id, i_brand], isBroadcast=[true], build=[right])\n:     :- Union(all=[true], union=[ext_price, sold_item_sk, time_sk])\n:     :  :- Union(all=[true], union=[ext_price, sold_item_sk, time_sk])\n:     :  :  :- Calc(select=[ws_ext_sales_price AS ext_price, ws_item_sk AS sold_item_sk, ws_sold_time_sk AS time_sk])\n:     :  :  :  +- HashJoin(joinType=[InnerJoin], where=[(d_date_sk = ws_sold_date_sk)], select=[ws_sold_date_sk, ws_sold_time_sk, ws_item_sk, ws_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:     :  :  :     :- [#4] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_sold_time_sk, ws_item_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_sold_time_sk, ws_item_sk, ws_ext_sales_price])\n:     :  :  :     +- [#3] Exchange(distribution=[broadcast])\n:     :  :  +- Calc(select=[cs_ext_sales_price AS ext_price, cs_item_sk AS sold_item_sk, cs_sold_time_sk AS time_sk])\n:     :  :     +- HashJoin(joinType=[InnerJoin], where=[(d_date_sk = cs_sold_date_sk)], select=[cs_sold_date_sk, cs_sold_time_sk, cs_item_sk, cs_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:     :  :        :- Calc(select=[cs_sold_date_sk, cs_sold_time_sk, cs_item_sk, cs_ext_sales_price], where=[cs_sold_date_sk IS NOT NULL])\n:     :  :        :  +- [#8] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_sold_time_sk, cs_item_sk, cs_ext_sales_price]]], fields=[cs_sold_date_sk, cs_sold_time_sk, cs_item_sk, cs_ext_sales_price])\n:     :  :        +- [#3] Exchange(distribution=[broadcast])\n:     :  +- Calc(select=[ss_ext_sales_price AS ext_price, ss_item_sk AS sold_item_sk, ss_sold_time_sk AS time_sk])\n:     :     +- HashJoin(joinType=[InnerJoin], where=[(d_date_sk = ss_sold_date_sk)], select=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:     :        :- Calc(select=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_ext_sales_price], where=[ss_sold_date_sk IS NOT NULL])\n:     :        :  +- [#7] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_ext_sales_price])\n:     :        +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :- Exchange(distribution=[broadcast])
                     :  +- Calc(select=[t_time_sk, t_hour, t_minute], where=[SEARCH(t_meal_time, Sarg[_UTF-16LE'breakfast', _UTF-16LE'dinner'])])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, time_dim, project=[t_time_sk, t_hour, t_minute, t_meal_time]]], fields=[t_time_sk, t_hour, t_minute, t_meal_time])
                     :- Exchange(distribution=[broadcast])
                     :  +- Calc(select=[i_item_sk, i_brand_id, i_brand], where=[SEARCH(i_manager_id, Sarg[1])])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_brand, i_manager_id]]], fields=[i_item_sk, i_brand_id, i_brand, i_manager_id])
                     :- Exchange(distribution=[broadcast])(reuse_id=[1])
                     :  +- Calc(select=[d_date_sk], where=[((d_moy = 12) AND (d_year = 2001))])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                     :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_sold_time_sk, ws_item_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_sold_time_sk, ws_item_sk, ws_ext_sales_price])
                     :- Reused(reference_id=[1])
                     :- Reused(reference_id=[1])
                     :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_sold_time_sk, ss_item_sk, ss_ext_sales_price])
                     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_sold_time_sk, cs_item_sk, cs_ext_sales_price]]], fields=[cs_sold_date_sk, cs_sold_time_sk, cs_item_sk, cs_ext_sales_price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q72]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query72.tpl and seed 2031708268
select  i_item_desc
      ,w_warehouse_name
      ,d1.d_week_seq
      ,count(case when p_promo_sk is null then 1 else 0 end) no_promo
      ,count(case when p_promo_sk is not null then 1 else 0 end) promo
      ,count(*) total_cnt
from catalog_sales
join inventory on (cs_item_sk = inv_item_sk)
join warehouse on (w_warehouse_sk=inv_warehouse_sk)
join item on (i_item_sk = cs_item_sk)
join customer_demographics on (cs_bill_cdemo_sk = cd_demo_sk)
join household_demographics on (cs_bill_hdemo_sk = hd_demo_sk)
join date_dim d1 on (cs_sold_date_sk = d1.d_date_sk)
join date_dim d2 on (inv_date_sk = d2.d_date_sk)
join date_dim d3 on (cs_ship_date_sk = d3.d_date_sk)
left outer join promotion on (cs_promo_sk=p_promo_sk)
left outer join catalog_returns on (cr_item_sk = cs_item_sk and cr_order_number = cs_order_number)
where d1.d_week_seq = d2.d_week_seq
  and inv_quantity_on_hand < cs_quantity 
  and d3.d_date > d1.d_date + interval '5' day
  and hd_buy_potential = '1001-5000'
  and d1.d_year = 2001
  and hd_buy_potential = '1001-5000'
  and cd_marital_status = 'M'
  and d1.d_year = 2001
group by i_item_desc,w_warehouse_name,d1.d_week_seq
order by total_cnt desc, i_item_desc, w_warehouse_name, d_week_seq
limit 100

-- end query 1 in stream 0 using template query72.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$5], sort1=[$0], sort2=[$1], sort3=[$2], dir0=[DESC-nulls-last], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalProject(i_item_desc=[$0], w_warehouse_name=[$1], d_week_seq=[$2], no_promo=[$3], promo=[$3], total_cnt=[$3])
   +- LogicalAggregate(group=[{0, 1, 2}], no_promo=[COUNT()])
      +- LogicalProject(i_item_desc=[$56], w_warehouse_name=[$40], d_week_seq=[$92])
         +- LogicalFilter(condition=[AND(=($92, $120), <($37, $18), >($146, +($90, 432000000:INTERVAL DAY)), =($85, _UTF-16LE'1001-5000'), =($94, 2001), =($85, _UTF-16LE'1001-5000'), =($76, _UTF-16LE'M'), =($94, 2001))])
            +- LogicalJoin(condition=[AND(=($193, $15), =($207, $17))], joinType=[left])
               :- LogicalJoin(condition=[=($16, $172)], joinType=[left])
               :  :- LogicalJoin(condition=[=($2, $144)], joinType=[inner])
               :  :  :- LogicalJoin(condition=[=($34, $116)], joinType=[inner])
               :  :  :  :- LogicalJoin(condition=[=($0, $88)], joinType=[inner])
               :  :  :  :  :- LogicalJoin(condition=[=($5, $83)], joinType=[inner])
               :  :  :  :  :  :- LogicalJoin(condition=[=($4, $74)], joinType=[inner])
               :  :  :  :  :  :  :- LogicalJoin(condition=[=($52, $15)], joinType=[inner])
               :  :  :  :  :  :  :  :- LogicalJoin(condition=[=($38, $36)], joinType=[inner])
               :  :  :  :  :  :  :  :  :- LogicalJoin(condition=[=($15, $35)], joinType=[inner])
               :  :  :  :  :  :  :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
               :  :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, inventory]])
               :  :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, warehouse]])
               :  :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
               :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
               :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
               :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
               :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
               :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
               :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, promotion]])
               +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[total_cnt DESC, i_item_desc ASC, w_warehouse_name ASC, d_week_seq ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[total_cnt DESC, i_item_desc ASC, w_warehouse_name ASC, d_week_seq ASC], offset=[0], fetch=[100], global=[false])
      +- Calc(select=[i_item_desc, w_warehouse_name, d_week_seq, no_promo, no_promo AS promo, no_promo AS total_cnt])
         +- HashAggregate(isMerge=[true], groupBy=[i_item_desc, w_warehouse_name, d_week_seq], select=[i_item_desc, w_warehouse_name, d_week_seq, Final_COUNT(count1$0) AS no_promo])
            +- Exchange(distribution=[hash[i_item_desc, w_warehouse_name, d_week_seq]])
               +- LocalHashAggregate(groupBy=[i_item_desc, w_warehouse_name, d_week_seq], select=[i_item_desc, w_warehouse_name, d_week_seq, Partial_COUNT(*) AS count1$0])
                  +- Calc(select=[i_item_desc, w_warehouse_name, d_week_seq])
                     +- MultipleInput(readOrder=[0,2,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[((inv_date_sk = d_date_sk) AND (d_week_seq = d_week_seq0))], select=[inv_date_sk, w_warehouse_name, d_week_seq, i_item_desc, d_date_sk, d_week_seq0], isBroadcast=[true], build=[right])\n:- Calc(select=[inv_date_sk, w_warehouse_name, d_week_seq, i_item_desc])\n:  +- HashJoin(joinType=[InnerJoin], where=[((cs_item_sk = inv_item_sk) AND (inv_quantity_on_hand < cs_quantity))], select=[inv_date_sk, inv_item_sk, inv_quantity_on_hand, w_warehouse_name, cs_item_sk, cs_quantity, d_week_seq, i_item_desc], build=[right])\n:     :- Calc(select=[inv_date_sk, inv_item_sk, inv_quantity_on_hand, w_warehouse_name])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(w_warehouse_sk = inv_warehouse_sk)], select=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand, w_warehouse_sk, w_warehouse_name], isBroadcast=[true], build=[right])\n:     :     :- [#2] Exchange(distribution=[hash[inv_item_sk]])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- Calc(select=[cs_item_sk, cs_quantity, d_week_seq, i_item_desc])\n:        +- HashJoin(joinType=[InnerJoin], where=[(i_item_sk = cs_item_sk)], select=[cs_item_sk, cs_quantity, d_week_seq, i_item_sk, i_item_desc], build=[right])\n:           :- [#4] Exchange(distribution=[hash[cs_item_sk]])\n:           +- [#5] Exchange(distribution=[hash[i_item_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :- Exchange(distribution=[broadcast])
                        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_week_seq]]], fields=[d_date_sk, d_week_seq])
                        :- Exchange(distribution=[hash[inv_item_sk]])
                        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, inventory]], fields=[inv_date_sk, inv_item_sk, inv_warehouse_sk, inv_quantity_on_hand])
                        :- Exchange(distribution=[broadcast])
                        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, warehouse, project=[w_warehouse_sk, w_warehouse_name]]], fields=[w_warehouse_sk, w_warehouse_name])
                        :- Exchange(distribution=[hash[cs_item_sk]])
                        :  +- Calc(select=[cs_item_sk, cs_quantity, d_week_seq])
                        :     +- MultipleInput(readOrder=[0,0,0,0,0,1], members=[\nHashJoin(joinType=[LeftOuterJoin], where=[(cs_promo_sk = p_promo_sk)], select=[cs_item_sk, cs_promo_sk, cs_quantity, d_week_seq, p_promo_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_item_sk, cs_promo_sk, cs_quantity, d_week_seq])\n:  +- HashJoin(joinType=[InnerJoin], where=[(cs_bill_hdemo_sk = hd_demo_sk)], select=[cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity, d_week_seq, hd_demo_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity, d_week_seq])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(cs_bill_cdemo_sk = cd_demo_sk)], select=[cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity, d_week_seq, cd_demo_sk], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity, d_week_seq])\n:     :     :  +- HashJoin(joinType=[InnerJoin], where=[((cs_ship_date_sk = d_date_sk) AND (d_date0 > (d_date + 432000000:INTERVAL DAY)))], select=[cs_ship_date_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity, d_date, d_week_seq, d_date_sk, d_date0], isBroadcast=[true], build=[right])\n:     :     :     :- Calc(select=[cs_ship_date_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity, d_date, d_week_seq])\n:     :     :     :  +- HashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_ship_date_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity, d_date_sk, d_date, d_week_seq], isBroadcast=[true], build=[right])\n:     :     :     :     :- Calc(select=[cs_sold_date_sk, cs_ship_date_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity], where=[cs_sold_date_sk IS NOT NULL])\n:     :     :     :     :  +- [#6] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_ship_date_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity]]], fields=[cs_sold_date_sk, cs_ship_date_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity])\n:     :     :     :     +- [#5] Exchange(distribution=[broadcast])\n:     :     :     +- [#4] Exchange(distribution=[broadcast])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :        :- Exchange(distribution=[broadcast])
                        :        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, promotion, project=[p_promo_sk]]], fields=[p_promo_sk])
                        :        :- Exchange(distribution=[broadcast])
                        :        :  +- Calc(select=[hd_demo_sk], where=[(hd_buy_potential = '1001-5000')])
                        :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, household_demographics, project=[hd_demo_sk, hd_buy_potential]]], fields=[hd_demo_sk, hd_buy_potential])
                        :        :- Exchange(distribution=[broadcast])
                        :        :  +- Calc(select=[cd_demo_sk], where=[(cd_marital_status = 'M')])
                        :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk, cd_marital_status]]], fields=[cd_demo_sk, cd_marital_status])
                        :        :- Exchange(distribution=[broadcast])
                        :        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
                        :        :- Exchange(distribution=[broadcast])
                        :        :  +- Calc(select=[d_date_sk, d_date, d_week_seq], where=[(d_year = 2001)])
                        :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date, d_week_seq, d_year]]], fields=[d_date_sk, d_date, d_week_seq, d_year])
                        :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_ship_date_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity]]], fields=[cs_sold_date_sk, cs_ship_date_sk, cs_bill_cdemo_sk, cs_bill_hdemo_sk, cs_item_sk, cs_promo_sk, cs_quantity])
                        +- Exchange(distribution=[hash[i_item_sk]])
                           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_desc]]], fields=[i_item_sk, i_item_desc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q73]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query73.tpl and seed 1971067816
select c_last_name
       ,c_first_name
       ,c_salutation
       ,c_preferred_cust_flag 
       ,ss_ticket_number
       ,cnt from
   (select ss_ticket_number
          ,ss_customer_sk
          ,count(*) cnt
    from store_sales,date_dim,store,household_demographics
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and date_dim.d_dom between 1 and 2 
    and (household_demographics.hd_buy_potential = '>10000' or
         household_demographics.hd_buy_potential = 'unknown')
    and household_demographics.hd_vehicle_count > 0
    and case when household_demographics.hd_vehicle_count > 0 then 
             household_demographics.hd_dep_count/ household_demographics.hd_vehicle_count else null end > 1
    and date_dim.d_year in (2000,2000+1,2000+2)
    and store.s_county in ('Mobile County','Maverick County','Huron County','Kittitas County')
    group by ss_ticket_number,ss_customer_sk) dj,customer
    where ss_customer_sk = c_customer_sk
      and cnt between 1 and 5
    order by cnt desc

-- end query 1 in stream 0 using template query73.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$5], dir0=[DESC-nulls-last])
+- LogicalProject(c_last_name=[$12], c_first_name=[$11], c_salutation=[$10], c_preferred_cust_flag=[$13], ss_ticket_number=[$0], cnt=[$2])
   +- LogicalFilter(condition=[AND(=($1, $3), >=($2, 1), <=($2, 5))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalAggregate(group=[{0, 1}], cnt=[COUNT()])
         :  +- LogicalProject(ss_ticket_number=[$9], ss_customer_sk=[$3])
         :     +- LogicalFilter(condition=[AND(=($0, $23), =($7, $51), =($5, $80), >=($32, 1), <=($32, 2), OR(=($82, _UTF-16LE'>10000'), =($82, _UTF-16LE'unknown')), >($84, 0), >(CASE(>($84, 0), /($83, $84), null:INTEGER), 1), OR(=($29, 2000), =($29, +(2000, 1)), =($29, +(2000, 2))), OR(=($74, _UTF-16LE'Mobile County'), =($74, _UTF-16LE'Maverick County'), =($74, _UTF-16LE'Huron County'), =($74, _UTF-16LE'Kittitas County')))])
         :        +- LogicalJoin(condition=[true], joinType=[inner])
         :           :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :- LogicalJoin(condition=[true], joinType=[inner])
         :           :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :           :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
         :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
         +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Sort(orderBy=[cnt DESC])
+- Exchange(distribution=[single])
   +- Calc(select=[c_last_name, c_first_name, c_salutation, c_preferred_cust_flag, ss_ticket_number, cnt])
      +- HashJoin(joinType=[InnerJoin], where=[(ss_customer_sk = c_customer_sk)], select=[c_customer_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag, ss_ticket_number, ss_customer_sk, cnt], build=[right])
         :- Exchange(distribution=[hash[c_customer_sk]])
         :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag]]], fields=[c_customer_sk, c_salutation, c_first_name, c_last_name, c_preferred_cust_flag])
         +- Exchange(distribution=[hash[ss_customer_sk]])
            +- Calc(select=[ss_ticket_number, ss_customer_sk, cnt], where=[SEARCH(cnt, Sarg[[1..5]])])
               +- HashAggregate(isMerge=[false], groupBy=[ss_ticket_number, ss_customer_sk], select=[ss_ticket_number, ss_customer_sk, COUNT(*) AS cnt])
                  +- Exchange(distribution=[hash[ss_ticket_number, ss_customer_sk]])
                     +- Calc(select=[ss_ticket_number, ss_customer_sk])
                        +- MultipleInput(readOrder=[0,0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_customer_sk, ss_ticket_number, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_ticket_number])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_sold_date_sk, ss_customer_sk, ss_store_sk, ss_ticket_number, s_store_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_store_sk, ss_ticket_number])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_hdemo_sk = hd_demo_sk)], select=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_store_sk, ss_ticket_number, hd_demo_sk], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_store_sk, ss_ticket_number], where=[ss_sold_date_sk IS NOT NULL])\n:     :     :  +- [#4] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_store_sk, ss_ticket_number]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_store_sk, ss_ticket_number])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                           :- Exchange(distribution=[broadcast])
                           :  +- Calc(select=[d_date_sk], where=[(SEARCH(d_dom, Sarg[[1..2]]) AND SEARCH(d_year, Sarg[2000, 2001, 2002]))])
                           :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_dom]]], fields=[d_date_sk, d_year, d_dom])
                           :- Exchange(distribution=[broadcast])
                           :  +- Calc(select=[s_store_sk], where=[SEARCH(s_county, Sarg[_UTF-16LE'Huron County', _UTF-16LE'Kittitas County', _UTF-16LE'Maverick County', _UTF-16LE'Mobile County'])])
                           :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_county]]], fields=[s_store_sk, s_county])
                           :- Exchange(distribution=[broadcast])
                           :  +- Calc(select=[hd_demo_sk], where=[(SEARCH(hd_buy_potential, Sarg[_UTF-16LE'>10000', _UTF-16LE'unknown']) AND SEARCH(hd_vehicle_count, Sarg[(0..+∞)]) AND CASE((hd_vehicle_count > 0), ((hd_dep_count / hd_vehicle_count) > 1), false))])
                           :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, household_demographics, project=[hd_demo_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count]]], fields=[hd_demo_sk, hd_buy_potential, hd_dep_count, hd_vehicle_count])
                           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_store_sk, ss_ticket_number]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_store_sk, ss_ticket_number])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q74]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query74.tpl and seed 1556717815
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as `year`
       ,max(ss_net_paid) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,d_year as `year`
       ,max(ws_net_paid) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
   and d_year in (2001,2001+1)
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,d_year
         )
  select 
        t_s_secyear.customer_id, t_s_secyear.customer_first_name, t_s_secyear.customer_last_name
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
         and t_s_firstyear.customer_id = t_w_secyear.customer_id
         and t_s_firstyear.customer_id = t_w_firstyear.customer_id
         and t_s_firstyear.sale_type = 's'
         and t_w_firstyear.sale_type = 'w'
         and t_s_secyear.sale_type = 's'
         and t_w_secyear.sale_type = 'w'
         and t_s_firstyear.`year` = 2001
         and t_s_secyear.`year` = 2001+1
         and t_w_firstyear.`year` = 2001
         and t_w_secyear.`year` = 2001+1
         and t_s_firstyear.year_total > 0
         and t_w_firstyear.year_total > 0
         and case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
 order by 2,1,3
limit 100

-- end query 1 in stream 0 using template query74.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$1], sort1=[$0], sort2=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalProject(customer_id=[$6], customer_first_name=[$7], customer_last_name=[$8])
   +- LogicalFilter(condition=[AND(=($6, $0), =($0, $18), =($0, $12), =($5, _UTF-16LE's'), =($17, _UTF-16LE'w'), =($11, _UTF-16LE's'), =($23, _UTF-16LE'w'), =($3, 2001), =($9, +(2001, 1)), =($15, 2001), =($21, +(2001, 1)), >($4, 0), >($16, 0), >(CASE(>($16, 0), /($22, $16), null:DOUBLE), CASE(>($4, 0), /($10, $4), null:DOUBLE)))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :- LogicalUnion(all=[true])
         :  :  :  :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], year=[$3], year_total=[$4], sale_type=[_UTF-16LE's'])
         :  :  :  :  +- LogicalAggregate(group=[{0, 1, 2, 3}], year_total=[MAX($4)])
         :  :  :  :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], year=[$47], ss_net_paid=[$38])
         :  :  :  :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41), OR(=($47, 2001), =($47, +(2001, 1))))])
         :  :  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :              :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :  :  :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :  :  :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :  :  +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], year=[$3], year_total=[$4], sale_type=[_UTF-16LE'w'])
         :  :  :     +- LogicalAggregate(group=[{0, 1, 2, 3}], year_total=[MAX($4)])
         :  :  :        +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], year=[$58], ws_net_paid=[$47])
         :  :  :           +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52), OR(=($58, 2001), =($58, +(2001, 1))))])
         :  :  :              +- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :                 :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :                 :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :  :  :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
         :  :  :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :  +- LogicalUnion(all=[true])
         :  :     :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], year=[$3], year_total=[$4], sale_type=[_UTF-16LE's'])
         :  :     :  +- LogicalAggregate(group=[{0, 1, 2, 3}], year_total=[MAX($4)])
         :  :     :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], year=[$47], ss_net_paid=[$38])
         :  :     :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41), OR(=($47, 2001), =($47, +(2001, 1))))])
         :  :     :           +- LogicalJoin(condition=[true], joinType=[inner])
         :  :     :              :- LogicalJoin(condition=[true], joinType=[inner])
         :  :     :              :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :  :     :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :  :     :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :     +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], year=[$3], year_total=[$4], sale_type=[_UTF-16LE'w'])
         :  :        +- LogicalAggregate(group=[{0, 1, 2, 3}], year_total=[MAX($4)])
         :  :           +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], year=[$58], ws_net_paid=[$47])
         :  :              +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52), OR(=($58, 2001), =($58, +(2001, 1))))])
         :  :                 +- LogicalJoin(condition=[true], joinType=[inner])
         :  :                    :- LogicalJoin(condition=[true], joinType=[inner])
         :  :                    :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :  :                    :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
         :  :                    +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  +- LogicalUnion(all=[true])
         :     :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], year=[$3], year_total=[$4], sale_type=[_UTF-16LE's'])
         :     :  +- LogicalAggregate(group=[{0, 1, 2, 3}], year_total=[MAX($4)])
         :     :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], year=[$47], ss_net_paid=[$38])
         :     :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41), OR(=($47, 2001), =($47, +(2001, 1))))])
         :     :           +- LogicalJoin(condition=[true], joinType=[inner])
         :     :              :- LogicalJoin(condition=[true], joinType=[inner])
         :     :              :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :     :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :     :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :     +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], year=[$3], year_total=[$4], sale_type=[_UTF-16LE'w'])
         :        +- LogicalAggregate(group=[{0, 1, 2, 3}], year_total=[MAX($4)])
         :           +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], year=[$58], ws_net_paid=[$47])
         :              +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52), OR(=($58, 2001), =($58, +(2001, 1))))])
         :                 +- LogicalJoin(condition=[true], joinType=[inner])
         :                    :- LogicalJoin(condition=[true], joinType=[inner])
         :                    :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :                    :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
         :                    +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         +- LogicalUnion(all=[true])
            :- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], year=[$3], year_total=[$4], sale_type=[_UTF-16LE's'])
            :  +- LogicalAggregate(group=[{0, 1, 2, 3}], year_total=[MAX($4)])
            :     +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], year=[$47], ss_net_paid=[$38])
            :        +- LogicalFilter(condition=[AND(=($0, $21), =($18, $41), OR(=($47, 2001), =($47, +(2001, 1))))])
            :           +- LogicalJoin(condition=[true], joinType=[inner])
            :              :- LogicalJoin(condition=[true], joinType=[inner])
            :              :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
            :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
            :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            +- LogicalProject(customer_id=[$0], customer_first_name=[$1], customer_last_name=[$2], year=[$3], year_total=[$4], sale_type=[_UTF-16LE'w'])
               +- LogicalAggregate(group=[{0, 1, 2, 3}], year_total=[MAX($4)])
                  +- LogicalProject(customer_id=[$1], customer_first_name=[$8], customer_last_name=[$9], year=[$58], ws_net_paid=[$47])
                     +- LogicalFilter(condition=[AND(=($0, $22), =($18, $52), OR(=($58, 2001), =($58, +(2001, 1))))])
                        +- LogicalJoin(condition=[true], joinType=[inner])
                           :- LogicalJoin(condition=[true], joinType=[inner])
                           :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
                           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[customer_id0 AS customer_id, customer_first_name, customer_last_name])
+- SortLimit(orderBy=[customer_first_name ASC, customer_id0 ASC, customer_last_name ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[customer_first_name ASC, customer_id0 ASC, customer_last_name ASC], offset=[0], fetch=[100], global=[false])
         +- MultipleInput(readOrder=[0,2,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(CASE((year_total > 0), CASE((year_total0 > 0), ((year_total2 / year_total0) > (year_total1 / year_total)), false), false) AND (customer_id = customer_id1))], select=[customer_id, year_total, year_total0, customer_id0, customer_first_name, customer_last_name, year_total1, customer_id1, year_total2], build=[right])\n:- HashJoin(joinType=[InnerJoin], where=[(customer_id = customer_id0)], select=[customer_id, year_total, year_total0, customer_id0, customer_first_name, customer_last_name, year_total1], build=[left])\n:  :- Calc(select=[customer_id, year_total, year_total0])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(customer_id = customer_id0)], select=[customer_id, year_total, customer_id0, year_total0], build=[right])\n:  :     :- [#3] Exchange(distribution=[hash[customer_id]])\n:  :     +- [#4] Exchange(distribution=[hash[customer_id]])\n:  +- [#2] Exchange(distribution=[hash[customer_id]])\n+- [#1] Exchange(distribution=[hash[customer_id]])\n])
            :- Exchange(distribution=[hash[customer_id]])
            :  +- Calc(select=[c_customer_id AS customer_id, year_total])
            :     +- HashAggregate(isMerge=[true], groupBy=[d_year, c_customer_id, c_first_name, c_last_name], select=[d_year, c_customer_id, c_first_name, c_last_name, Final_MAX(max$0) AS year_total])
            :        +- Exchange(distribution=[hash[d_year, c_customer_id, c_first_name, c_last_name]])
            :           +- LocalHashAggregate(groupBy=[d_year, c_customer_id, c_first_name, c_last_name], select=[d_year, c_customer_id, c_first_name, c_last_name, Partial_MAX(year_total) AS max$0])
            :              +- HashJoin(joinType=[InnerJoin], where=[(c_customer_sk = ws_bill_customer_sk)], select=[ws_bill_customer_sk, d_year, year_total, c_customer_sk, c_customer_id, c_first_name, c_last_name], build=[right])
            :                 :- Exchange(distribution=[hash[ws_bill_customer_sk]])
            :                 :  +- HashAggregate(isMerge=[true], groupBy=[ws_bill_customer_sk, d_year], select=[ws_bill_customer_sk, d_year, Final_MAX(max$0) AS year_total])
            :                 :     +- Exchange(distribution=[hash[ws_bill_customer_sk, d_year]])
            :                 :        +- LocalHashAggregate(groupBy=[ws_bill_customer_sk, d_year], select=[ws_bill_customer_sk, d_year, Partial_MAX(ws_net_paid) AS max$0])
            :                 :           +- Calc(select=[ws_bill_customer_sk, ws_net_paid, d_year])
            :                 :              +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_bill_customer_sk, ws_net_paid, d_date_sk, d_year], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_customer_sk, ws_net_paid]]], fields=[ws_sold_date_sk, ws_bill_customer_sk, ws_net_paid])\n+- [#2] Exchange(distribution=[broadcast])\n])
            :                 :                 :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_customer_sk, ws_net_paid]]], fields=[ws_sold_date_sk, ws_bill_customer_sk, ws_net_paid])
            :                 :                 +- Exchange(distribution=[broadcast])(reuse_id=[1])
            :                 :                    +- Calc(select=[d_date_sk, d_year], where=[SEARCH(d_year, Sarg[2002])])
            :                 :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
            :                 +- Exchange(distribution=[hash[c_customer_sk]])
            :                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_customer_id, c_first_name, c_last_name]]], fields=[c_customer_sk, c_customer_id, c_first_name, c_last_name])
            :- Exchange(distribution=[hash[customer_id]])
            :  +- Calc(select=[c_customer_id AS customer_id, c_first_name AS customer_first_name, c_last_name AS customer_last_name, year_total])
            :     +- HashAggregate(isMerge=[true], groupBy=[d_year, c_customer_id, c_first_name, c_last_name], select=[d_year, c_customer_id, c_first_name, c_last_name, Final_MAX(max$0) AS year_total])
            :        +- Exchange(distribution=[hash[d_year, c_customer_id, c_first_name, c_last_name]])
            :           +- LocalHashAggregate(groupBy=[d_year, c_customer_id, c_first_name, c_last_name], select=[d_year, c_customer_id, c_first_name, c_last_name, Partial_MAX(year_total) AS max$0])
            :              +- HashJoin(joinType=[InnerJoin], where=[(c_customer_sk = ss_customer_sk)], select=[ss_customer_sk, d_year, year_total, c_customer_sk, c_customer_id, c_first_name, c_last_name], build=[right])
            :                 :- Exchange(distribution=[hash[ss_customer_sk]])
            :                 :  +- HashAggregate(isMerge=[true], groupBy=[ss_customer_sk, d_year], select=[ss_customer_sk, d_year, Final_MAX(max$0) AS year_total])
            :                 :     +- Exchange(distribution=[hash[ss_customer_sk, d_year]])
            :                 :        +- LocalHashAggregate(groupBy=[ss_customer_sk, d_year], select=[ss_customer_sk, d_year, Partial_MAX(ss_net_paid) AS max$0])
            :                 :           +- Calc(select=[ss_customer_sk, ss_net_paid, d_year])
            :                 :              +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_customer_sk, ss_net_paid, d_date_sk, d_year], isBroadcast=[true], build=[right])
            :                 :                 :- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_net_paid], where=[ss_customer_sk IS NOT NULL])(reuse_id=[2])
            :                 :                 :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk, ss_net_paid]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_net_paid])
            :                 :                 +- Reused(reference_id=[1])
            :                 +- Exchange(distribution=[hash[c_customer_sk]])
            :                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_customer_id, c_first_name, c_last_name]]], fields=[c_customer_sk, c_customer_id, c_first_name, c_last_name])
            :- Exchange(distribution=[hash[customer_id]])
            :  +- Calc(select=[c_customer_id AS customer_id, year_total], where=[(year_total > 0)])
            :     +- HashAggregate(isMerge=[true], groupBy=[d_year, c_customer_id, c_first_name, c_last_name], select=[d_year, c_customer_id, c_first_name, c_last_name, Final_MAX(max$0) AS year_total])
            :        +- Exchange(distribution=[hash[d_year, c_customer_id, c_first_name, c_last_name]])
            :           +- LocalHashAggregate(groupBy=[d_year, c_customer_id, c_first_name, c_last_name], select=[d_year, c_customer_id, c_first_name, c_last_name, Partial_MAX(year_total) AS max$0])
            :              +- HashJoin(joinType=[InnerJoin], where=[(c_customer_sk = ss_customer_sk)], select=[ss_customer_sk, d_year, year_total, c_customer_sk, c_customer_id, c_first_name, c_last_name], build=[right])
            :                 :- Exchange(distribution=[hash[ss_customer_sk]])
            :                 :  +- HashAggregate(isMerge=[true], groupBy=[ss_customer_sk, d_year], select=[ss_customer_sk, d_year, Final_MAX(max$0) AS year_total])
            :                 :     +- Exchange(distribution=[hash[ss_customer_sk, d_year]])
            :                 :        +- LocalHashAggregate(groupBy=[ss_customer_sk, d_year], select=[ss_customer_sk, d_year, Partial_MAX(ss_net_paid) AS max$0])
            :                 :           +- Calc(select=[ss_customer_sk, ss_net_paid, d_year])
            :                 :              +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_customer_sk, ss_net_paid, d_date_sk, d_year], isBroadcast=[true], build=[right])
            :                 :                 :- Reused(reference_id=[2])
            :                 :                 +- Exchange(distribution=[broadcast])(reuse_id=[3])
            :                 :                    +- Calc(select=[d_date_sk, d_year], where=[SEARCH(d_year, Sarg[2001])])
            :                 :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
            :                 +- Exchange(distribution=[hash[c_customer_sk]])
            :                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_customer_id, c_first_name, c_last_name]]], fields=[c_customer_sk, c_customer_id, c_first_name, c_last_name])
            +- Exchange(distribution=[hash[customer_id]])
               +- Calc(select=[c_customer_id AS customer_id, year_total], where=[(year_total > 0)])
                  +- HashAggregate(isMerge=[true], groupBy=[d_year, c_customer_id, c_first_name, c_last_name], select=[d_year, c_customer_id, c_first_name, c_last_name, Final_MAX(max$0) AS year_total])
                     +- Exchange(distribution=[hash[d_year, c_customer_id, c_first_name, c_last_name]])
                        +- LocalHashAggregate(groupBy=[d_year, c_customer_id, c_first_name, c_last_name], select=[d_year, c_customer_id, c_first_name, c_last_name, Partial_MAX(year_total) AS max$0])
                           +- HashJoin(joinType=[InnerJoin], where=[(c_customer_sk = ws_bill_customer_sk)], select=[ws_bill_customer_sk, d_year, year_total, c_customer_sk, c_customer_id, c_first_name, c_last_name], build=[right])
                              :- Exchange(distribution=[hash[ws_bill_customer_sk]])
                              :  +- HashAggregate(isMerge=[true], groupBy=[ws_bill_customer_sk, d_year], select=[ws_bill_customer_sk, d_year, Final_MAX(max$0) AS year_total])
                              :     +- Exchange(distribution=[hash[ws_bill_customer_sk, d_year]])
                              :        +- LocalHashAggregate(groupBy=[ws_bill_customer_sk, d_year], select=[ws_bill_customer_sk, d_year, Partial_MAX(ws_net_paid) AS max$0])
                              :           +- Calc(select=[ws_bill_customer_sk, ws_net_paid, d_year])
                              :              +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_bill_customer_sk, ws_net_paid, d_date_sk, d_year], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_customer_sk, ws_net_paid]]], fields=[ws_sold_date_sk, ws_bill_customer_sk, ws_net_paid])\n+- [#2] Exchange(distribution=[broadcast])\n])
                              :                 :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_bill_customer_sk, ws_net_paid]]], fields=[ws_sold_date_sk, ws_bill_customer_sk, ws_net_paid])
                              :                 +- Reused(reference_id=[3])
                              +- Exchange(distribution=[hash[c_customer_sk]])
                                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_customer_id, c_first_name, c_last_name]]], fields=[c_customer_sk, c_customer_id, c_first_name, c_last_name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q75]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query75.tpl and seed 1819994127
WITH all_sales AS (
 SELECT d_year
       ,i_brand_id
       ,i_class_id
       ,i_category_id
       ,i_manufact_id
       ,SUM(sales_cnt) AS sales_cnt
       ,SUM(sales_amt) AS sales_amt
 FROM (SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt
             ,cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt
       FROM catalog_sales JOIN item ON i_item_sk=cs_item_sk
                          JOIN date_dim ON d_date_sk=cs_sold_date_sk
                          LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number 
                                                    AND cs_item_sk=cr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt
             ,ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt
       FROM store_sales JOIN item ON i_item_sk=ss_item_sk
                        JOIN date_dim ON d_date_sk=ss_sold_date_sk
                        LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number 
                                                AND ss_item_sk=sr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt
             ,ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt
       FROM web_sales JOIN item ON i_item_sk=ws_item_sk
                      JOIN date_dim ON d_date_sk=ws_sold_date_sk
                      LEFT JOIN web_returns ON (ws_order_number=wr_order_number 
                                            AND ws_item_sk=wr_item_sk)
       WHERE i_category='Sports') sales_detail
 GROUP BY d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id)
 SELECT  prev_yr.d_year AS prev_year
                          ,curr_yr.d_year AS`year`
                          ,curr_yr.i_brand_id
                          ,curr_yr.i_class_id
                          ,curr_yr.i_category_id
                          ,curr_yr.i_manufact_id
                          ,prev_yr.sales_cnt AS prev_yr_cnt
                          ,curr_yr.sales_cnt AS curr_yr_cnt
                          ,curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff
                          ,curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff
 FROM all_sales curr_yr, all_sales prev_yr
 WHERE curr_yr.i_brand_id=prev_yr.i_brand_id
   AND curr_yr.i_class_id=prev_yr.i_class_id
   AND curr_yr.i_category_id=prev_yr.i_category_id
   AND curr_yr.i_manufact_id=prev_yr.i_manufact_id
   AND curr_yr.d_year=2002
   AND prev_yr.d_year=2002-1
   AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))<0.9
 ORDER BY sales_cnt_diff
 limit 100

-- end query 1 in stream 0 using template query75.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$8], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalProject(prev_year=[$7], year=[$0], i_brand_id=[$1], i_class_id=[$2], i_category_id=[$3], i_manufact_id=[$4], prev_yr_cnt=[$12], curr_yr_cnt=[$5], sales_cnt_diff=[-($5, $12)], sales_amt_diff=[-($6, $13)])
   +- LogicalFilter(condition=[AND(=($1, $8), =($2, $9), =($3, $10), =($4, $11), =($0, 2002), =($7, -(2002, 1)), <(/(CAST($5):DECIMAL(17, 2), CAST($12):DECIMAL(17, 2)), 0.9:DECIMAL(2, 1)))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalAggregate(group=[{0, 1, 2, 3, 4}], sales_cnt=[SUM($5)], sales_amt=[SUM($6)])
         :  +- LogicalUnion(all=[false])
         :     :- LogicalUnion(all=[false])
         :     :  :- LogicalProject(d_year=[$62], i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45], i_manufact_id=[$47], sales_cnt=[-($18, COALESCE($101, 0))], sales_amt=[-($23, COALESCE($102, 0.0:DOUBLE))])
         :     :  :  +- LogicalFilter(condition=[=($46, _UTF-16LE'Sports')])
         :     :  :     +- LogicalJoin(condition=[AND(=($17, $100), =($15, $86))], joinType=[left])
         :     :  :        :- LogicalJoin(condition=[=($56, $0)], joinType=[inner])
         :     :  :        :  :- LogicalJoin(condition=[=($34, $15)], joinType=[inner])
         :     :  :        :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
         :     :  :        :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
         :     :  :        :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :     :  :        +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns]])
         :     :  +- LogicalProject(d_year=[$51], i_brand_id=[$30], i_class_id=[$32], i_category_id=[$34], i_manufact_id=[$36], sales_cnt=[-($10, COALESCE($83, 0))], sales_amt=[-($15, COALESCE($84, 0.0:DOUBLE))])
         :     :     +- LogicalFilter(condition=[=($35, _UTF-16LE'Sports')])
         :     :        +- LogicalJoin(condition=[AND(=($9, $82), =($2, $75))], joinType=[left])
         :     :           :- LogicalJoin(condition=[=($45, $0)], joinType=[inner])
         :     :           :  :- LogicalJoin(condition=[=($23, $2)], joinType=[inner])
         :     :           :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :     :           :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
         :     :           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :     :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
         :     +- LogicalProject(d_year=[$62], i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45], i_manufact_id=[$47], sales_cnt=[-($18, COALESCE($98, 0))], sales_amt=[-($23, COALESCE($99, 0.0:DOUBLE))])
         :        +- LogicalFilter(condition=[=($46, _UTF-16LE'Sports')])
         :           +- LogicalJoin(condition=[AND(=($17, $97), =($3, $86))], joinType=[left])
         :              :- LogicalJoin(condition=[=($56, $0)], joinType=[inner])
         :              :  :- LogicalJoin(condition=[=($34, $3)], joinType=[inner])
         :              :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
         :              :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
         :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_returns]])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], sales_cnt=[SUM($5)], sales_amt=[SUM($6)])
            +- LogicalUnion(all=[false])
               :- LogicalUnion(all=[false])
               :  :- LogicalProject(d_year=[$62], i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45], i_manufact_id=[$47], sales_cnt=[-($18, COALESCE($101, 0))], sales_amt=[-($23, COALESCE($102, 0.0:DOUBLE))])
               :  :  +- LogicalFilter(condition=[=($46, _UTF-16LE'Sports')])
               :  :     +- LogicalJoin(condition=[AND(=($17, $100), =($15, $86))], joinType=[left])
               :  :        :- LogicalJoin(condition=[=($56, $0)], joinType=[inner])
               :  :        :  :- LogicalJoin(condition=[=($34, $15)], joinType=[inner])
               :  :        :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
               :  :        :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
               :  :        :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
               :  :        +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns]])
               :  +- LogicalProject(d_year=[$51], i_brand_id=[$30], i_class_id=[$32], i_category_id=[$34], i_manufact_id=[$36], sales_cnt=[-($10, COALESCE($83, 0))], sales_amt=[-($15, COALESCE($84, 0.0:DOUBLE))])
               :     +- LogicalFilter(condition=[=($35, _UTF-16LE'Sports')])
               :        +- LogicalJoin(condition=[AND(=($9, $82), =($2, $75))], joinType=[left])
               :           :- LogicalJoin(condition=[=($45, $0)], joinType=[inner])
               :           :  :- LogicalJoin(condition=[=($23, $2)], joinType=[inner])
               :           :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
               :           :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
               :           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
               :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
               +- LogicalProject(d_year=[$62], i_brand_id=[$41], i_class_id=[$43], i_category_id=[$45], i_manufact_id=[$47], sales_cnt=[-($18, COALESCE($98, 0))], sales_amt=[-($23, COALESCE($99, 0.0:DOUBLE))])
                  +- LogicalFilter(condition=[=($46, _UTF-16LE'Sports')])
                     +- LogicalJoin(condition=[AND(=($17, $97), =($3, $86))], joinType=[left])
                        :- LogicalJoin(condition=[=($56, $0)], joinType=[inner])
                        :  :- LogicalJoin(condition=[=($34, $3)], joinType=[inner])
                        :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                        :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                        :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                        +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_returns]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[sales_cnt_diff ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[sales_cnt_diff ASC], offset=[0], fetch=[100], global=[false])
      +- Calc(select=[CAST(2001 AS INTEGER) AS prev_year, CAST(2002 AS INTEGER) AS year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt0 AS prev_yr_cnt, sales_cnt AS curr_yr_cnt, (sales_cnt - sales_cnt0) AS sales_cnt_diff, (sales_amt - sales_amt0) AS sales_amt_diff])
         +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[((i_brand_id = i_brand_id0) AND (i_class_id = i_class_id0) AND (i_category_id = i_category_id0) AND (i_manufact_id = i_manufact_id0) AND ((CAST(sales_cnt AS DECIMAL(17, 2)) / CAST(sales_cnt0 AS DECIMAL(17, 2))) < 0.9))], select=[i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt, i_brand_id0, i_class_id0, i_category_id0, i_manufact_id0, sales_cnt0, sales_amt0], isBroadcast=[true], build=[right])\n:- Calc(select=[i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt])\n:  +- HashAggregate(isMerge=[true], groupBy=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id], select=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, Final_SUM(sum$0) AS sales_cnt, Final_SUM(sum$1) AS sales_amt])\n:     +- [#2] Exchange(distribution=[hash[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id]])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :- Exchange(distribution=[broadcast])
            :  +- Calc(select=[i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt])
            :     +- HashAggregate(isMerge=[true], groupBy=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id], select=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, Final_SUM(sum$0) AS sales_cnt, Final_SUM(sum$1) AS sales_amt])
            :        +- Exchange(distribution=[hash[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id]])
            :           +- LocalHashAggregate(groupBy=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id], select=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, Partial_SUM(sales_cnt) AS sum$0, Partial_SUM(sales_amt) AS sum$1])
            :              +- HashAggregate(isMerge=[false], groupBy=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt], select=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt])
            :                 +- Union(all=[true], union=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt])
            :                    :- Union(all=[true], union=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt])
            :                    :  :- Exchange(distribution=[hash[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt]])
            :                    :  :  +- Calc(select=[CAST(2001 AS INTEGER) AS d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, (cs_quantity - COALESCE(cr_return_quantity, 0)) AS sales_cnt, (cs_ext_sales_price - COALESCE(cr_return_amount, 0.0)) AS sales_amt])
            :                    :  :     +- HashJoin(joinType=[RightOuterJoin], where=[((cs_order_number = cr_order_number) AND (cs_item_sk = cr_item_sk))], select=[cr_item_sk, cr_order_number, cr_return_quantity, cr_return_amount, cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id], build=[right])
            :                    :  :        :- Exchange(distribution=[hash[cr_order_number, cr_item_sk]])
            :                    :  :        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns, project=[cr_item_sk, cr_order_number, cr_return_quantity, cr_return_amount]]], fields=[cr_item_sk, cr_order_number, cr_return_quantity, cr_return_amount])
            :                    :  :        +- Exchange(distribution=[hash[cs_order_number, cs_item_sk]])
            :                    :  :           +- Calc(select=[cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id])
            :                    :  :              +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(i_item_sk = cs_item_sk)], select=[cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price, i_item_sk, i_brand_id, i_class_id, i_category_id, i_manufact_id], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(d_date_sk = cs_sold_date_sk)], select=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:     :- [#2] Calc(select=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price], where=[cs_sold_date_sk IS NOT NULL])\n:     +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :                    :  :                 :- Exchange(distribution=[broadcast])(reuse_id=[1])
            :                    :  :                 :  +- Calc(select=[i_item_sk, i_brand_id, i_class_id, i_category_id, i_manufact_id], where=[(i_category = 'Sports')])
            :                    :  :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand_id, i_class_id, i_category_id, i_category, i_manufact_id]]], fields=[i_item_sk, i_brand_id, i_class_id, i_category_id, i_category, i_manufact_id])
            :                    :  :                 :- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price], where=[cs_sold_date_sk IS NOT NULL])(reuse_id=[3])
            :                    :  :                 :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price]]], fields=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price])
            :                    :  :                 +- Exchange(distribution=[broadcast])(reuse_id=[2])
            :                    :  :                    +- Calc(select=[d_date_sk], where=[(d_year = 2001)])
            :                    :  :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
            :                    :  +- Exchange(distribution=[hash[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt]])
            :                    :     +- Calc(select=[CAST(2001 AS INTEGER) AS d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, (ss_quantity - COALESCE(sr_return_quantity, 0)) AS sales_cnt, (ss_ext_sales_price - COALESCE(sr_return_amt, 0.0)) AS sales_amt])
            :                    :        +- HashJoin(joinType=[RightOuterJoin], where=[((ss_ticket_number = sr_ticket_number) AND (ss_item_sk = sr_item_sk))], select=[sr_item_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, ss_item_sk, ss_ticket_number, ss_quantity, ss_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id], build=[right])
            :                    :           :- Exchange(distribution=[hash[sr_ticket_number, sr_item_sk]])
            :                    :           :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_item_sk, sr_ticket_number, sr_return_quantity, sr_return_amt]]], fields=[sr_item_sk, sr_ticket_number, sr_return_quantity, sr_return_amt])
            :                    :           +- Exchange(distribution=[hash[ss_ticket_number, ss_item_sk]])
            :                    :              +- Calc(select=[ss_item_sk, ss_ticket_number, ss_quantity, ss_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id])
            :                    :                 +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(i_item_sk = ss_item_sk)], select=[ss_item_sk, ss_ticket_number, ss_quantity, ss_ext_sales_price, i_item_sk, i_brand_id, i_class_id, i_category_id, i_manufact_id], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_item_sk, ss_ticket_number, ss_quantity, ss_ext_sales_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(d_date_sk = ss_sold_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_ticket_number, ss_quantity, ss_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:     :- [#2] Calc(select=[ss_sold_date_sk, ss_item_sk, ss_ticket_number, ss_quantity, ss_ext_sales_price], where=[ss_sold_date_sk IS NOT NULL])\n:     +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :                    :                    :- Reused(reference_id=[1])
            :                    :                    :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_ticket_number, ss_quantity, ss_ext_sales_price], where=[ss_sold_date_sk IS NOT NULL])(reuse_id=[4])
            :                    :                    :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_ticket_number, ss_quantity, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ticket_number, ss_quantity, ss_ext_sales_price])
            :                    :                    +- Reused(reference_id=[2])
            :                    +- Exchange(distribution=[hash[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt]])
            :                       +- Calc(select=[CAST(2001 AS INTEGER) AS d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, (ws_quantity - COALESCE(wr_return_quantity, 0)) AS sales_cnt, (ws_ext_sales_price - COALESCE(wr_return_amt, 0.0)) AS sales_amt])
            :                          +- HashJoin(joinType=[RightOuterJoin], where=[((ws_order_number = wr_order_number) AND (ws_item_sk = wr_item_sk))], select=[wr_item_sk, wr_order_number, wr_return_quantity, wr_return_amt, ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id], build=[right])
            :                             :- Exchange(distribution=[hash[wr_order_number, wr_item_sk]])
            :                             :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_returns, project=[wr_item_sk, wr_order_number, wr_return_quantity, wr_return_amt]]], fields=[wr_item_sk, wr_order_number, wr_return_quantity, wr_return_amt])
            :                             +- Exchange(distribution=[hash[ws_order_number, ws_item_sk]])
            :                                +- Calc(select=[ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id])
            :                                   +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(i_item_sk = ws_item_sk)], select=[ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price, i_item_sk, i_brand_id, i_class_id, i_category_id, i_manufact_id], isBroadcast=[true], build=[right])\n:- Calc(select=[ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(d_date_sk = ws_sold_date_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:     :- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price])\n:     +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :                                      :- Reused(reference_id=[1])
            :                                      :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price])
            :                                      +- Reused(reference_id=[2])
            +- Exchange(distribution=[hash[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id]])
               +- LocalHashAggregate(groupBy=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id], select=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, Partial_SUM(sales_cnt) AS sum$0, Partial_SUM(sales_amt) AS sum$1])
                  +- HashAggregate(isMerge=[false], groupBy=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt], select=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt])
                     +- Union(all=[true], union=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt])
                        :- Union(all=[true], union=[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt])
                        :  :- Exchange(distribution=[hash[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt]])
                        :  :  +- Calc(select=[CAST(2002 AS INTEGER) AS d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, (cs_quantity - COALESCE(cr_return_quantity, 0)) AS sales_cnt, (cs_ext_sales_price - COALESCE(cr_return_amount, 0.0)) AS sales_amt])
                        :  :     +- HashJoin(joinType=[RightOuterJoin], where=[((cs_order_number = cr_order_number) AND (cs_item_sk = cr_item_sk))], select=[cr_item_sk, cr_order_number, cr_return_quantity, cr_return_amount, cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id], build=[right])
                        :  :        :- Exchange(distribution=[hash[cr_order_number, cr_item_sk]])
                        :  :        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns, project=[cr_item_sk, cr_order_number, cr_return_quantity, cr_return_amount]]], fields=[cr_item_sk, cr_order_number, cr_return_quantity, cr_return_amount])
                        :  :        +- Exchange(distribution=[hash[cs_order_number, cs_item_sk]])
                        :  :           +- Calc(select=[cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id])
                        :  :              +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(i_item_sk = cs_item_sk)], select=[cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price, i_item_sk, i_brand_id, i_class_id, i_category_id, i_manufact_id], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(d_date_sk = cs_sold_date_sk)], select=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:     :- [#2] Calc(select=[cs_sold_date_sk, cs_item_sk, cs_order_number, cs_quantity, cs_ext_sales_price], where=[cs_sold_date_sk IS NOT NULL])\n:     +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :  :                 :- Reused(reference_id=[1])
                        :  :                 :- Reused(reference_id=[3])
                        :  :                 +- Exchange(distribution=[broadcast])(reuse_id=[5])
                        :  :                    +- Calc(select=[d_date_sk], where=[(d_year = 2002)])
                        :  :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
                        :  +- Exchange(distribution=[hash[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt]])
                        :     +- Calc(select=[CAST(2002 AS INTEGER) AS d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, (ss_quantity - COALESCE(sr_return_quantity, 0)) AS sales_cnt, (ss_ext_sales_price - COALESCE(sr_return_amt, 0.0)) AS sales_amt])
                        :        +- HashJoin(joinType=[RightOuterJoin], where=[((ss_ticket_number = sr_ticket_number) AND (ss_item_sk = sr_item_sk))], select=[sr_item_sk, sr_ticket_number, sr_return_quantity, sr_return_amt, ss_item_sk, ss_ticket_number, ss_quantity, ss_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id], build=[right])
                        :           :- Exchange(distribution=[hash[sr_ticket_number, sr_item_sk]])
                        :           :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_item_sk, sr_ticket_number, sr_return_quantity, sr_return_amt]]], fields=[sr_item_sk, sr_ticket_number, sr_return_quantity, sr_return_amt])
                        :           +- Exchange(distribution=[hash[ss_ticket_number, ss_item_sk]])
                        :              +- Calc(select=[ss_item_sk, ss_ticket_number, ss_quantity, ss_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id])
                        :                 +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(i_item_sk = ss_item_sk)], select=[ss_item_sk, ss_ticket_number, ss_quantity, ss_ext_sales_price, i_item_sk, i_brand_id, i_class_id, i_category_id, i_manufact_id], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_item_sk, ss_ticket_number, ss_quantity, ss_ext_sales_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(d_date_sk = ss_sold_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_ticket_number, ss_quantity, ss_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:     :- [#2] Calc(select=[ss_sold_date_sk, ss_item_sk, ss_ticket_number, ss_quantity, ss_ext_sales_price], where=[ss_sold_date_sk IS NOT NULL])\n:     +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :                    :- Reused(reference_id=[1])
                        :                    :- Reused(reference_id=[4])
                        :                    +- Reused(reference_id=[5])
                        +- Exchange(distribution=[hash[d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, sales_cnt, sales_amt]])
                           +- Calc(select=[CAST(2002 AS INTEGER) AS d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id, (ws_quantity - COALESCE(wr_return_quantity, 0)) AS sales_cnt, (ws_ext_sales_price - COALESCE(wr_return_amt, 0.0)) AS sales_amt])
                              +- HashJoin(joinType=[RightOuterJoin], where=[((ws_order_number = wr_order_number) AND (ws_item_sk = wr_item_sk))], select=[wr_item_sk, wr_order_number, wr_return_quantity, wr_return_amt, ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id], build=[right])
                                 :- Exchange(distribution=[hash[wr_order_number, wr_item_sk]])
                                 :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_returns, project=[wr_item_sk, wr_order_number, wr_return_quantity, wr_return_amt]]], fields=[wr_item_sk, wr_order_number, wr_return_quantity, wr_return_amt])
                                 +- Exchange(distribution=[hash[ws_order_number, ws_item_sk]])
                                    +- Calc(select=[ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price, i_brand_id, i_class_id, i_category_id, i_manufact_id])
                                       +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(i_item_sk = ws_item_sk)], select=[ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price, i_item_sk, i_brand_id, i_class_id, i_category_id, i_manufact_id], isBroadcast=[true], build=[right])\n:- Calc(select=[ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(d_date_sk = ws_sold_date_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:     :- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price])\n:     +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                          :- Reused(reference_id=[1])
                                          :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_order_number, ws_quantity, ws_ext_sales_price])
                                          +- Reused(reference_id=[5])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q76]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query76.tpl and seed 2031708268
select  channel, col_name, d_year, d_qoy, i_category, COUNT(*) sales_cnt, SUM(ext_sales_price) sales_amt FROM (
        SELECT 'store' as channel, 'ss_addr_sk' col_name, d_year, d_qoy, i_category, ss_ext_sales_price ext_sales_price
         FROM store_sales, item, date_dim
         WHERE ss_addr_sk IS NULL
           AND ss_sold_date_sk=d_date_sk
           AND ss_item_sk=i_item_sk
        UNION ALL
        SELECT 'web' as channel, 'ws_web_page_sk' col_name, d_year, d_qoy, i_category, ws_ext_sales_price ext_sales_price
         FROM web_sales, item, date_dim
         WHERE ws_web_page_sk IS NULL
           AND ws_sold_date_sk=d_date_sk
           AND ws_item_sk=i_item_sk
        UNION ALL
        SELECT 'catalog' as channel, 'cs_warehouse_sk' col_name, d_year, d_qoy, i_category, cs_ext_sales_price ext_sales_price
         FROM catalog_sales, item, date_dim
         WHERE cs_warehouse_sk IS NULL
           AND cs_sold_date_sk=d_date_sk
           AND cs_item_sk=i_item_sk) foo
GROUP BY channel, col_name, d_year, d_qoy, i_category
ORDER BY channel, col_name, d_year, d_qoy, i_category
limit 100

-- end query 1 in stream 0 using template query76.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2, 3, 4}], sales_cnt=[COUNT()], sales_amt=[SUM($5)])
   +- LogicalUnion(all=[true])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(channel=[_UTF-16LE'store'], col_name=[_UTF-16LE'ss_addr_sk'], d_year=[$51], d_qoy=[$55], i_category=[$35], ext_sales_price=[$15])
      :  :  +- LogicalFilter(condition=[AND(IS NULL($6), =($0, $45), =($2, $23))])
      :  :     +- LogicalJoin(condition=[true], joinType=[inner])
      :  :        :- LogicalJoin(condition=[true], joinType=[inner])
      :  :        :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
      :  :        :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
      :  :        +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      :  +- LogicalProject(channel=[_UTF-16LE'web'], col_name=[_UTF-16LE'ws_web_page_sk'], d_year=[$62], d_qoy=[$66], i_category=[$46], ext_sales_price=[$23])
      :     +- LogicalFilter(condition=[AND(IS NULL($12), =($0, $56), =($3, $34))])
      :        +- LogicalJoin(condition=[true], joinType=[inner])
      :           :- LogicalJoin(condition=[true], joinType=[inner])
      :           :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
      :           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
      :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      +- LogicalProject(channel=[_UTF-16LE'catalog'], col_name=[_UTF-16LE'cs_warehouse_sk'], d_year=[$62], d_qoy=[$66], i_category=[$46], ext_sales_price=[$23])
         +- LogicalFilter(condition=[AND(IS NULL($14), =($0, $56), =($15, $34))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
               :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
               +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[channel ASC, col_name ASC, d_year ASC, d_qoy ASC, i_category ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[channel ASC, col_name ASC, d_year ASC, d_qoy ASC, i_category ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[channel, col_name, d_year, d_qoy, i_category], select=[channel, col_name, d_year, d_qoy, i_category, Final_COUNT(count1$0) AS sales_cnt, Final_SUM(sum$1) AS sales_amt])
         +- Exchange(distribution=[hash[channel, col_name, d_year, d_qoy, i_category]])
            +- LocalHashAggregate(groupBy=[channel, col_name, d_year, d_qoy, i_category], select=[channel, col_name, d_year, d_qoy, i_category, Partial_COUNT(*) AS count1$0, Partial_SUM(ext_sales_price) AS sum$1])
               +- MultipleInput(readOrder=[1,0,1,0,1,0], members=[\nUnion(all=[true], union=[channel, col_name, d_year, d_qoy, i_category, ext_sales_price])\n:- Union(all=[true], union=[channel, col_name, d_year, d_qoy, i_category, ext_sales_price])\n:  :- Calc(select=['store' AS channel, 'ss_addr_sk' AS col_name, d_year, d_qoy, i_category, ss_ext_sales_price AS ext_sales_price])\n:  :  +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, ss_ext_sales_price, d_year, d_qoy, i_item_sk, i_category], build=[right])\n:  :     :- [#3] Exchange(distribution=[hash[ss_item_sk]])\n:  :     +- [#4] Exchange(distribution=[hash[i_item_sk]])\n:  +- Calc(select=['web' AS channel, 'ws_web_page_sk' AS col_name, d_year, d_qoy, i_category, ws_ext_sales_price AS ext_sales_price])\n:     +- HashJoin(joinType=[InnerJoin], where=[(ws_item_sk = i_item_sk)], select=[i_item_sk, i_category, ws_item_sk, ws_ext_sales_price, d_year, d_qoy], build=[right])\n:        :- [#5] Exchange(distribution=[hash[i_item_sk]])\n:        +- [#6] Exchange(distribution=[hash[ws_item_sk]])\n+- Calc(select=['catalog' AS channel, 'cs_warehouse_sk' AS col_name, d_year, d_qoy, i_category, cs_ext_sales_price AS ext_sales_price])\n   +- HashJoin(joinType=[InnerJoin], where=[(cs_item_sk = i_item_sk)], select=[cs_item_sk, cs_ext_sales_price, d_year, d_qoy, i_item_sk, i_category], build=[right])\n      :- [#1] Exchange(distribution=[hash[cs_item_sk]])\n      +- [#2] Exchange(distribution=[hash[i_item_sk]])\n])
                  :- Exchange(distribution=[hash[cs_item_sk]])
                  :  +- Calc(select=[cs_item_sk, cs_ext_sales_price, d_year, d_qoy])
                  :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price, d_date_sk, d_year, d_qoy], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_item_sk, cs_ext_sales_price], where=[cs_warehouse_sk IS NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_warehouse_sk, cs_item_sk, cs_ext_sales_price]]], fields=[cs_sold_date_sk, cs_warehouse_sk, cs_item_sk, cs_ext_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :        :- Exchange(distribution=[broadcast])
                  :        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_qoy]]], fields=[d_date_sk, d_year, d_qoy])
                  :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_warehouse_sk, cs_item_sk, cs_ext_sales_price]]], fields=[cs_sold_date_sk, cs_warehouse_sk, cs_item_sk, cs_ext_sales_price])
                  :- Exchange(distribution=[hash[i_item_sk]])
                  :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_category]]], fields=[i_item_sk, i_category])
                  :- Exchange(distribution=[hash[ss_item_sk]])
                  :  +- Calc(select=[ss_item_sk, ss_ext_sales_price, d_year, d_qoy])
                  :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price, d_date_sk, d_year, d_qoy], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price], where=[ss_addr_sk IS NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :        :- Exchange(distribution=[broadcast])
                  :        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_qoy]]], fields=[d_date_sk, d_year, d_qoy])
                  :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_addr_sk, ss_ext_sales_price])
                  :- Exchange(distribution=[hash[i_item_sk]])
                  :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_category]]], fields=[i_item_sk, i_category])
                  :- Exchange(distribution=[hash[i_item_sk]])
                  :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_category]]], fields=[i_item_sk, i_category])
                  +- Exchange(distribution=[hash[ws_item_sk]])
                     +- Calc(select=[ws_item_sk, ws_ext_sales_price, d_year, d_qoy])
                        +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price, d_date_sk, d_year, d_qoy], isBroadcast=[true], build=[right])\n:- Calc(select=[ws_sold_date_sk, ws_item_sk, ws_ext_sales_price], where=[ws_web_page_sk IS NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_web_page_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_web_page_sk, ws_ext_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
                           :- Exchange(distribution=[broadcast])
                           :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_qoy]]], fields=[d_date_sk, d_year, d_qoy])
                           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_web_page_sk, ws_ext_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_web_page_sk, ws_ext_sales_price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q77]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query77.tpl and seed 1819994127
with ss as
 (select s_store_sk,
         sum(ss_ext_sales_price) as sales,
         sum(ss_net_profit) as profit
 from store_sales,
      date_dim,
      store
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  interval '30' day) 
       and ss_store_sk = s_store_sk
 group by s_store_sk)
 ,
 sr as
 (select s_store_sk,
         sum(sr_return_amt) as `returns`,
         sum(sr_net_loss) as profit_loss
 from store_returns,
      date_dim,
      store
 where sr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  interval '30' day)
       and sr_store_sk = s_store_sk
 group by s_store_sk), 
 cs as
 (select cs_call_center_sk,
        sum(cs_ext_sales_price) as sales,
        sum(cs_net_profit) as profit
 from catalog_sales,
      date_dim
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  interval '30' day)
 group by cs_call_center_sk 
 ), 
 cr as
 (select
        sum(cr_return_amount) as `returns`,
        sum(cr_net_loss) as profit_loss
 from catalog_returns,
      date_dim
 where cr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  interval '30' day)
 ), 
 ws as
 ( select wp_web_page_sk,
        sum(ws_ext_sales_price) as sales,
        sum(ws_net_profit) as profit
 from web_sales,
      date_dim,
      web_page
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  interval '30' day)
       and ws_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk), 
 wr as
 (select wp_web_page_sk,
        sum(wr_return_amt) as `returns`,
        sum(wr_net_loss) as profit_loss
 from web_returns,
      date_dim,
      web_page
 where wr_returned_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  interval '30' day)
       and wr_web_page_sk = wp_web_page_sk
 group by wp_web_page_sk)
  select  channel
        , id
        , sum(sales) as sales
        , sum(`returns`) as `returns`
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , ss.s_store_sk as id
        , sales
        , coalesce(`returns`, 0) as `returns`
        , (profit - coalesce(profit_loss,0)) as profit
 from   ss left join sr
        on  ss.s_store_sk = sr.s_store_sk
 union all
 select 'catalog channel' as channel
        , cs_call_center_sk as id
        , sales
        , `returns`
        , (profit - profit_loss) as profit
 from  cs
       , cr
 union all
 select 'web channel' as channel
        , ws.wp_web_page_sk as id
        , sales
        , coalesce(`returns`, 0) `returns`
        , (profit - coalesce(profit_loss,0)) as profit
 from   ws left join wr
        on  ws.wp_web_page_sk = wr.wp_web_page_sk
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100

-- end query 1 in stream 0 using template query77.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], sales=[SUM($2)], returns=[SUM($3)], profit=[SUM($4)])
   +- LogicalUnion(all=[true])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(channel=[_UTF-16LE'store channel'], id=[$0], sales=[$1], returns=[coalesce($4, 0:DOUBLE)], profit=[-($2, coalesce($5, 0:DOUBLE))])
      :  :  +- LogicalJoin(condition=[=($0, $3)], joinType=[left])
      :  :     :- LogicalAggregate(group=[{0}], sales=[SUM($1)], profit=[SUM($2)])
      :  :     :  +- LogicalProject(s_store_sk=[$51], ss_ext_sales_price=[$15], ss_net_profit=[$22])
      :  :     :     +- LogicalFilter(condition=[AND(=($0, $23), >=($25, CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL), <=($25, +(CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL, 2592000000:INTERVAL DAY)), =($7, $51))])
      :  :     :        +- LogicalJoin(condition=[true], joinType=[inner])
      :  :     :           :- LogicalJoin(condition=[true], joinType=[inner])
      :  :     :           :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
      :  :     :           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      :  :     :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
      :  :     +- LogicalAggregate(group=[{0}], returns=[SUM($1)], profit_loss=[SUM($2)])
      :  :        +- LogicalProject(s_store_sk=[$48], sr_return_amt=[$11], sr_net_loss=[$19])
      :  :           +- LogicalFilter(condition=[AND(=($0, $20), >=($22, CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL), <=($22, +(CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL, 2592000000:INTERVAL DAY)), =($7, $48))])
      :  :              +- LogicalJoin(condition=[true], joinType=[inner])
      :  :                 :- LogicalJoin(condition=[true], joinType=[inner])
      :  :                 :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
      :  :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      :  :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
      :  +- LogicalProject(channel=[_UTF-16LE'catalog channel'], id=[$0], sales=[$1], returns=[$3], profit=[-($2, $4)])
      :     +- LogicalJoin(condition=[true], joinType=[inner])
      :        :- LogicalAggregate(group=[{0}], sales=[SUM($1)], profit=[SUM($2)])
      :        :  +- LogicalProject(cs_call_center_sk=[$11], cs_ext_sales_price=[$23], cs_net_profit=[$33])
      :        :     +- LogicalFilter(condition=[AND(=($0, $34), >=($36, CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL), <=($36, +(CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL, 2592000000:INTERVAL DAY)))])
      :        :        +- LogicalJoin(condition=[true], joinType=[inner])
      :        :           :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
      :        :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      :        +- LogicalAggregate(group=[{}], returns=[SUM($0)], profit_loss=[SUM($1)])
      :           +- LogicalProject(cr_return_amount=[$18], cr_net_loss=[$26])
      :              +- LogicalFilter(condition=[AND(=($0, $27), >=($29, CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL), <=($29, +(CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL, 2592000000:INTERVAL DAY)))])
      :                 +- LogicalJoin(condition=[true], joinType=[inner])
      :                    :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns]])
      :                    +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      +- LogicalProject(channel=[_UTF-16LE'web channel'], id=[$0], sales=[$1], returns=[coalesce($4, 0:DOUBLE)], profit=[-($2, coalesce($5, 0:DOUBLE))])
         +- LogicalJoin(condition=[=($0, $3)], joinType=[left])
            :- LogicalAggregate(group=[{0}], sales=[SUM($1)], profit=[SUM($2)])
            :  +- LogicalProject(wp_web_page_sk=[$62], ws_ext_sales_price=[$23], ws_net_profit=[$33])
            :     +- LogicalFilter(condition=[AND(=($0, $34), >=($36, CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL), <=($36, +(CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL, 2592000000:INTERVAL DAY)), =($12, $62))])
            :        +- LogicalJoin(condition=[true], joinType=[inner])
            :           :- LogicalJoin(condition=[true], joinType=[inner])
            :           :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
            :           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_page]])
            +- LogicalAggregate(group=[{0}], returns=[SUM($1)], profit_loss=[SUM($2)])
               +- LogicalProject(wp_web_page_sk=[$52], wr_return_amt=[$15], wr_net_loss=[$23])
                  +- LogicalFilter(condition=[AND(=($0, $24), >=($26, CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL), <=($26, +(CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL, 2592000000:INTERVAL DAY)), =($11, $52))])
                     +- LogicalJoin(condition=[true], joinType=[inner])
                        :- LogicalJoin(condition=[true], joinType=[inner])
                        :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_returns]])
                        :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                        +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_page]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[channel, id, sales, returns, profit])
+- SortLimit(orderBy=[channel ASC, id ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[channel ASC, id ASC], offset=[0], fetch=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[channel, id, $e], select=[channel, id, $e, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS returns, Final_SUM(sum$2) AS profit])
            +- Exchange(distribution=[hash[channel, id, $e]])
               +- LocalHashAggregate(groupBy=[channel, id, $e], select=[channel, id, $e, Partial_SUM(sales) AS sum$0, Partial_SUM(returns) AS sum$1, Partial_SUM(profit) AS sum$2])
                  +- Expand(projects=[{channel, id, sales, returns, profit, 0 AS $e}, {channel, null AS id, sales, returns, profit, 1 AS $e}, {null AS channel, null AS id, sales, returns, profit, 3 AS $e}])
                     +- MultipleInput(readOrder=[0,0,0,1,0,0,1,1], members=[\nUnion(all=[true], union=[channel, id, sales, returns, profit])\n:- Union(all=[true], union=[channel, id, sales, returns, profit])\n:  :- Calc(select=['store channel' AS channel, CAST(s_store_sk AS BIGINT) AS id, sales, CAST(coalesce(returns, 0) AS DOUBLE) AS returns, (profit - coalesce(profit_loss, 0)) AS profit])\n:  :  +- HashJoin(joinType=[LeftOuterJoin], where=[(s_store_sk = s_store_sk0)], select=[s_store_sk, sales, profit, s_store_sk0, returns, profit_loss], isBroadcast=[true], build=[right])\n:  :     :- Calc(select=[s_store_sk, sales, profit])\n:  :     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, sales, profit, s_store_sk], isBroadcast=[true], build=[left])\n:  :     :     :- [#6] Exchange(distribution=[broadcast])\n:  :     :     +- [#7] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk]]], fields=[s_store_sk])\n:  :     +- [#2] Exchange(distribution=[broadcast])\n:  +- Calc(select=['catalog channel' AS channel, cs_call_center_sk AS id, sales, returns, (profit - profit_loss) AS profit])\n:     +- NestedLoopJoin(joinType=[InnerJoin], where=[true], select=[cs_call_center_sk, sales, profit, returns, profit_loss], build=[right], singleRowJoin=[true])\n:        :- HashAggregate(isMerge=[true], groupBy=[cs_call_center_sk], select=[cs_call_center_sk, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit])\n:        :  +- [#4] Exchange(distribution=[hash[cs_call_center_sk]])\n:        +- [#3] Exchange(distribution=[broadcast])\n+- Calc(select=['web channel' AS channel, CAST(wp_web_page_sk AS BIGINT) AS id, sales, CAST(coalesce(returns, 0) AS DOUBLE) AS returns, (profit - coalesce(profit_loss, 0)) AS profit])\n   +- HashJoin(joinType=[LeftOuterJoin], where=[(wp_web_page_sk = wp_web_page_sk0)], select=[wp_web_page_sk, sales, profit, wp_web_page_sk0, returns, profit_loss], isBroadcast=[true], build=[right])\n      :- Calc(select=[wp_web_page_sk, sales, profit])\n      :  +- HashJoin(joinType=[InnerJoin], where=[(ws_web_page_sk = wp_web_page_sk)], select=[ws_web_page_sk, sales, profit, wp_web_page_sk], isBroadcast=[true], build=[right])\n      :     :- HashAggregate(isMerge=[true], groupBy=[ws_web_page_sk], select=[ws_web_page_sk, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit])\n      :     :  +- [#8] Exchange(distribution=[hash[ws_web_page_sk]])\n      :     +- [#5] Exchange(distribution=[broadcast])\n      +- [#1] Exchange(distribution=[broadcast])\n])
                        :- Exchange(distribution=[broadcast])
                        :  +- Calc(select=[wp_web_page_sk, returns, profit_loss])
                        :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(wr_web_page_sk = wp_web_page_sk)], select=[wr_web_page_sk, returns, profit_loss, wp_web_page_sk], isBroadcast=[true], build=[right])\n:- HashAggregate(isMerge=[true], groupBy=[wr_web_page_sk], select=[wr_web_page_sk, Final_SUM(sum$0) AS returns, Final_SUM(sum$1) AS profit_loss])\n:  +- [#2] Exchange(distribution=[hash[wr_web_page_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :        :- Exchange(distribution=[broadcast])
                        :        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_page, project=[wp_web_page_sk]]], fields=[wp_web_page_sk])
                        :        +- Exchange(distribution=[hash[wr_web_page_sk]])
                        :           +- LocalHashAggregate(groupBy=[wr_web_page_sk], select=[wr_web_page_sk, Partial_SUM(wr_return_amt) AS sum$0, Partial_SUM(wr_net_loss) AS sum$1])
                        :              +- Calc(select=[wr_web_page_sk, wr_return_amt, wr_net_loss])
                        :                 +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(wr_returned_date_sk = d_date_sk)], select=[wr_returned_date_sk, wr_web_page_sk, wr_return_amt, wr_net_loss, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[wr_returned_date_sk, wr_web_page_sk, wr_return_amt, wr_net_loss], where=[wr_returned_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_returns, project=[wr_returned_date_sk, wr_web_page_sk, wr_return_amt, wr_net_loss]]], fields=[wr_returned_date_sk, wr_web_page_sk, wr_return_amt, wr_net_loss])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :                    :- Exchange(distribution=[broadcast])(reuse_id=[1])
                        :                    :  +- Calc(select=[d_date_sk], where=[SEARCH(d_date, Sarg[[1998-08-04..1998-09-03]])])
                        :                    :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
                        :                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_returns, project=[wr_returned_date_sk, wr_web_page_sk, wr_return_amt, wr_net_loss]]], fields=[wr_returned_date_sk, wr_web_page_sk, wr_return_amt, wr_net_loss])
                        :- Exchange(distribution=[broadcast])
                        :  +- Calc(select=[s_store_sk, returns, profit_loss])
                        :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(sr_store_sk = s_store_sk)], select=[sr_store_sk, returns, profit_loss, s_store_sk], isBroadcast=[true], build=[left])\n:- [#1] Exchange(distribution=[broadcast])\n+- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk]]], fields=[s_store_sk])\n])
                        :        :- Exchange(distribution=[broadcast])
                        :        :  +- HashAggregate(isMerge=[true], groupBy=[sr_store_sk], select=[sr_store_sk, Final_SUM(sum$0) AS returns, Final_SUM(sum$1) AS profit_loss])
                        :        :     +- Exchange(distribution=[hash[sr_store_sk]])
                        :        :        +- LocalHashAggregate(groupBy=[sr_store_sk], select=[sr_store_sk, Partial_SUM(sr_return_amt) AS sum$0, Partial_SUM(sr_net_loss) AS sum$1])
                        :        :           +- Calc(select=[sr_store_sk, sr_return_amt, sr_net_loss])
                        :        :              +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(sr_returned_date_sk = d_date_sk)], select=[sr_returned_date_sk, sr_store_sk, sr_return_amt, sr_net_loss, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[sr_returned_date_sk, sr_store_sk, sr_return_amt, sr_net_loss], where=[sr_returned_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_returned_date_sk, sr_store_sk, sr_return_amt, sr_net_loss]]], fields=[sr_returned_date_sk, sr_store_sk, sr_return_amt, sr_net_loss])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :        :                 :- Reused(reference_id=[1])
                        :        :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_returned_date_sk, sr_store_sk, sr_return_amt, sr_net_loss]]], fields=[sr_returned_date_sk, sr_store_sk, sr_return_amt, sr_net_loss])
                        :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk]]], fields=[s_store_sk])
                        :- Exchange(distribution=[broadcast])
                        :  +- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS returns, Final_SUM(sum$1) AS profit_loss])
                        :     +- Exchange(distribution=[single])
                        :        +- LocalHashAggregate(select=[Partial_SUM(cr_return_amount) AS sum$0, Partial_SUM(cr_net_loss) AS sum$1])
                        :           +- Calc(select=[cr_return_amount, cr_net_loss])
                        :              +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(cr_returned_date_sk = d_date_sk)], select=[cr_returned_date_sk, cr_return_amount, cr_net_loss, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns, project=[cr_returned_date_sk, cr_return_amount, cr_net_loss]]], fields=[cr_returned_date_sk, cr_return_amount, cr_net_loss])\n+- [#2] Exchange(distribution=[broadcast])\n])
                        :                 :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns, project=[cr_returned_date_sk, cr_return_amount, cr_net_loss]]], fields=[cr_returned_date_sk, cr_return_amount, cr_net_loss])
                        :                 +- Reused(reference_id=[1])
                        :- Exchange(distribution=[hash[cs_call_center_sk]])
                        :  +- LocalHashAggregate(groupBy=[cs_call_center_sk], select=[cs_call_center_sk, Partial_SUM(cs_ext_sales_price) AS sum$0, Partial_SUM(cs_net_profit) AS sum$1])
                        :     +- Calc(select=[cs_call_center_sk, cs_ext_sales_price, cs_net_profit])
                        :        +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_call_center_sk, cs_ext_sales_price, cs_net_profit, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_call_center_sk, cs_ext_sales_price, cs_net_profit], where=[cs_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_call_center_sk, cs_ext_sales_price, cs_net_profit]]], fields=[cs_sold_date_sk, cs_call_center_sk, cs_ext_sales_price, cs_net_profit])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :           :- Reused(reference_id=[1])
                        :           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_call_center_sk, cs_ext_sales_price, cs_net_profit]]], fields=[cs_sold_date_sk, cs_call_center_sk, cs_ext_sales_price, cs_net_profit])
                        :- Exchange(distribution=[broadcast])
                        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_page, project=[wp_web_page_sk]]], fields=[wp_web_page_sk])
                        :- Exchange(distribution=[broadcast])
                        :  +- HashAggregate(isMerge=[true], groupBy=[ss_store_sk], select=[ss_store_sk, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit])
                        :     +- Exchange(distribution=[hash[ss_store_sk]])
                        :        +- LocalHashAggregate(groupBy=[ss_store_sk], select=[ss_store_sk, Partial_SUM(ss_ext_sales_price) AS sum$0, Partial_SUM(ss_net_profit) AS sum$1])
                        :           +- Calc(select=[ss_store_sk, ss_ext_sales_price, ss_net_profit])
                        :              +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit], where=[ss_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit]]], fields=[ss_sold_date_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :                 :- Reused(reference_id=[1])
                        :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit]]], fields=[ss_sold_date_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit])
                        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk]]], fields=[s_store_sk])
                        +- Exchange(distribution=[hash[ws_web_page_sk]])
                           +- LocalHashAggregate(groupBy=[ws_web_page_sk], select=[ws_web_page_sk, Partial_SUM(ws_ext_sales_price) AS sum$0, Partial_SUM(ws_net_profit) AS sum$1])
                              +- Calc(select=[ws_web_page_sk, ws_ext_sales_price, ws_net_profit])
                                 +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_web_page_sk, ws_ext_sales_price, ws_net_profit, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_web_page_sk, ws_ext_sales_price, ws_net_profit]]], fields=[ws_sold_date_sk, ws_web_page_sk, ws_ext_sales_price, ws_net_profit])\n+- [#2] Exchange(distribution=[broadcast])\n])
                                    :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_web_page_sk, ws_ext_sales_price, ws_net_profit]]], fields=[ws_sold_date_sk, ws_web_page_sk, ws_ext_sales_price, ws_net_profit])
                                    +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q78]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query78.tpl and seed 1819994127
with ws as
  (select d_year AS ws_sold_year, ws_item_sk,
    ws_bill_customer_sk ws_customer_sk,
    sum(ws_quantity) ws_qty,
    sum(ws_wholesale_cost) ws_wc,
    sum(ws_sales_price) ws_sp
   from web_sales
   left join web_returns on wr_order_number=ws_order_number and ws_item_sk=wr_item_sk
   join date_dim on ws_sold_date_sk = d_date_sk
   where wr_order_number is null
   group by d_year, ws_item_sk, ws_bill_customer_sk
   ),
cs as
  (select d_year AS cs_sold_year, cs_item_sk,
    cs_bill_customer_sk cs_customer_sk,
    sum(cs_quantity) cs_qty,
    sum(cs_wholesale_cost) cs_wc,
    sum(cs_sales_price) cs_sp
   from catalog_sales
   left join catalog_returns on cr_order_number=cs_order_number and cs_item_sk=cr_item_sk
   join date_dim on cs_sold_date_sk = d_date_sk
   where cr_order_number is null
   group by d_year, cs_item_sk, cs_bill_customer_sk
   ),
ss as
  (select d_year AS ss_sold_year, ss_item_sk,
    ss_customer_sk,
    sum(ss_quantity) ss_qty,
    sum(ss_wholesale_cost) ss_wc,
    sum(ss_sales_price) ss_sp
   from store_sales
   left join store_returns on sr_ticket_number=ss_ticket_number and ss_item_sk=sr_item_sk
   join date_dim on ss_sold_date_sk = d_date_sk
   where sr_ticket_number is null
   group by d_year, ss_item_sk, ss_customer_sk
   )
 select 
ss_sold_year, ss_item_sk, ss_customer_sk,
round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2) ratio,
ss_qty store_qty, ss_wc store_wholesale_cost, ss_sp store_sales_price,
coalesce(ws_qty,0)+coalesce(cs_qty,0) other_chan_qty,
coalesce(ws_wc,0)+coalesce(cs_wc,0) other_chan_wholesale_cost,
coalesce(ws_sp,0)+coalesce(cs_sp,0) other_chan_sales_price
from ss
left join ws on (ws_sold_year=ss_sold_year and ws_item_sk=ss_item_sk and ws_customer_sk=ss_customer_sk)
left join cs on (cs_sold_year=ss_sold_year and cs_item_sk=ss_item_sk and cs_customer_sk=ss_customer_sk)
where coalesce(ws_qty,0)>0 and coalesce(cs_qty, 0)>0 and ss_sold_year=2000
order by 
  ss_sold_year, ss_item_sk, ss_customer_sk,
  ss_qty desc, ss_wc desc, ss_sp desc,
  other_chan_qty,
  other_chan_wholesale_cost,
  other_chan_sales_price,
  round(ss_qty/(coalesce(ws_qty+cs_qty,1)),2)
limit 100

-- end query 1 in stream 0 using template query78.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$4], sort4=[$5], sort5=[$6], sort6=[$7], sort7=[$8], sort8=[$9], sort9=[$3], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[DESC-nulls-last], dir4=[DESC-nulls-last], dir5=[DESC-nulls-last], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first], dir8=[ASC-nulls-first], dir9=[ASC-nulls-first], fetch=[100])
+- LogicalProject(ss_sold_year=[$0], ss_item_sk=[$1], ss_customer_sk=[$2], ratio=[ROUND(/($3, coalesce(+($9, $15), 1)), 2)], store_qty=[$3], store_wholesale_cost=[$4], store_sales_price=[$5], other_chan_qty=[+(coalesce($9, 0), coalesce($15, 0))], other_chan_wholesale_cost=[+(coalesce($10, 0:DOUBLE), coalesce($16, 0:DOUBLE))], other_chan_sales_price=[+(coalesce($11, 0:DOUBLE), coalesce($17, 0:DOUBLE))])
   +- LogicalFilter(condition=[AND(>(coalesce($9, 0), 0), >(coalesce($15, 0), 0), =($0, 2000))])
      +- LogicalJoin(condition=[AND(=($12, $0), =($13, $1), =($14, $2))], joinType=[left])
         :- LogicalJoin(condition=[AND(=($6, $0), =($7, $1), =($8, $2))], joinType=[left])
         :  :- LogicalAggregate(group=[{0, 1, 2}], ss_qty=[SUM($3)], ss_wc=[SUM($4)], ss_sp=[SUM($5)])
         :  :  +- LogicalProject(ss_sold_year=[$49], ss_item_sk=[$2], ss_customer_sk=[$3], ss_quantity=[$10], ss_wholesale_cost=[$11], ss_sales_price=[$13])
         :  :     +- LogicalFilter(condition=[IS NULL($32)])
         :  :        +- LogicalJoin(condition=[=($0, $43)], joinType=[inner])
         :  :           :- LogicalJoin(condition=[AND(=($32, $9), =($2, $25))], joinType=[left])
         :  :           :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :  :           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
         :  :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  +- LogicalAggregate(group=[{0, 1, 2}], ws_qty=[SUM($3)], ws_wc=[SUM($4)], ws_sp=[SUM($5)])
         :     +- LogicalProject(ws_sold_year=[$64], ws_item_sk=[$3], ws_customer_sk=[$4], ws_quantity=[$18], ws_wholesale_cost=[$19], ws_sales_price=[$21])
         :        +- LogicalFilter(condition=[IS NULL($47)])
         :           +- LogicalJoin(condition=[=($0, $58)], joinType=[inner])
         :              :- LogicalJoin(condition=[AND(=($47, $17), =($3, $36))], joinType=[left])
         :              :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
         :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_returns]])
         :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         +- LogicalAggregate(group=[{0, 1, 2}], cs_qty=[SUM($3)], cs_wc=[SUM($4)], cs_sp=[SUM($5)])
            +- LogicalProject(cs_sold_year=[$67], cs_item_sk=[$15], cs_customer_sk=[$3], cs_quantity=[$18], cs_wholesale_cost=[$19], cs_sales_price=[$21])
               +- LogicalFilter(condition=[IS NULL($50)])
                  +- LogicalJoin(condition=[=($0, $61)], joinType=[inner])
                     :- LogicalJoin(condition=[AND(=($50, $17), =($15, $36))], joinType=[left])
                     :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
                     :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns]])
                     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[ss_sold_year ASC, ss_item_sk ASC, ss_customer_sk ASC, store_qty DESC, store_wholesale_cost DESC, store_sales_price DESC, other_chan_qty ASC, other_chan_wholesale_cost ASC, other_chan_sales_price ASC, ratio ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[ss_sold_year ASC, ss_item_sk ASC, ss_customer_sk ASC, store_qty DESC, store_wholesale_cost DESC, store_sales_price DESC, other_chan_qty ASC, other_chan_wholesale_cost ASC, other_chan_sales_price ASC, ratio ASC], offset=[0], fetch=[100], global=[false])
      +- Calc(select=[CAST(2000 AS INTEGER) AS ss_sold_year, ss_item_sk, ss_customer_sk, ROUND((ss_qty / coalesce((ws_qty + cs_qty), 1)), 2) AS ratio, ss_qty AS store_qty, ss_wc AS store_wholesale_cost, ss_sp AS store_sales_price, (coalesce(ws_qty, 0) + coalesce(cs_qty, 0)) AS other_chan_qty, (coalesce(ws_wc, 0) + coalesce(cs_wc, 0)) AS other_chan_wholesale_cost, (coalesce(ws_sp, 0) + coalesce(cs_sp, 0)) AS other_chan_sales_price], where=[(coalesce(cs_qty, 0) > 0)])
         +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[LeftOuterJoin], where=[((cs_sold_year = ss_sold_year) AND (cs_item_sk = ss_item_sk) AND (cs_customer_sk = ss_customer_sk))], select=[ss_sold_year, ss_item_sk, ss_customer_sk, ss_qty, ss_wc, ss_sp, ws_qty, ws_wc, ws_sp, cs_sold_year, cs_item_sk, cs_customer_sk, cs_qty, cs_wc, cs_sp], build=[right])\n:- Calc(select=[ss_sold_year, ss_item_sk, ss_customer_sk, ss_qty, ss_wc, ss_sp, ws_qty, ws_wc, ws_sp], where=[(coalesce(ws_qty, 0) > 0)])\n:  +- HashJoin(joinType=[LeftOuterJoin], where=[((ws_sold_year = ss_sold_year) AND (ws_item_sk = ss_item_sk) AND (ws_customer_sk = ss_customer_sk))], select=[ss_sold_year, ss_item_sk, ss_customer_sk, ss_qty, ss_wc, ss_sp, ws_sold_year, ws_item_sk, ws_customer_sk, ws_qty, ws_wc, ws_sp], build=[right])\n:     :- HashAggregate(isMerge=[false], groupBy=[ss_sold_year, ss_item_sk, ss_customer_sk], select=[ss_sold_year, ss_item_sk, ss_customer_sk, SUM(ss_quantity) AS ss_qty, SUM(ss_wholesale_cost) AS ss_wc, SUM(ss_sales_price) AS ss_sp])\n:     :  +- [#2] Exchange(distribution=[hash[ss_sold_year, ss_item_sk, ss_customer_sk]])\n:     +- HashAggregate(isMerge=[true], groupBy=[ws_sold_year, ws_item_sk, ws_customer_sk], select=[ws_sold_year, ws_item_sk, ws_customer_sk, Final_SUM(sum$0) AS ws_qty, Final_SUM(sum$1) AS ws_wc, Final_SUM(sum$2) AS ws_sp])\n:        +- [#3] Exchange(distribution=[hash[ws_sold_year, ws_item_sk, ws_customer_sk]])\n+- HashAggregate(isMerge=[true], groupBy=[cs_sold_year, cs_item_sk, cs_customer_sk], select=[cs_sold_year, cs_item_sk, cs_customer_sk, Final_SUM(sum$0) AS cs_qty, Final_SUM(sum$1) AS cs_wc, Final_SUM(sum$2) AS cs_sp])\n   +- [#1] Exchange(distribution=[hash[cs_sold_year, cs_item_sk, cs_customer_sk]])\n])
            :- Exchange(distribution=[hash[cs_sold_year, cs_item_sk, cs_customer_sk]])
            :  +- LocalHashAggregate(groupBy=[cs_sold_year, cs_item_sk, cs_customer_sk], select=[cs_sold_year, cs_item_sk, cs_customer_sk, Partial_SUM(cs_quantity) AS sum$0, Partial_SUM(cs_wholesale_cost) AS sum$1, Partial_SUM(cs_sales_price) AS sum$2])
            :     +- Calc(select=[d_year AS cs_sold_year, cs_item_sk, cs_bill_customer_sk AS cs_customer_sk, cs_quantity, cs_wholesale_cost, cs_sales_price])
            :        +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_wholesale_cost, cs_sales_price, d_date_sk, d_year], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_quantity, cs_wholesale_cost, cs_sales_price], where=[cr_order_number IS NULL])\n:  +- HashJoin(joinType=[LeftOuterJoin], where=[((cr_order_number = cs_order_number) AND (cs_item_sk = cr_item_sk))], select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_sales_price, cr_item_sk, cr_order_number], build=[right])\n:     :- [#2] Exchange(distribution=[hash[cs_order_number, cs_item_sk]])\n:     +- [#3] Exchange(distribution=[hash[cr_order_number, cr_item_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :           :- Exchange(distribution=[broadcast])
            :           :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
            :           :- Exchange(distribution=[hash[cs_order_number, cs_item_sk]])
            :           :  +- Calc(select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_sales_price], where=[cs_sold_date_sk IS NOT NULL])
            :           :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_sales_price]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, cs_order_number, cs_quantity, cs_wholesale_cost, cs_sales_price])
            :           +- Exchange(distribution=[hash[cr_order_number, cr_item_sk]])
            :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns, project=[cr_item_sk, cr_order_number]]], fields=[cr_item_sk, cr_order_number])
            :- Exchange(distribution=[hash[ss_sold_year, ss_item_sk, ss_customer_sk]])
            :  +- Calc(select=[CAST(2000 AS INTEGER) AS ss_sold_year, ss_item_sk, ss_customer_sk, ss_quantity, ss_wholesale_cost, ss_sales_price])
            :     +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_quantity, ss_wholesale_cost, ss_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_quantity, ss_wholesale_cost, ss_sales_price], where=[sr_ticket_number IS NULL])\n:  +- HashJoin(joinType=[LeftOuterJoin], where=[((sr_ticket_number = ss_ticket_number) AND (ss_item_sk = sr_item_sk))], select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_sales_price, sr_item_sk, sr_ticket_number], build=[right])\n:     :- [#2] Exchange(distribution=[hash[ss_ticket_number, ss_item_sk]])\n:     +- [#3] Exchange(distribution=[hash[sr_ticket_number, sr_item_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :        :- Exchange(distribution=[broadcast])
            :        :  +- Calc(select=[d_date_sk], where=[(d_year = 2000)])
            :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
            :        :- Exchange(distribution=[hash[ss_ticket_number, ss_item_sk]])
            :        :  +- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_sales_price], where=[ss_sold_date_sk IS NOT NULL])
            :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, ss_ticket_number, ss_quantity, ss_wholesale_cost, ss_sales_price])
            :        +- Exchange(distribution=[hash[sr_ticket_number, sr_item_sk]])
            :           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_item_sk, sr_ticket_number]]], fields=[sr_item_sk, sr_ticket_number])
            +- Exchange(distribution=[hash[ws_sold_year, ws_item_sk, ws_customer_sk]])
               +- LocalHashAggregate(groupBy=[ws_sold_year, ws_item_sk, ws_customer_sk], select=[ws_sold_year, ws_item_sk, ws_customer_sk, Partial_SUM(ws_quantity) AS sum$0, Partial_SUM(ws_wholesale_cost) AS sum$1, Partial_SUM(ws_sales_price) AS sum$2])
                  +- Calc(select=[d_year AS ws_sold_year, ws_item_sk, ws_bill_customer_sk AS ws_customer_sk, ws_quantity, ws_wholesale_cost, ws_sales_price])
                     +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_wholesale_cost, ws_sales_price, d_date_sk, d_year], isBroadcast=[true], build=[right])\n:- Calc(select=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_quantity, ws_wholesale_cost, ws_sales_price], where=[wr_order_number IS NULL])\n:  +- HashJoin(joinType=[LeftOuterJoin], where=[((wr_order_number = ws_order_number) AND (ws_item_sk = wr_item_sk))], select=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_sales_price, wr_item_sk, wr_order_number], build=[right])\n:     :- [#2] Exchange(distribution=[hash[ws_order_number, ws_item_sk]])\n:     +- [#3] Exchange(distribution=[hash[wr_order_number, wr_item_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :- Exchange(distribution=[broadcast])
                        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
                        :- Exchange(distribution=[hash[ws_order_number, ws_item_sk]])
                        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_sales_price]]], fields=[ws_sold_date_sk, ws_item_sk, ws_bill_customer_sk, ws_order_number, ws_quantity, ws_wholesale_cost, ws_sales_price])
                        +- Exchange(distribution=[hash[wr_order_number, wr_item_sk]])
                           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_returns, project=[wr_item_sk, wr_order_number]]], fields=[wr_item_sk, wr_order_number])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q79]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query79.tpl and seed 2031708268
select 
  c_last_name,c_first_name,substr(s_city,1,30),ss_ticket_number,amt,profit
  from
   (select ss_ticket_number
          ,ss_customer_sk
          ,store.s_city
          ,sum(ss_coupon_amt) amt
          ,sum(ss_net_profit) profit
    from store_sales,date_dim,store,household_demographics
    where store_sales.ss_sold_date_sk = date_dim.d_date_sk
    and store_sales.ss_store_sk = store.s_store_sk  
    and store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk
    and (household_demographics.hd_dep_count = 8 or household_demographics.hd_vehicle_count > 0)
    and date_dim.d_dow = 1
    and date_dim.d_year in (1998,1998+1,1998+2) 
    and store.s_number_employees between 200 and 295
    group by ss_ticket_number,ss_customer_sk,ss_addr_sk,store.s_city) ms,customer
    where ss_customer_sk = c_customer_sk
 order by c_last_name,c_first_name,substr(s_city,1,30), profit
limit 100

-- end query 1 in stream 0 using template query79.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$5], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalProject(c_last_name=[$14], c_first_name=[$13], EXPR$2=[SUBSTR($2, 1, 30)], ss_ticket_number=[$0], amt=[$3], profit=[$4])
   +- LogicalFilter(condition=[=($1, $5)])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(ss_ticket_number=[$0], ss_customer_sk=[$1], s_city=[$3], amt=[$4], profit=[$5])
         :  +- LogicalAggregate(group=[{0, 1, 2, 3}], amt=[SUM($4)], profit=[SUM($5)])
         :     +- LogicalProject(ss_ticket_number=[$9], ss_customer_sk=[$3], ss_addr_sk=[$6], s_city=[$73], ss_coupon_amt=[$19], ss_net_profit=[$22])
         :        +- LogicalFilter(condition=[AND(=($0, $23), =($7, $51), =($5, $80), OR(=($83, 8), >($84, 0)), =($30, 1), OR(=($29, 1998), =($29, +(1998, 1)), =($29, +(1998, 2))), >=($57, 200), <=($57, 295))])
         :           +- LogicalJoin(condition=[true], joinType=[inner])
         :              :- LogicalJoin(condition=[true], joinType=[inner])
         :              :  :- LogicalJoin(condition=[true], joinType=[inner])
         :              :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :              :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
         :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
         +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[c_last_name ASC, c_first_name ASC, EXPR$2 ASC, profit ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[c_last_name ASC, c_first_name ASC, EXPR$2 ASC, profit ASC], offset=[0], fetch=[100], global=[false])
      +- Calc(select=[c_last_name, c_first_name, SUBSTR(s_city, 1, 30) AS EXPR$2, ss_ticket_number, amt, profit])
         +- HashJoin(joinType=[InnerJoin], where=[(ss_customer_sk = c_customer_sk)], select=[ss_ticket_number, ss_customer_sk, s_city, amt, profit, c_customer_sk, c_first_name, c_last_name], build=[right])
            :- Exchange(distribution=[hash[ss_customer_sk]])
            :  +- Calc(select=[ss_ticket_number, ss_customer_sk, s_city, amt, profit])
            :     +- HashAggregate(isMerge=[false], groupBy=[ss_ticket_number, ss_customer_sk, ss_addr_sk, s_city], select=[ss_ticket_number, ss_customer_sk, ss_addr_sk, s_city, SUM(ss_coupon_amt) AS amt, SUM(ss_net_profit) AS profit])
            :        +- Exchange(distribution=[hash[ss_ticket_number, ss_customer_sk, ss_addr_sk, s_city]])
            :           +- Calc(select=[ss_ticket_number, ss_customer_sk, ss_addr_sk, s_city, ss_coupon_amt, ss_net_profit])
            :              +- MultipleInput(readOrder=[0,0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_customer_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit, s_store_sk, s_city], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_customer_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_hdemo_sk = hd_demo_sk)], select=[ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit, hd_demo_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit, d_date_sk], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit], where=[ss_sold_date_sk IS NOT NULL])\n:     :     :  +- [#4] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :                 :- Exchange(distribution=[broadcast])
            :                 :  +- Calc(select=[s_store_sk, s_city], where=[SEARCH(s_number_employees, Sarg[[200..295]])])
            :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_number_employees, s_city]]], fields=[s_store_sk, s_number_employees, s_city])
            :                 :- Exchange(distribution=[broadcast])
            :                 :  +- Calc(select=[hd_demo_sk], where=[((hd_dep_count = 8) OR (hd_vehicle_count > 0))])
            :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, household_demographics, project=[hd_demo_sk, hd_dep_count, hd_vehicle_count]]], fields=[hd_demo_sk, hd_dep_count, hd_vehicle_count])
            :                 :- Exchange(distribution=[broadcast])
            :                 :  +- Calc(select=[d_date_sk], where=[(SEARCH(d_dow, Sarg[1]) AND SEARCH(d_year, Sarg[1998, 1999, 2000]))])
            :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_dow]]], fields=[d_date_sk, d_year, d_dow])
            :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit]]], fields=[ss_sold_date_sk, ss_customer_sk, ss_hdemo_sk, ss_addr_sk, ss_store_sk, ss_ticket_number, ss_coupon_amt, ss_net_profit])
            +- Exchange(distribution=[hash[c_customer_sk]])
               +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_first_name, c_last_name]]], fields=[c_customer_sk, c_first_name, c_last_name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q7]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query7.tpl and seed 1930872976
select  i_item_id, 
        avg(ss_quantity) agg1,
        avg(ss_list_price) agg2,
        avg(ss_coupon_amt) agg3,
        avg(ss_sales_price) agg4 
 from store_sales, customer_demographics, date_dim, item, promotion
 where ss_sold_date_sk = d_date_sk and
       ss_item_sk = i_item_sk and
       ss_cdemo_sk = cd_demo_sk and
       ss_promo_sk = p_promo_sk and
       cd_gender = 'F' and 
       cd_marital_status = 'W' and
       cd_education_status = 'Primary' and
       (p_channel_email = 'N' or p_channel_event = 'N') and
       d_year = 1998 
 group by i_item_id
 order by i_item_id
 limit 100

-- end query 1 in stream 0 using template query7.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}], agg1=[AVG($1)], agg2=[AVG($2)], agg3=[AVG($3)], agg4=[AVG($4)])
   +- LogicalProject(i_item_id=[$61], ss_quantity=[$10], ss_list_price=[$12], ss_coupon_amt=[$19], ss_sales_price=[$13])
      +- LogicalFilter(condition=[AND(=($0, $32), =($2, $60), =($4, $23), =($8, $82), =($24, _UTF-16LE'F'), =($25, _UTF-16LE'W'), =($26, _UTF-16LE'Primary'), OR(=($91, _UTF-16LE'N'), =($96, _UTF-16LE'N')), =($38, 1998))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
            :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, promotion]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[i_item_id ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_item_id ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_AVG(sum$0, count$1) AS agg1, Final_AVG(sum$2, count$3) AS agg2, Final_AVG(sum$4, count$5) AS agg3, Final_AVG(sum$6, count$7) AS agg4])
         +- Exchange(distribution=[hash[i_item_id]])
            +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_AVG(ss_quantity) AS (sum$0, count$1), Partial_AVG(ss_list_price) AS (sum$2, count$3), Partial_AVG(ss_coupon_amt) AS (sum$4, count$5), Partial_AVG(ss_sales_price) AS (sum$6, count$7)])
               +- Calc(select=[i_item_id, ss_quantity, ss_list_price, ss_coupon_amt, ss_sales_price])
                  +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, i_item_sk, i_item_id], build=[right])
                     :- Exchange(distribution=[hash[ss_item_sk]])
                     :  +- Calc(select=[ss_item_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt])
                     :     +- MultipleInput(readOrder=[0,0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_promo_sk = p_promo_sk)], select=[ss_item_sk, ss_promo_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, p_promo_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_item_sk, ss_promo_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_promo_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, d_date_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_promo_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_cdemo_sk = cd_demo_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_promo_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt, cd_demo_sk], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_promo_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt], where=[ss_cdemo_sk IS NOT NULL])\n:     :     :  +- [#4] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_promo_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt]]], fields=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_promo_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :        :- Exchange(distribution=[broadcast])
                     :        :  +- Calc(select=[p_promo_sk], where=[((p_channel_email = 'N') OR (p_channel_event = 'N'))])
                     :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, promotion, project=[p_promo_sk, p_channel_email, p_channel_event]]], fields=[p_promo_sk, p_channel_email, p_channel_event])
                     :        :- Exchange(distribution=[broadcast])
                     :        :  +- Calc(select=[d_date_sk], where=[(d_year = 1998)])
                     :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
                     :        :- Exchange(distribution=[broadcast])
                     :        :  +- Calc(select=[cd_demo_sk], where=[((cd_gender = 'F') AND (cd_marital_status = 'W') AND (cd_education_status = 'Primary'))])
                     :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status]]], fields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status])
                     :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_promo_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt]]], fields=[ss_sold_date_sk, ss_item_sk, ss_cdemo_sk, ss_promo_sk, ss_quantity, ss_list_price, ss_sales_price, ss_coupon_amt])
                     +- Exchange(distribution=[hash[i_item_sk]])
                        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q80]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query80.tpl and seed 1819994127
with ssr as
 (select  s_store_id as store_id,
          sum(ss_ext_sales_price) as sales,
          sum(coalesce(sr_return_amt, 0)) as `returns`,
          sum(ss_net_profit - coalesce(sr_net_loss, 0)) as profit
  from store_sales left outer join store_returns on
         (ss_item_sk = sr_item_sk and ss_ticket_number = sr_ticket_number),
     date_dim,
     store,
     item,
     promotion
 where ss_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  interval '30' day)
       and ss_store_sk = s_store_sk
       and ss_item_sk = i_item_sk
       and i_current_price > 50
       and ss_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
 group by s_store_id)
 ,
 csr as
 (select  cp_catalog_page_id as catalog_page_id,
          sum(cs_ext_sales_price) as sales,
          sum(coalesce(cr_return_amount, 0)) as `returns`,
          sum(cs_net_profit - coalesce(cr_net_loss, 0)) as profit
  from catalog_sales left outer join catalog_returns on
         (cs_item_sk = cr_item_sk and cs_order_number = cr_order_number),
     date_dim,
     catalog_page,
     item,
     promotion
 where cs_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  interval '30' day)
        and cs_catalog_page_sk = cp_catalog_page_sk
       and cs_item_sk = i_item_sk
       and i_current_price > 50
       and cs_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
group by cp_catalog_page_id)
 ,
 wsr as
 (select  web_site_id,
          sum(ws_ext_sales_price) as sales,
          sum(coalesce(wr_return_amt, 0)) as `returns`,
          sum(ws_net_profit - coalesce(wr_net_loss, 0)) as profit
  from web_sales left outer join web_returns on
         (ws_item_sk = wr_item_sk and ws_order_number = wr_order_number),
     date_dim,
     web_site,
     item,
     promotion
 where ws_sold_date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  interval '30' day)
        and ws_web_site_sk = web_site_sk
       and ws_item_sk = i_item_sk
       and i_current_price > 50
       and ws_promo_sk = p_promo_sk
       and p_channel_tv = 'N'
group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(`returns`) as `returns`
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || store_id as id
        , sales
        , `returns`
        , profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || catalog_page_id as id
        , sales
        , `returns`
        , profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , `returns`
        , profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100

-- end query 1 in stream 0 using template query80.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], sales=[SUM($2)], returns=[SUM($3)], profit=[SUM($4)])
   +- LogicalUnion(all=[true])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(channel=[_UTF-16LE'store channel'], id=[||(_UTF-16LE'store', $0)], sales=[$1], returns=[$2], profit=[$3])
      :  :  +- LogicalAggregate(group=[{0}], sales=[SUM($1)], returns=[SUM($2)], profit=[SUM($3)])
      :  :     +- LogicalProject(store_id=[$72], ss_ext_sales_price=[$15], $f2=[coalesce($34, 0:DOUBLE)], $f3=[-($22, coalesce($42, 0:DOUBLE))])
      :  :        +- LogicalFilter(condition=[AND(=($0, $43), >=($45, CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL), <=($45, +(CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL, 2592000000:INTERVAL DAY)), =($7, $71), =($2, $100), >($105, 50), =($8, $122), =($133, _UTF-16LE'N'))])
      :  :           +- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :  :  :  :- LogicalJoin(condition=[AND(=($2, $25), =($9, $32))], joinType=[left])
      :  :              :  :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
      :  :              :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
      :  :              :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      :  :              :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
      :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
      :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, promotion]])
      :  +- LogicalProject(channel=[_UTF-16LE'catalog channel'], id=[||(_UTF-16LE'catalog_page', $0)], sales=[$1], returns=[$2], profit=[$3])
      :     +- LogicalAggregate(group=[{0}], sales=[SUM($1)], returns=[SUM($2)], profit=[SUM($3)])
      :        +- LogicalProject(catalog_page_id=[$90], cs_ext_sales_price=[$23], $f2=[coalesce($52, 0:DOUBLE)], $f3=[-($33, coalesce($60, 0:DOUBLE))])
      :           +- LogicalFilter(condition=[AND(=($0, $61), >=($63, CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL), <=($63, +(CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL, 2592000000:INTERVAL DAY)), =($12, $89), =($15, $98), >($103, 50), =($16, $120), =($131, _UTF-16LE'N'))])
      :              +- LogicalJoin(condition=[true], joinType=[inner])
      :                 :- LogicalJoin(condition=[true], joinType=[inner])
      :                 :  :- LogicalJoin(condition=[true], joinType=[inner])
      :                 :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :                 :  :  :  :- LogicalJoin(condition=[AND(=($15, $36), =($17, $50))], joinType=[left])
      :                 :  :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
      :                 :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns]])
      :                 :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
      :                 :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_page]])
      :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
      :                 +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, promotion]])
      +- LogicalProject(channel=[_UTF-16LE'web channel'], id=[||(_UTF-16LE'web_site', $0)], sales=[$1], returns=[$2], profit=[$3])
         +- LogicalAggregate(group=[{0}], sales=[SUM($1)], returns=[SUM($2)], profit=[SUM($3)])
            +- LogicalProject(web_site_id=[$87], ws_ext_sales_price=[$23], $f2=[coalesce($49, 0:DOUBLE)], $f3=[-($33, coalesce($57, 0:DOUBLE))])
               +- LogicalFilter(condition=[AND(=($0, $58), >=($60, CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL), <=($60, +(CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL, 2592000000:INTERVAL DAY)), =($13, $86), =($3, $112), >($117, 50), =($16, $134), =($145, _UTF-16LE'N'))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :  :  :- LogicalJoin(condition=[AND(=($3, $36), =($17, $47))], joinType=[left])
                     :  :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                     :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_returns]])
                     :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                     :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_site]])
                     :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, promotion]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[channel, id, sales, returns, profit])
+- SortLimit(orderBy=[channel ASC, id ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[channel ASC, id ASC], offset=[0], fetch=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[channel, id, $e], select=[channel, id, $e, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS returns, Final_SUM(sum$2) AS profit])
            +- Exchange(distribution=[hash[channel, id, $e]])
               +- LocalHashAggregate(groupBy=[channel, id, $e], select=[channel, id, $e, Partial_SUM(sales) AS sum$0, Partial_SUM(returns) AS sum$1, Partial_SUM(profit) AS sum$2])
                  +- Expand(projects=[{channel, id, sales, returns, profit, 0 AS $e}, {channel, null AS id, sales, returns, profit, 1 AS $e}, {null AS channel, null AS id, sales, returns, profit, 3 AS $e}])
                     +- Union(all=[true], union=[channel, id, sales, returns, profit])
                        :- Union(all=[true], union=[channel, id, sales, returns, profit])
                        :  :- Calc(select=['store channel' AS channel, ||('store', store_id) AS id, sales, returns, profit])
                        :  :  +- HashAggregate(isMerge=[true], groupBy=[store_id], select=[store_id, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS returns, Final_SUM(sum$2) AS profit])
                        :  :     +- Exchange(distribution=[hash[store_id]])
                        :  :        +- LocalHashAggregate(groupBy=[store_id], select=[store_id, Partial_SUM(ss_ext_sales_price) AS sum$0, Partial_SUM($f2) AS sum$1, Partial_SUM($f3) AS sum$2])
                        :  :           +- Calc(select=[s_store_id AS store_id, ss_ext_sales_price, coalesce(sr_return_amt, 0) AS $f2, (ss_net_profit - coalesce(sr_net_loss, 0)) AS $f3])
                        :  :              +- MultipleInput(readOrder=[0,0,0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, ss_ext_sales_price, ss_net_profit, sr_return_amt, sr_net_loss, s_store_sk, s_store_id], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk, ss_ext_sales_price, ss_net_profit, sr_return_amt, sr_net_loss])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit, sr_return_amt, sr_net_loss, i_item_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_item_sk, ss_store_sk, ss_ext_sales_price, ss_net_profit, sr_return_amt, sr_net_loss])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_promo_sk = p_promo_sk)], select=[ss_item_sk, ss_store_sk, ss_promo_sk, ss_ext_sales_price, ss_net_profit, sr_return_amt, sr_net_loss, p_promo_sk], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[ss_item_sk, ss_store_sk, ss_promo_sk, ss_ext_sales_price, ss_net_profit, sr_return_amt, sr_net_loss])\n:     :     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_promo_sk, ss_ext_sales_price, ss_net_profit, sr_return_amt, sr_net_loss, d_date_sk], isBroadcast=[true], build=[right])\n:     :     :     :- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_promo_sk, ss_ext_sales_price, ss_net_profit, sr_return_amt, sr_net_loss])\n:     :     :     :  +- HashJoin(joinType=[LeftOuterJoin], where=[((ss_item_sk = sr_item_sk) AND (ss_ticket_number = sr_ticket_number))], select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_ext_sales_price, ss_net_profit, sr_item_sk, sr_ticket_number, sr_return_amt, sr_net_loss], build=[right])\n:     :     :     :     :- [#5] Exchange(distribution=[hash[ss_item_sk]])\n:     :     :     :     +- [#6] Exchange(distribution=[hash[sr_item_sk]])\n:     :     :     +- [#4] Exchange(distribution=[broadcast])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :  :                 :- Exchange(distribution=[broadcast])
                        :  :                 :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_store_id]]], fields=[s_store_sk, s_store_id])
                        :  :                 :- Exchange(distribution=[broadcast])(reuse_id=[1])
                        :  :                 :  +- Calc(select=[i_item_sk], where=[SEARCH(i_current_price, Sarg[(50..+∞)])])
                        :  :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_current_price]]], fields=[i_item_sk, i_current_price])
                        :  :                 :- Exchange(distribution=[broadcast])(reuse_id=[2])
                        :  :                 :  +- Calc(select=[p_promo_sk], where=[SEARCH(p_channel_tv, Sarg[_UTF-16LE'N'])])
                        :  :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, promotion, project=[p_promo_sk, p_channel_tv]]], fields=[p_promo_sk, p_channel_tv])
                        :  :                 :- Exchange(distribution=[broadcast])(reuse_id=[3])
                        :  :                 :  +- Calc(select=[d_date_sk], where=[SEARCH(d_date, Sarg[[1998-08-04..1998-09-03]])])
                        :  :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
                        :  :                 :- Exchange(distribution=[hash[ss_item_sk]])
                        :  :                 :  +- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_ext_sales_price, ss_net_profit], where=[ss_sold_date_sk IS NOT NULL])
                        :  :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_ext_sales_price, ss_net_profit]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_promo_sk, ss_ticket_number, ss_ext_sales_price, ss_net_profit])
                        :  :                 +- Exchange(distribution=[hash[sr_item_sk]])
                        :  :                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_item_sk, sr_ticket_number, sr_return_amt, sr_net_loss]]], fields=[sr_item_sk, sr_ticket_number, sr_return_amt, sr_net_loss])
                        :  +- Calc(select=['catalog channel' AS channel, ||('catalog_page', catalog_page_id) AS id, sales, returns, profit])
                        :     +- HashAggregate(isMerge=[true], groupBy=[catalog_page_id], select=[catalog_page_id, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS returns, Final_SUM(sum$2) AS profit])
                        :        +- Exchange(distribution=[hash[catalog_page_id]])
                        :           +- LocalHashAggregate(groupBy=[catalog_page_id], select=[catalog_page_id, Partial_SUM(cs_ext_sales_price) AS sum$0, Partial_SUM($f2) AS sum$1, Partial_SUM($f3) AS sum$2])
                        :              +- Calc(select=[cp_catalog_page_id AS catalog_page_id, cs_ext_sales_price, coalesce(cr_return_amount, 0) AS $f2, (cs_net_profit - coalesce(cr_net_loss, 0)) AS $f3])
                        :                 +- MultipleInput(readOrder=[0,0,0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_catalog_page_sk = cp_catalog_page_sk)], select=[cs_catalog_page_sk, cs_ext_sales_price, cs_net_profit, cr_return_amount, cr_net_loss, cp_catalog_page_sk, cp_catalog_page_id], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_catalog_page_sk, cs_ext_sales_price, cs_net_profit, cr_return_amount, cr_net_loss])\n:  +- HashJoin(joinType=[InnerJoin], where=[(cs_item_sk = i_item_sk)], select=[cs_catalog_page_sk, cs_item_sk, cs_ext_sales_price, cs_net_profit, cr_return_amount, cr_net_loss, i_item_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[cs_catalog_page_sk, cs_item_sk, cs_ext_sales_price, cs_net_profit, cr_return_amount, cr_net_loss])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(cs_promo_sk = p_promo_sk)], select=[cs_catalog_page_sk, cs_item_sk, cs_promo_sk, cs_ext_sales_price, cs_net_profit, cr_return_amount, cr_net_loss, p_promo_sk], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[cs_catalog_page_sk, cs_item_sk, cs_promo_sk, cs_ext_sales_price, cs_net_profit, cr_return_amount, cr_net_loss])\n:     :     :  +- HashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_catalog_page_sk, cs_item_sk, cs_promo_sk, cs_ext_sales_price, cs_net_profit, cr_return_amount, cr_net_loss, d_date_sk], isBroadcast=[true], build=[right])\n:     :     :     :- Calc(select=[cs_sold_date_sk, cs_catalog_page_sk, cs_item_sk, cs_promo_sk, cs_ext_sales_price, cs_net_profit, cr_return_amount, cr_net_loss])\n:     :     :     :  +- HashJoin(joinType=[LeftOuterJoin], where=[((cs_item_sk = cr_item_sk) AND (cs_order_number = cr_order_number))], select=[cs_sold_date_sk, cs_catalog_page_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_ext_sales_price, cs_net_profit, cr_item_sk, cr_order_number, cr_return_amount, cr_net_loss], build=[right])\n:     :     :     :     :- [#5] Exchange(distribution=[hash[cs_item_sk]])\n:     :     :     :     +- [#6] Exchange(distribution=[hash[cr_item_sk]])\n:     :     :     +- [#4] Exchange(distribution=[broadcast])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                        :                    :- Exchange(distribution=[broadcast])
                        :                    :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_page, project=[cp_catalog_page_sk, cp_catalog_page_id]]], fields=[cp_catalog_page_sk, cp_catalog_page_id])
                        :                    :- Reused(reference_id=[1])
                        :                    :- Reused(reference_id=[2])
                        :                    :- Reused(reference_id=[3])
                        :                    :- Exchange(distribution=[hash[cs_item_sk]])
                        :                    :  +- Calc(select=[cs_sold_date_sk, cs_catalog_page_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_ext_sales_price, cs_net_profit], where=[cs_sold_date_sk IS NOT NULL])
                        :                    :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_catalog_page_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_ext_sales_price, cs_net_profit]]], fields=[cs_sold_date_sk, cs_catalog_page_sk, cs_item_sk, cs_promo_sk, cs_order_number, cs_ext_sales_price, cs_net_profit])
                        :                    +- Exchange(distribution=[hash[cr_item_sk]])
                        :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns, project=[cr_item_sk, cr_order_number, cr_return_amount, cr_net_loss]]], fields=[cr_item_sk, cr_order_number, cr_return_amount, cr_net_loss])
                        +- Calc(select=['web channel' AS channel, ||('web_site', web_site_id) AS id, sales, returns, profit])
                           +- HashAggregate(isMerge=[true], groupBy=[web_site_id], select=[web_site_id, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS returns, Final_SUM(sum$2) AS profit])
                              +- Exchange(distribution=[hash[web_site_id]])
                                 +- LocalHashAggregate(groupBy=[web_site_id], select=[web_site_id, Partial_SUM(ws_ext_sales_price) AS sum$0, Partial_SUM($f2) AS sum$1, Partial_SUM($f3) AS sum$2])
                                    +- Calc(select=[web_site_id, ws_ext_sales_price, coalesce(wr_return_amt, 0) AS $f2, (ws_net_profit - coalesce(wr_net_loss, 0)) AS $f3])
                                       +- MultipleInput(readOrder=[0,0,0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_web_site_sk = web_site_sk)], select=[ws_web_site_sk, ws_ext_sales_price, ws_net_profit, wr_return_amt, wr_net_loss, web_site_sk, web_site_id], isBroadcast=[true], build=[right])\n:- Calc(select=[ws_web_site_sk, ws_ext_sales_price, ws_net_profit, wr_return_amt, wr_net_loss])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ws_item_sk = i_item_sk)], select=[ws_item_sk, ws_web_site_sk, ws_ext_sales_price, ws_net_profit, wr_return_amt, wr_net_loss, i_item_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ws_item_sk, ws_web_site_sk, ws_ext_sales_price, ws_net_profit, wr_return_amt, wr_net_loss])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ws_promo_sk = p_promo_sk)], select=[ws_item_sk, ws_web_site_sk, ws_promo_sk, ws_ext_sales_price, ws_net_profit, wr_return_amt, wr_net_loss, p_promo_sk], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[ws_item_sk, ws_web_site_sk, ws_promo_sk, ws_ext_sales_price, ws_net_profit, wr_return_amt, wr_net_loss])\n:     :     :  +- HashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_web_site_sk, ws_promo_sk, ws_ext_sales_price, ws_net_profit, wr_return_amt, wr_net_loss, d_date_sk], isBroadcast=[true], build=[right])\n:     :     :     :- Calc(select=[ws_sold_date_sk, ws_item_sk, ws_web_site_sk, ws_promo_sk, ws_ext_sales_price, ws_net_profit, wr_return_amt, wr_net_loss])\n:     :     :     :  +- HashJoin(joinType=[LeftOuterJoin], where=[((ws_item_sk = wr_item_sk) AND (ws_order_number = wr_order_number))], select=[ws_sold_date_sk, ws_item_sk, ws_web_site_sk, ws_promo_sk, ws_order_number, ws_ext_sales_price, ws_net_profit, wr_item_sk, wr_order_number, wr_return_amt, wr_net_loss], build=[right])\n:     :     :     :     :- [#5] Exchange(distribution=[hash[ws_item_sk]])\n:     :     :     :     +- [#6] Exchange(distribution=[hash[wr_item_sk]])\n:     :     :     +- [#4] Exchange(distribution=[broadcast])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                          :- Exchange(distribution=[broadcast])
                                          :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_site, project=[web_site_sk, web_site_id]]], fields=[web_site_sk, web_site_id])
                                          :- Reused(reference_id=[1])
                                          :- Reused(reference_id=[2])
                                          :- Reused(reference_id=[3])
                                          :- Exchange(distribution=[hash[ws_item_sk]])
                                          :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_web_site_sk, ws_promo_sk, ws_order_number, ws_ext_sales_price, ws_net_profit]]], fields=[ws_sold_date_sk, ws_item_sk, ws_web_site_sk, ws_promo_sk, ws_order_number, ws_ext_sales_price, ws_net_profit])
                                          +- Exchange(distribution=[hash[wr_item_sk]])
                                             +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_returns, project=[wr_item_sk, wr_order_number, wr_return_amt, wr_net_loss]]], fields=[wr_item_sk, wr_order_number, wr_return_amt, wr_net_loss])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q81]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query81.tpl and seed 1819994127
with customer_total_return as
 (select cr_returning_customer_sk as ctr_customer_sk
        ,ca_state as ctr_state, 
 	sum(cr_return_amt_inc_tax) as ctr_total_return
 from catalog_returns
     ,date_dim
     ,customer_address
 where cr_returned_date_sk = d_date_sk 
   and d_year =1998
   and cr_returning_addr_sk = ca_address_sk 
 group by cr_returning_customer_sk
         ,ca_state )
  select  c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
                  ,ca_location_type,ctr_total_return
 from customer_total_return ctr1
     ,customer_address
     ,customer
 where ctr1.ctr_total_return > (select avg(ctr_total_return)*1.2
 			  from customer_total_return ctr2 
                  	  where ctr1.ctr_state = ctr2.ctr_state)
       and ca_address_sk = c_current_addr_sk
       and ca_state = 'IL'
       and ctr1.ctr_customer_sk = c_customer_sk
 order by c_customer_id,c_salutation,c_first_name,c_last_name,ca_street_number,ca_street_name
                   ,ca_street_type,ca_suite_number,ca_city,ca_county,ca_state,ca_zip,ca_country,ca_gmt_offset
                  ,ca_location_type,ctr_total_return
 limit 100

-- end query 1 in stream 0 using template query81.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], sort4=[$4], sort5=[$5], sort6=[$6], sort7=[$7], sort8=[$8], sort9=[$9], sort10=[$10], sort11=[$11], sort12=[$12], sort13=[$13], sort14=[$14], sort15=[$15], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first], dir8=[ASC-nulls-first], dir9=[ASC-nulls-first], dir10=[ASC-nulls-first], dir11=[ASC-nulls-first], dir12=[ASC-nulls-first], dir13=[ASC-nulls-first], dir14=[ASC-nulls-first], dir15=[ASC-nulls-first], fetch=[100])
+- LogicalProject(c_customer_id=[$17], c_salutation=[$23], c_first_name=[$24], c_last_name=[$25], ca_street_number=[$5], ca_street_name=[$6], ca_street_type=[$7], ca_suite_number=[$8], ca_city=[$9], ca_county=[$10], ca_state=[$11], ca_zip=[$12], ca_country=[$13], ca_gmt_offset=[$14], ca_location_type=[$15], ctr_total_return=[$2])
   +- LogicalFilter(condition=[AND(>($2, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*($0, 1.2:DECIMAL(2, 1))])
  LogicalAggregate(group=[{}], agg#0=[AVG($0)])
    LogicalProject(ctr_total_return=[$2])
      LogicalFilter(condition=[=($cor0.ctr_state, $1)])
        LogicalAggregate(group=[{0, 1}], ctr_total_return=[SUM($2)])
          LogicalProject(ctr_customer_sk=[$7], ctr_state=[$63], cr_return_amt_inc_tax=[$20])
            LogicalFilter(condition=[AND(=($0, $27), =($33, 1998), =($10, $55))])
              LogicalJoin(condition=[true], joinType=[inner])
                LogicalJoin(condition=[true], joinType=[inner])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns]])
                  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
})), =($3, $20), =($11, _UTF-16LE'IL'), =($0, $16))], variablesSet=[[$cor0]])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalAggregate(group=[{0, 1}], ctr_total_return=[SUM($2)])
         :  :  +- LogicalProject(ctr_customer_sk=[$7], ctr_state=[$63], cr_return_amt_inc_tax=[$20])
         :  :     +- LogicalFilter(condition=[AND(=($0, $27), =($33, 1998), =($10, $55))])
         :  :        +- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns]])
         :  :           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
         :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
         +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[c_customer_id ASC, c_salutation ASC, c_first_name ASC, c_last_name ASC, ca_street_number ASC, ca_street_name ASC, ca_street_type ASC, ca_suite_number ASC, ca_city ASC, ca_county ASC, ca_state ASC, ca_zip ASC, ca_country ASC, ca_gmt_offset ASC, ca_location_type ASC, ctr_total_return ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[c_customer_id ASC, c_salutation ASC, c_first_name ASC, c_last_name ASC, ca_street_number ASC, ca_street_name ASC, ca_street_type ASC, ca_suite_number ASC, ca_city ASC, ca_county ASC, ca_state ASC, ca_zip ASC, ca_country ASC, ca_gmt_offset ASC, ca_location_type ASC, ctr_total_return ASC], offset=[0], fetch=[100], global=[false])
      +- Calc(select=[c_customer_id, c_salutation, c_first_name, c_last_name, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, CAST('IL' AS VARCHAR(2147483647)) AS ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type, ctr_total_return])
         +- HashJoin(joinType=[InnerJoin], where=[((ctr_state = ctr_state0) AND (ctr_total_return > ($f1 * 1.2)))], select=[ctr_state, ctr_total_return, c_customer_id, c_salutation, c_first_name, c_last_name, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_zip, ca_country, ca_gmt_offset, ca_location_type, ctr_state0, $f1], isBroadcast=[true], build=[right])
            :- Exchange(distribution=[any])
            :  +- Calc(select=[ctr_state, ctr_total_return, c_customer_id, c_salutation, c_first_name, c_last_name, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_zip, ca_country, ca_gmt_offset, ca_location_type])
            :     +- HashJoin(joinType=[InnerJoin], where=[(ctr_customer_sk = c_customer_sk)], select=[ctr_customer_sk, ctr_state, ctr_total_return, c_customer_sk, c_customer_id, c_salutation, c_first_name, c_last_name, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_zip, ca_country, ca_gmt_offset, ca_location_type], build=[right])
            :        :- Exchange(distribution=[hash[ctr_customer_sk]])
            :        :  +- HashAggregate(isMerge=[false], groupBy=[ctr_customer_sk, ctr_state], select=[ctr_customer_sk, ctr_state, SUM(cr_return_amt_inc_tax) AS ctr_total_return])
            :        :     +- Exchange(distribution=[hash[ctr_customer_sk, ctr_state]])
            :        :        +- Calc(select=[cr_returning_customer_sk AS ctr_customer_sk, ca_state AS ctr_state, cr_return_amt_inc_tax])
            :        :           +- HashJoin(joinType=[InnerJoin], where=[(cr_returning_addr_sk = ca_address_sk)], select=[cr_returning_customer_sk, cr_returning_addr_sk, cr_return_amt_inc_tax, ca_address_sk, ca_state], build=[right])
            :        :              :- Exchange(distribution=[hash[cr_returning_addr_sk]])(reuse_id=[1])
            :        :              :  +- Calc(select=[cr_returning_customer_sk, cr_returning_addr_sk, cr_return_amt_inc_tax])
            :        :              :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(cr_returned_date_sk = d_date_sk)], select=[cr_returned_date_sk, cr_returning_customer_sk, cr_returning_addr_sk, cr_return_amt_inc_tax, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns, project=[cr_returned_date_sk, cr_returning_customer_sk, cr_returning_addr_sk, cr_return_amt_inc_tax]]], fields=[cr_returned_date_sk, cr_returning_customer_sk, cr_returning_addr_sk, cr_return_amt_inc_tax])\n+- [#2] Exchange(distribution=[broadcast])\n])
            :        :              :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns, project=[cr_returned_date_sk, cr_returning_customer_sk, cr_returning_addr_sk, cr_return_amt_inc_tax]]], fields=[cr_returned_date_sk, cr_returning_customer_sk, cr_returning_addr_sk, cr_return_amt_inc_tax])
            :        :              :        +- Exchange(distribution=[broadcast])
            :        :              :           +- Calc(select=[d_date_sk], where=[(d_year = 1998)])
            :        :              :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
            :        :              +- Exchange(distribution=[hash[ca_address_sk]])
            :        :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state]]], fields=[ca_address_sk, ca_state])
            :        +- Exchange(distribution=[hash[c_customer_sk]])
            :           +- Calc(select=[c_customer_sk, c_customer_id, c_salutation, c_first_name, c_last_name, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_zip, ca_country, ca_gmt_offset, ca_location_type])
            :              +- HashJoin(joinType=[InnerJoin], where=[(ca_address_sk = c_current_addr_sk)], select=[c_customer_sk, c_customer_id, c_current_addr_sk, c_salutation, c_first_name, c_last_name, ca_address_sk, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_zip, ca_country, ca_gmt_offset, ca_location_type], build=[right])
            :                 :- Exchange(distribution=[hash[c_current_addr_sk]])
            :                 :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_customer_id, c_current_addr_sk, c_salutation, c_first_name, c_last_name]]], fields=[c_customer_sk, c_customer_id, c_current_addr_sk, c_salutation, c_first_name, c_last_name])
            :                 +- Exchange(distribution=[hash[ca_address_sk]])
            :                    +- Calc(select=[ca_address_sk, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_zip, ca_country, ca_gmt_offset, ca_location_type], where=[(ca_state = 'IL')])
            :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type]]], fields=[ca_address_sk, ca_street_number, ca_street_name, ca_street_type, ca_suite_number, ca_city, ca_county, ca_state, ca_zip, ca_country, ca_gmt_offset, ca_location_type])
            +- Exchange(distribution=[broadcast])
               +- HashAggregate(isMerge=[true], groupBy=[ctr_state], select=[ctr_state, Final_AVG(sum$0, count$1) AS $f1])
                  +- Exchange(distribution=[hash[ctr_state]])
                     +- LocalHashAggregate(groupBy=[ctr_state], select=[ctr_state, Partial_AVG(ctr_total_return) AS (sum$0, count$1)])
                        +- Calc(select=[ctr_state, ctr_total_return])
                           +- HashAggregate(isMerge=[false], groupBy=[ctr_customer_sk, ctr_state], select=[ctr_customer_sk, ctr_state, SUM(cr_return_amt_inc_tax) AS ctr_total_return])
                              +- Exchange(distribution=[hash[ctr_customer_sk, ctr_state]])
                                 +- Calc(select=[cr_returning_customer_sk AS ctr_customer_sk, ca_state AS ctr_state, cr_return_amt_inc_tax])
                                    +- HashJoin(joinType=[InnerJoin], where=[(cr_returning_addr_sk = ca_address_sk)], select=[cr_returning_customer_sk, cr_returning_addr_sk, cr_return_amt_inc_tax, ca_address_sk, ca_state], build=[right])
                                       :- Reused(reference_id=[1])
                                       +- Exchange(distribution=[hash[ca_address_sk]])
                                          +- Calc(select=[ca_address_sk, ca_state], where=[ca_state IS NOT NULL])
                                             +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state]]], fields=[ca_address_sk, ca_state])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q82]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query82.tpl and seed 55585014
select  i_item_id
       ,i_item_desc
       ,i_current_price
 from item, inventory, date_dim, store_sales
 where i_current_price between 30 and 30+30
 and inv_item_sk = i_item_sk
 and d_date_sk=inv_date_sk
 and d_date between cast('2002-05-30' as date) and (cast('2002-05-30' as date) +  interval '60' day)
 and i_manufact_id in (437,129,727,663)
 and inv_quantity_on_hand between 100 and 500
 and ss_item_sk = i_item_sk
 group by i_item_id,i_item_desc,i_current_price
 order by i_item_id
 limit 100

-- end query 1 in stream 0 using template query82.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2}])
   +- LogicalProject(i_item_id=[$1], i_item_desc=[$4], i_current_price=[$5])
      +- LogicalFilter(condition=[AND(>=($5, 30), <=($5, +(30, 30)), =($23, $0), =($26, $22), >=($28, CAST(_UTF-16LE'2002-05-30'):DATE NOT NULL), <=($28, +(CAST(_UTF-16LE'2002-05-30'):DATE NOT NULL, 5184000000:INTERVAL DAY)), OR(=($13, 437), =($13, 129), =($13, 727), =($13, 663)), >=($25, 100), <=($25, 500), =($56, $0))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, inventory]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[i_item_id ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[i_item_id ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[i_item_id, i_item_desc, i_current_price], select=[i_item_id, i_item_desc, i_current_price])
         +- Exchange(distribution=[hash[i_item_id, i_item_desc, i_current_price]])
            +- LocalHashAggregate(groupBy=[i_item_id, i_item_desc, i_current_price], select=[i_item_id, i_item_desc, i_current_price])
               +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, i_item_sk, i_item_id, i_item_desc, i_current_price], isBroadcast=[true], build=[right])\n:- HashAggregate(isMerge=[true], groupBy=[ss_item_sk], select=[ss_item_sk])\n:  +- [#2] Exchange(distribution=[hash[ss_item_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :- Exchange(distribution=[broadcast])
                  :  +- HashAggregate(isMerge=[true], groupBy=[i_item_sk], auxGrouping=[i_item_id, i_item_desc, i_current_price], select=[i_item_sk, i_item_id, i_item_desc, i_current_price])
                  :     +- Exchange(distribution=[hash[i_item_sk]])
                  :        +- LocalHashAggregate(groupBy=[i_item_sk], auxGrouping=[i_item_id, i_item_desc, i_current_price], select=[i_item_sk, i_item_id, i_item_desc, i_current_price])
                  :           +- Calc(select=[i_item_sk, i_item_id, i_item_desc, i_current_price])
                  :              +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(d_date_sk = inv_date_sk)], select=[inv_date_sk, i_item_sk, i_item_id, i_item_desc, i_current_price, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[inv_date_sk, i_item_sk, i_item_id, i_item_desc, i_current_price])\n:  +- HashJoin(joinType=[InnerJoin], where=[(inv_item_sk = i_item_sk)], select=[inv_date_sk, inv_item_sk, i_item_sk, i_item_id, i_item_desc, i_current_price], isBroadcast=[true], build=[right])\n:     :- Calc(select=[inv_date_sk, inv_item_sk], where=[SEARCH(inv_quantity_on_hand, Sarg[[100..500]])])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, inventory, project=[inv_date_sk, inv_item_sk, inv_quantity_on_hand]]], fields=[inv_date_sk, inv_item_sk, inv_quantity_on_hand])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :                 :- Exchange(distribution=[broadcast])
                  :                 :  +- Calc(select=[d_date_sk], where=[SEARCH(d_date, Sarg[[2002-05-30..2002-07-29]])])
                  :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
                  :                 :- Exchange(distribution=[broadcast])
                  :                 :  +- Calc(select=[i_item_sk, i_item_id, i_item_desc, i_current_price], where=[(SEARCH(i_current_price, Sarg[[30..60]]) AND SEARCH(i_manufact_id, Sarg[129, 437, 663, 727]))])
                  :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_manufact_id]]], fields=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_manufact_id])
                  :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, inventory, project=[inv_date_sk, inv_item_sk, inv_quantity_on_hand]]], fields=[inv_date_sk, inv_item_sk, inv_quantity_on_hand])
                  +- Exchange(distribution=[hash[ss_item_sk]])
                     +- LocalHashAggregate(groupBy=[ss_item_sk], select=[ss_item_sk])
                        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_item_sk]]], fields=[ss_item_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q83]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query83.tpl and seed 1930872976
with sr_items as
 (select i_item_id item_id,
        sum(sr_return_quantity) sr_item_qty
 from store_returns,
      item,
      date_dim
 where sr_item_sk = i_item_sk
 and   d_date    in 
	(select d_date
	from date_dim
	where d_week_seq in 
		(select d_week_seq
		from date_dim
	  where d_date in ('1998-01-02','1998-10-15','1998-11-10')))
 and   sr_returned_date_sk   = d_date_sk
 group by i_item_id),
 cr_items as
 (select i_item_id item_id,
        sum(cr_return_quantity) cr_item_qty
 from catalog_returns,
      item,
      date_dim
 where cr_item_sk = i_item_sk
 and   d_date    in 
	(select d_date
	from date_dim
	where d_week_seq in 
		(select d_week_seq
		from date_dim
	  where d_date in ('1998-01-02','1998-10-15','1998-11-10')))
 and   cr_returned_date_sk   = d_date_sk
 group by i_item_id),
 wr_items as
 (select i_item_id item_id,
        sum(wr_return_quantity) wr_item_qty
 from web_returns,
      item,
      date_dim
 where wr_item_sk = i_item_sk
 and   d_date    in 
	(select d_date
	from date_dim
	where d_week_seq in 
		(select d_week_seq
		from date_dim
		where d_date in ('1998-01-02','1998-10-15','1998-11-10')))
 and   wr_returned_date_sk   = d_date_sk
 group by i_item_id)
  select  sr_items.item_id
       ,sr_item_qty
       ,sr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 sr_dev
       ,cr_item_qty
       ,cr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 cr_dev
       ,wr_item_qty
       ,wr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 wr_dev
       ,(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 average
 from sr_items
     ,cr_items
     ,wr_items
 where sr_items.item_id=cr_items.item_id
   and sr_items.item_id=wr_items.item_id 
 order by sr_items.item_id
         ,sr_item_qty
 limit 100

-- end query 1 in stream 0 using template query83.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalProject(item_id=[$0], sr_item_qty=[$1], sr_dev=[*(/(/($1, +(+($1, $3), $5)), 3.0:DECIMAL(2, 1)), 100)], cr_item_qty=[$3], cr_dev=[*(/(/($3, +(+($1, $3), $5)), 3.0:DECIMAL(2, 1)), 100)], wr_item_qty=[$5], wr_dev=[*(/(/($5, +(+($1, $3), $5)), 3.0:DECIMAL(2, 1)), 100)], average=[/(+(+($1, $3), $5), 3.0:DECIMAL(2, 1))])
   +- LogicalFilter(condition=[AND(=($0, $2), =($0, $4))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalAggregate(group=[{0}], sr_item_qty=[SUM($1)])
         :  :  +- LogicalProject(item_id=[$21], sr_return_quantity=[$10])
         :  :     +- LogicalFilter(condition=[AND(=($2, $20), IN($44, {
LogicalProject(d_date=[$2])
  LogicalFilter(condition=[IN($4, {
LogicalProject(d_week_seq=[$4])
  LogicalFilter(condition=[OR(=($2, CAST(_UTF-16LE'1998-01-02'):DATE NOT NULL), =($2, CAST(_UTF-16LE'1998-10-15'):DATE NOT NULL), =($2, CAST(_UTF-16LE'1998-11-10'):DATE NOT NULL))])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
})])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
}), =($0, $42))])
         :  :        +- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :- LogicalJoin(condition=[true], joinType=[inner])
         :  :           :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
         :  :           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
         :  :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         :  +- LogicalAggregate(group=[{0}], cr_item_qty=[SUM($1)])
         :     +- LogicalProject(item_id=[$28], cr_return_quantity=[$17])
         :        +- LogicalFilter(condition=[AND(=($2, $27), IN($51, {
LogicalProject(d_date=[$2])
  LogicalFilter(condition=[IN($4, {
LogicalProject(d_week_seq=[$4])
  LogicalFilter(condition=[OR(=($2, CAST(_UTF-16LE'1998-01-02'):DATE NOT NULL), =($2, CAST(_UTF-16LE'1998-10-15'):DATE NOT NULL), =($2, CAST(_UTF-16LE'1998-11-10'):DATE NOT NULL))])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
})])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
}), =($0, $49))])
         :           +- LogicalJoin(condition=[true], joinType=[inner])
         :              :- LogicalJoin(condition=[true], joinType=[inner])
         :              :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns]])
         :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
         :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         +- LogicalAggregate(group=[{0}], wr_item_qty=[SUM($1)])
            +- LogicalProject(item_id=[$25], wr_return_quantity=[$14])
               +- LogicalFilter(condition=[AND(=($2, $24), IN($48, {
LogicalProject(d_date=[$2])
  LogicalFilter(condition=[IN($4, {
LogicalProject(d_week_seq=[$4])
  LogicalFilter(condition=[OR(=($2, CAST(_UTF-16LE'1998-01-02'):DATE NOT NULL), =($2, CAST(_UTF-16LE'1998-10-15'):DATE NOT NULL), =($2, CAST(_UTF-16LE'1998-11-10'):DATE NOT NULL))])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
})])
    LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
}), =($0, $46))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_returns]])
                     :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[item_id, sr_item_qty, (((sr_item_qty / ((sr_item_qty + cr_item_qty) + wr_item_qty)) / 3.0) * 100) AS sr_dev, cr_item_qty, (((cr_item_qty / ((sr_item_qty + cr_item_qty) + wr_item_qty)) / 3.0) * 100) AS cr_dev, wr_item_qty, (((wr_item_qty / ((sr_item_qty + cr_item_qty) + wr_item_qty)) / 3.0) * 100) AS wr_dev, (((sr_item_qty + cr_item_qty) + wr_item_qty) / 3.0) AS average])
+- SortLimit(orderBy=[item_id ASC, sr_item_qty ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[item_id ASC, sr_item_qty ASC], offset=[0], fetch=[100], global=[false])
         +- MultipleInput(members=[\nSortMergeJoin(joinType=[InnerJoin], where=[(item_id = i_item_id)], select=[item_id, cr_item_qty, sr_item_qty, i_item_id, wr_item_qty])\n:- Calc(select=[i_item_id AS item_id, cr_item_qty, sr_item_qty])\n:  +- SortMergeJoin(joinType=[InnerJoin], where=[(i_item_id0 = i_item_id)], select=[i_item_id, cr_item_qty, i_item_id0, sr_item_qty])\n:     :- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_SUM(sum$0) AS cr_item_qty])\n:     :  +- [#2] Exchange(distribution=[hash[i_item_id]])\n:     +- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_SUM(sum$0) AS sr_item_qty])\n:        +- [#3] Exchange(distribution=[hash[i_item_id]])\n+- HashAggregate(isMerge=[true], groupBy=[i_item_id], select=[i_item_id, Final_SUM(sum$0) AS wr_item_qty])\n   +- [#1] Exchange(distribution=[hash[i_item_id]])\n])
            :- Exchange(distribution=[hash[i_item_id]])
            :  +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_SUM(wr_item_qty) AS sum$0])
            :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(wr_item_sk = i_item_sk)], select=[wr_item_sk, wr_item_qty, i_item_sk, i_item_id], isBroadcast=[true], build=[left])\n:- [#1] Exchange(distribution=[broadcast])\n+- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])\n])
            :        :- Exchange(distribution=[broadcast])
            :        :  +- HashAggregate(isMerge=[true], groupBy=[wr_item_sk], select=[wr_item_sk, Final_SUM(sum$0) AS wr_item_qty])
            :        :     +- Exchange(distribution=[hash[wr_item_sk]])
            :        :        +- LocalHashAggregate(groupBy=[wr_item_sk], select=[wr_item_sk, Partial_SUM(wr_return_quantity) AS sum$0])
            :        :           +- Calc(select=[wr_item_sk, wr_return_quantity])
            :        :              +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(wr_returned_date_sk = d_date_sk)], select=[wr_returned_date_sk, wr_item_sk, wr_return_quantity, d_date_sk, d_date], isBroadcast=[true], build=[right])\n:- Calc(select=[wr_returned_date_sk, wr_item_sk, wr_return_quantity], where=[wr_returned_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_returns, project=[wr_returned_date_sk, wr_item_sk, wr_return_quantity]]], fields=[wr_returned_date_sk, wr_item_sk, wr_return_quantity])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :        :                 :- Exchange(distribution=[broadcast])(reuse_id=[1])
            :        :                 :  +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[LeftSemiJoin], where=[(d_date = d_date0)], select=[d_date_sk, d_date], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])\n+- [#2] Exchange(distribution=[broadcast])\n])
            :        :                 :     :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
            :        :                 :     +- Exchange(distribution=[broadcast])
            :        :                 :        +- Calc(select=[d_date])
            :        :                 :           +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[LeftSemiJoin], where=[(d_week_seq = d_week_seq0)], select=[d_date, d_week_seq], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date, d_week_seq]]], fields=[d_date, d_week_seq])\n+- [#2] Exchange(distribution=[broadcast])\n])
            :        :                 :              :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date, d_week_seq]]], fields=[d_date, d_week_seq])
            :        :                 :              +- Exchange(distribution=[broadcast])
            :        :                 :                 +- Calc(select=[d_week_seq], where=[SEARCH(d_date, Sarg[1998-01-02, 1998-10-15, 1998-11-10])])
            :        :                 :                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date, d_week_seq]]], fields=[d_date, d_week_seq])
            :        :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_returns, project=[wr_returned_date_sk, wr_item_sk, wr_return_quantity]]], fields=[wr_returned_date_sk, wr_item_sk, wr_return_quantity])
            :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])
            :- Exchange(distribution=[hash[i_item_id]])
            :  +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_SUM(cr_item_qty) AS sum$0])
            :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cr_item_sk = i_item_sk)], select=[cr_item_sk, cr_item_qty, i_item_sk, i_item_id], isBroadcast=[true], build=[left])\n:- [#1] Exchange(distribution=[broadcast])\n+- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])\n])
            :        :- Exchange(distribution=[broadcast])
            :        :  +- HashAggregate(isMerge=[true], groupBy=[cr_item_sk], select=[cr_item_sk, Final_SUM(sum$0) AS cr_item_qty])
            :        :     +- Exchange(distribution=[hash[cr_item_sk]])
            :        :        +- LocalHashAggregate(groupBy=[cr_item_sk], select=[cr_item_sk, Partial_SUM(cr_return_quantity) AS sum$0])
            :        :           +- Calc(select=[cr_item_sk, cr_return_quantity])
            :        :              +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(cr_returned_date_sk = d_date_sk)], select=[cr_returned_date_sk, cr_item_sk, cr_return_quantity, d_date_sk, d_date], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns, project=[cr_returned_date_sk, cr_item_sk, cr_return_quantity]]], fields=[cr_returned_date_sk, cr_item_sk, cr_return_quantity])\n+- [#2] Exchange(distribution=[broadcast])\n])
            :        :                 :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns, project=[cr_returned_date_sk, cr_item_sk, cr_return_quantity]]], fields=[cr_returned_date_sk, cr_item_sk, cr_return_quantity])
            :        :                 +- Reused(reference_id=[1])
            :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])
            +- Exchange(distribution=[hash[i_item_id]])
               +- LocalHashAggregate(groupBy=[i_item_id], select=[i_item_id, Partial_SUM(sr_item_qty) AS sum$0])
                  +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(sr_item_sk = i_item_sk)], select=[sr_item_sk, sr_item_qty, i_item_sk, i_item_id], isBroadcast=[true], build=[left])\n:- [#1] Exchange(distribution=[broadcast])\n+- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])\n])
                     :- Exchange(distribution=[broadcast])
                     :  +- HashAggregate(isMerge=[true], groupBy=[sr_item_sk], select=[sr_item_sk, Final_SUM(sum$0) AS sr_item_qty])
                     :     +- Exchange(distribution=[hash[sr_item_sk]])
                     :        +- LocalHashAggregate(groupBy=[sr_item_sk], select=[sr_item_sk, Partial_SUM(sr_return_quantity) AS sum$0])
                     :           +- Calc(select=[sr_item_sk, sr_return_quantity])
                     :              +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(sr_returned_date_sk = d_date_sk)], select=[sr_returned_date_sk, sr_item_sk, sr_return_quantity, d_date_sk, d_date], isBroadcast=[true], build=[right])\n:- Calc(select=[sr_returned_date_sk, sr_item_sk, sr_return_quantity], where=[sr_returned_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_returned_date_sk, sr_item_sk, sr_return_quantity]]], fields=[sr_returned_date_sk, sr_item_sk, sr_return_quantity])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :                 :- Reused(reference_id=[1])
                     :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_returned_date_sk, sr_item_sk, sr_return_quantity]]], fields=[sr_returned_date_sk, sr_item_sk, sr_return_quantity])
                     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id]]], fields=[i_item_sk, i_item_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q84]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query84.tpl and seed 1819994127
select  c_customer_id as customer_id
       ,c_last_name || ', ' || c_first_name as customername
 from customer
     ,customer_address
     ,customer_demographics
     ,household_demographics
     ,income_band
     ,store_returns
 where ca_city	        =  'Hopewell'
   and c_current_addr_sk = ca_address_sk
   and ib_lower_bound   >=  32287
   and ib_upper_bound   <=  32287 + 50000
   and ib_income_band_sk = hd_income_band_sk
   and cd_demo_sk = c_current_cdemo_sk
   and hd_demo_sk = c_current_hdemo_sk
   and sr_cdemo_sk = cd_demo_sk
 order by c_customer_id
 limit 100

-- end query 1 in stream 0 using template query84.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalProject(customer_id=[$1], customername=[||(||($9, _UTF-16LE', '), $8)])
   +- LogicalFilter(condition=[AND(=($24, _UTF-16LE'Hopewell'), =($4, $18), >=($46, 32287), <=($47, +(32287, 50000)), =($45, $41), =($31, $2), =($40, $3), =($52, $31))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalJoin(condition=[true], joinType=[inner])
         :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :  :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
         :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
         :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
         :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
         :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, income_band]])
         +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[c_customer_id AS customer_id, ||(||(c_last_name, ', '), c_first_name) AS customername])
+- SortLimit(orderBy=[c_customer_id ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[c_customer_id ASC], offset=[0], fetch=[100], global=[false])
         +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(cd_demo_sk = c_current_cdemo_sk)], select=[cd_demo_sk, c_customer_id, c_current_cdemo_sk, c_first_name, c_last_name], build=[right])\n:- Calc(select=[cd_demo_sk])\n:  +- HashJoin(joinType=[InnerJoin], where=[(sr_cdemo_sk = cd_demo_sk)], select=[sr_cdemo_sk, cd_demo_sk], build=[right])\n:     :- [#2] Exchange(distribution=[hash[sr_cdemo_sk]])\n:     +- [#3] Exchange(distribution=[hash[cd_demo_sk]])\n+- [#1] Exchange(distribution=[hash[c_current_cdemo_sk]])\n])
            :- Exchange(distribution=[hash[c_current_cdemo_sk]])
            :  +- Calc(select=[c_customer_id, c_current_cdemo_sk, c_first_name, c_last_name])
            :     +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(hd_demo_sk = c_current_hdemo_sk)], select=[c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_first_name, c_last_name, hd_demo_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_first_name, c_last_name])\n:  +- HashJoin(joinType=[InnerJoin], where=[(c_current_addr_sk = ca_address_sk)], select=[c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_name, c_last_name, ca_address_sk], build=[right])\n:     :- [#2] Exchange(distribution=[hash[c_current_addr_sk]])\n:     +- [#3] Exchange(distribution=[hash[ca_address_sk]])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :        :- Exchange(distribution=[broadcast])
            :        :  +- Calc(select=[hd_demo_sk])
            :        :     +- MultipleInput(readOrder=[1,0], members=[\nNestedLoopJoin(joinType=[InnerJoin], where=[(ib_income_band_sk = hd_income_band_sk)], select=[hd_demo_sk, hd_income_band_sk, ib_income_band_sk], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, household_demographics, project=[hd_demo_sk, hd_income_band_sk]]], fields=[hd_demo_sk, hd_income_band_sk])\n+- [#2] Exchange(distribution=[broadcast])\n])
            :        :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, household_demographics, project=[hd_demo_sk, hd_income_band_sk]]], fields=[hd_demo_sk, hd_income_band_sk])
            :        :        +- Exchange(distribution=[broadcast])
            :        :           +- Calc(select=[ib_income_band_sk], where=[((ib_lower_bound >= 32287) AND (ib_upper_bound <= 82287))])
            :        :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, income_band]], fields=[ib_income_band_sk, ib_lower_bound, ib_upper_bound])
            :        :- Exchange(distribution=[hash[c_current_addr_sk]])
            :        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_name, c_last_name]]], fields=[c_customer_id, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, c_first_name, c_last_name])
            :        +- Exchange(distribution=[hash[ca_address_sk]])
            :           +- Calc(select=[ca_address_sk], where=[(ca_city = 'Hopewell')])
            :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_city]]], fields=[ca_address_sk, ca_city])
            :- Exchange(distribution=[hash[sr_cdemo_sk]])
            :  +- Calc(select=[sr_cdemo_sk], where=[sr_cdemo_sk IS NOT NULL])
            :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_cdemo_sk]]], fields=[sr_cdemo_sk])
            +- Exchange(distribution=[hash[cd_demo_sk]])
               +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk]]], fields=[cd_demo_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q85]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query85.tpl and seed 622697896
select  substr(r_reason_desc,1,20)
       ,avg(ws_quantity)
       ,avg(wr_refunded_cash)
       ,avg(wr_fee)
 from web_sales, web_returns, web_page, customer_demographics cd1,
      customer_demographics cd2, customer_address, date_dim, reason 
 where ws_web_page_sk = wp_web_page_sk
   and ws_item_sk = wr_item_sk
   and ws_order_number = wr_order_number
   and ws_sold_date_sk = d_date_sk and d_year = 1998
   and cd1.cd_demo_sk = wr_refunded_cdemo_sk 
   and cd2.cd_demo_sk = wr_returning_cdemo_sk
   and ca_address_sk = wr_refunded_addr_sk
   and r_reason_sk = wr_reason_sk
   and
   (
    (
     cd1.cd_marital_status = 'M'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = '4 yr Degree'
     and 
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 100.00 and 150.00
    )
   or
    (
     cd1.cd_marital_status = 'D'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = 'Primary' 
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 50.00 and 100.00
    )
   or
    (
     cd1.cd_marital_status = 'U'
     and
     cd1.cd_marital_status = cd2.cd_marital_status
     and
     cd1.cd_education_status = 'Advanced Degree'
     and
     cd1.cd_education_status = cd2.cd_education_status
     and
     ws_sales_price between 150.00 and 200.00
    )
   )
   and
   (
    (
     ca_country = 'United States'
     and
     ca_state in ('KY', 'GA', 'NM')
     and ws_net_profit between 100 and 200  
    )
    or
    (
     ca_country = 'United States'
     and
     ca_state in ('MT', 'OR', 'IN')
     and ws_net_profit between 150 and 300  
    )
    or
    (
     ca_country = 'United States'
     and
     ca_state in ('WI', 'MO', 'WV')
     and ws_net_profit between 50 and 250  
    )
   )
group by r_reason_desc
order by substr(r_reason_desc,1,20)
        ,avg(ws_quantity)
        ,avg(wr_refunded_cash)
        ,avg(wr_fee)
limit 100

-- end query 1 in stream 0 using template query85.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$3], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], fetch=[100])
+- LogicalProject(EXPR$0=[SUBSTR($0, 1, 20)], EXPR$1=[$1], EXPR$2=[$2], EXPR$3=[$3])
   +- LogicalAggregate(group=[{0}], EXPR$1=[AVG($1)], EXPR$2=[AVG($2)], EXPR$3=[AVG($3)])
      +- LogicalProject(r_reason_desc=[$133], ws_quantity=[$18], wr_refunded_cash=[$54], wr_fee=[$52])
         +- LogicalFilter(condition=[AND(=($12, $58), =($3, $36), =($17, $47), =($0, $103), =($109, 1998), =($72, $38), =($81, $42), =($90, $40), =($131, $46), OR(AND(=($74, _UTF-16LE'M'), =($74, $83), =($75, _UTF-16LE'4 yr Degree'), =($75, $84), >=($21, 100.00:DECIMAL(5, 2)), <=($21, 150.00:DECIMAL(5, 2))), AND(=($74, _UTF-16LE'D'), =($74, $83), =($75, _UTF-16LE'Primary'), =($75, $84), >=($21, 50.00:DECIMAL(4, 2)), <=($21, 100.00:DECIMAL(5, 2))), AND(=($74, _UTF-16LE'U'), =($74, $83), =($75, _UTF-16LE'Advanced Degree'), =($75, $84), >=($21, 150.00:DECIMAL(5, 2)), <=($21, 200.00:DECIMAL(5, 2)))), OR(AND(=($100, _UTF-16LE'United States'), OR(=($98, _UTF-16LE'KY'), =($98, _UTF-16LE'GA'), =($98, _UTF-16LE'NM')), >=($33, 100), <=($33, 200)), AND(=($100, _UTF-16LE'United States'), OR(=($98, _UTF-16LE'MT'), =($98, _UTF-16LE'OR'), =($98, _UTF-16LE'IN')), >=($33, 150), <=($33, 300)), AND(=($100, _UTF-16LE'United States'), OR(=($98, _UTF-16LE'WI'), =($98, _UTF-16LE'MO'), =($98, _UTF-16LE'WV')), >=($33, 50), <=($33, 250))))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
               :  :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_returns]])
               :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_page]])
               :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
               :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
               :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
               :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
               +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, reason]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[EXPR$0 ASC, EXPR$1 ASC, EXPR$2 ASC, EXPR$3 ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[EXPR$0 ASC, EXPR$1 ASC, EXPR$2 ASC, EXPR$3 ASC], offset=[0], fetch=[100], global=[false])
      +- Calc(select=[SUBSTR(r_reason_desc, 1, 20) AS EXPR$0, EXPR$1, EXPR$2, EXPR$3])
         +- HashAggregate(isMerge=[true], groupBy=[r_reason_desc], select=[r_reason_desc, Final_AVG(sum$0, count$1) AS EXPR$1, Final_AVG(sum$2, count$3) AS EXPR$2, Final_AVG(sum$4, count$5) AS EXPR$3])
            +- Exchange(distribution=[hash[r_reason_desc]])
               +- LocalHashAggregate(groupBy=[r_reason_desc], select=[r_reason_desc, Partial_AVG(ws_quantity) AS (sum$0, count$1), Partial_AVG(wr_refunded_cash) AS (sum$2, count$3), Partial_AVG(wr_fee) AS (sum$4, count$5)])
                  +- Calc(select=[r_reason_desc, ws_quantity, wr_refunded_cash, wr_fee])
                     +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_web_page_sk = wp_web_page_sk)], select=[wp_web_page_sk, wr_fee, wr_refunded_cash, ws_web_page_sk, ws_quantity, r_reason_desc], isBroadcast=[true], build=[left])\n:- [#1] Exchange(distribution=[broadcast])\n+- Calc(select=[wr_fee, wr_refunded_cash, ws_web_page_sk, ws_quantity, r_reason_desc])\n   +- HashJoin(joinType=[InnerJoin], where=[((cd_demo_sk = wr_returning_cdemo_sk) AND (cd_marital_status0 = cd_marital_status) AND (cd_education_status0 = cd_education_status))], select=[cd_demo_sk, cd_marital_status, cd_education_status, wr_returning_cdemo_sk, wr_fee, wr_refunded_cash, ws_web_page_sk, ws_quantity, cd_marital_status0, cd_education_status0, r_reason_desc], isBroadcast=[true], build=[right])\n      :- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk, cd_marital_status, cd_education_status]]], fields=[cd_demo_sk, cd_marital_status, cd_education_status])\n      +- [#3] Exchange(distribution=[broadcast])\n])
                        :- Exchange(distribution=[broadcast])
                        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_page, project=[wp_web_page_sk]]], fields=[wp_web_page_sk])
                        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk, cd_marital_status, cd_education_status]]], fields=[cd_demo_sk, cd_marital_status, cd_education_status])
                        +- Exchange(distribution=[broadcast])
                           +- Calc(select=[wr_returning_cdemo_sk, wr_fee, wr_refunded_cash, ws_web_page_sk, ws_quantity, cd_marital_status, cd_education_status, r_reason_desc])
                              +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(r_reason_sk = wr_reason_sk)], select=[wr_returning_cdemo_sk, wr_reason_sk, wr_fee, wr_refunded_cash, ws_web_page_sk, ws_quantity, cd_marital_status, cd_education_status, r_reason_sk, r_reason_desc], isBroadcast=[true], build=[right])\n:- Calc(select=[wr_returning_cdemo_sk, wr_reason_sk, wr_fee, wr_refunded_cash, ws_web_page_sk, ws_quantity, cd_marital_status, cd_education_status])\n:  +- HashJoin(joinType=[InnerJoin], where=[((ca_address_sk = wr_refunded_addr_sk) AND ((SEARCH(ca_state, Sarg[_UTF-16LE'GA', _UTF-16LE'KY', _UTF-16LE'NM']) AND SEARCH(ws_net_profit, Sarg[[100..200]])) OR (SEARCH(ca_state, Sarg[_UTF-16LE'IN', _UTF-16LE'MT', _UTF-16LE'OR']) AND SEARCH(ws_net_profit, Sarg[[150..300]])) OR (SEARCH(ca_state, Sarg[_UTF-16LE'MO', _UTF-16LE'WI', _UTF-16LE'WV']) AND SEARCH(ws_net_profit, Sarg[[50..250]]))))], select=[ca_address_sk, ca_state, wr_refunded_addr_sk, wr_returning_cdemo_sk, wr_reason_sk, wr_fee, wr_refunded_cash, ws_web_page_sk, ws_quantity, ws_net_profit, cd_marital_status, cd_education_status], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ca_address_sk, ca_state], where=[(SEARCH(ca_country, Sarg[_UTF-16LE'United States']) AND SEARCH(ca_state, Sarg[_UTF-16LE'GA', _UTF-16LE'IN', _UTF-16LE'KY', _UTF-16LE'MO', _UTF-16LE'MT', _UTF-16LE'NM', _UTF-16LE'OR', _UTF-16LE'WI', _UTF-16LE'WV']))])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state, ca_country]]], fields=[ca_address_sk, ca_state, ca_country])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                 :- Exchange(distribution=[broadcast])
                                 :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, reason, project=[r_reason_sk, r_reason_desc]]], fields=[r_reason_sk, r_reason_desc])
                                 :- Exchange(distribution=[broadcast])
                                 :  +- Calc(select=[wr_refunded_addr_sk, wr_returning_cdemo_sk, wr_reason_sk, wr_fee, wr_refunded_cash, ws_web_page_sk, ws_quantity, ws_net_profit, cd_marital_status, cd_education_status])
                                 :     +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[((cd_demo_sk = wr_refunded_cdemo_sk) AND ((SEARCH(cd_marital_status, Sarg[_UTF-16LE'M']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'4 yr Degree']) AND SEARCH(ws_sales_price, Sarg[[100.00..150.00]])) OR (SEARCH(cd_marital_status, Sarg[_UTF-16LE'D']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'Primary']) AND SEARCH(ws_sales_price, Sarg[[50.00..100.00]])) OR (SEARCH(cd_marital_status, Sarg[_UTF-16LE'U']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'Advanced Degree']) AND SEARCH(ws_sales_price, Sarg[[150.00..200.00]]))))], select=[wr_refunded_cdemo_sk, wr_refunded_addr_sk, wr_returning_cdemo_sk, wr_reason_sk, wr_fee, wr_refunded_cash, ws_web_page_sk, ws_quantity, ws_sales_price, ws_net_profit, cd_demo_sk, cd_marital_status, cd_education_status], isBroadcast=[true], build=[right])\n:- Calc(select=[wr_refunded_cdemo_sk, wr_refunded_addr_sk, wr_returning_cdemo_sk, wr_reason_sk, wr_fee, wr_refunded_cash, ws_web_page_sk, ws_quantity, ws_sales_price, ws_net_profit])\n:  +- HashJoin(joinType=[InnerJoin], where=[((ws_item_sk = wr_item_sk) AND (ws_order_number = wr_order_number))], select=[wr_item_sk, wr_refunded_cdemo_sk, wr_refunded_addr_sk, wr_returning_cdemo_sk, wr_reason_sk, wr_order_number, wr_fee, wr_refunded_cash, ws_item_sk, ws_web_page_sk, ws_order_number, ws_quantity, ws_sales_price, ws_net_profit], build=[right])\n:     :- [#2] Exchange(distribution=[hash[wr_item_sk, wr_order_number]])\n:     +- [#3] Exchange(distribution=[hash[ws_item_sk, ws_order_number]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                 :        :- Exchange(distribution=[broadcast])
                                 :        :  +- Calc(select=[cd_demo_sk, cd_marital_status, cd_education_status], where=[((SEARCH(cd_marital_status, Sarg[_UTF-16LE'M']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'4 yr Degree'])) OR (SEARCH(cd_marital_status, Sarg[_UTF-16LE'D']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'Primary'])) OR (SEARCH(cd_marital_status, Sarg[_UTF-16LE'U']) AND SEARCH(cd_education_status, Sarg[_UTF-16LE'Advanced Degree'])))])
                                 :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk, cd_marital_status, cd_education_status]]], fields=[cd_demo_sk, cd_marital_status, cd_education_status])
                                 :        :- Exchange(distribution=[hash[wr_item_sk, wr_order_number]])
                                 :        :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_returns, project=[wr_item_sk, wr_refunded_cdemo_sk, wr_refunded_addr_sk, wr_returning_cdemo_sk, wr_reason_sk, wr_order_number, wr_fee, wr_refunded_cash]]], fields=[wr_item_sk, wr_refunded_cdemo_sk, wr_refunded_addr_sk, wr_returning_cdemo_sk, wr_reason_sk, wr_order_number, wr_fee, wr_refunded_cash])
                                 :        +- Exchange(distribution=[hash[ws_item_sk, ws_order_number]])
                                 :           +- Calc(select=[ws_item_sk, ws_web_page_sk, ws_order_number, ws_quantity, ws_sales_price, ws_net_profit])
                                 :              +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_web_page_sk, ws_order_number, ws_quantity, ws_sales_price, ws_net_profit, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ws_sold_date_sk, ws_item_sk, ws_web_page_sk, ws_order_number, ws_quantity, ws_sales_price, ws_net_profit], where=[((SEARCH(ws_sales_price, Sarg[[100.00..150.00]]) OR SEARCH(ws_sales_price, Sarg[[50.00..100.00]]) OR SEARCH(ws_sales_price, Sarg[[150.00..200.00]])) AND (SEARCH(ws_net_profit, Sarg[[100..200]]) OR SEARCH(ws_net_profit, Sarg[[150..300]]) OR SEARCH(ws_net_profit, Sarg[[50..250]])))])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_web_page_sk, ws_order_number, ws_quantity, ws_sales_price, ws_net_profit]]], fields=[ws_sold_date_sk, ws_item_sk, ws_web_page_sk, ws_order_number, ws_quantity, ws_sales_price, ws_net_profit])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                 :                 :- Exchange(distribution=[broadcast])
                                 :                 :  +- Calc(select=[d_date_sk], where=[(d_year = 1998)])
                                 :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year]]], fields=[d_date_sk, d_year])
                                 :                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_web_page_sk, ws_order_number, ws_quantity, ws_sales_price, ws_net_profit]]], fields=[ws_sold_date_sk, ws_item_sk, ws_web_page_sk, ws_order_number, ws_quantity, ws_sales_price, ws_net_profit])
                                 +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state, ca_country]]], fields=[ca_address_sk, ca_state, ca_country])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q86]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query86.tpl and seed 1819994127
select   
    sum(ws_net_paid) as total_sum
   ,i_category
   ,i_class
   ,grouping(i_category)+grouping(i_class) as lochierarchy
   ,rank() over (
 	partition by grouping(i_category)+grouping(i_class),
 	case when grouping(i_class) = 0 then i_category end 
 	order by sum(ws_net_paid) desc) as rank_within_parent
 from
    web_sales
   ,date_dim       d1
   ,item
 where
    d1.d_month_seq between 1212 and 1212+11
 and d1.d_date_sk = ws_sold_date_sk
 and i_item_sk  = ws_item_sk
 group by rollup(i_category,i_class)
 order by
   lochierarchy desc,
   case when lochierarchy = 0 then i_category end,
   rank_within_parent
 limit 100

-- end query 1 in stream 0 using template query86.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(total_sum=[$0], i_category=[$1], i_class=[$2], lochierarchy=[$3], rank_within_parent=[$4])
+- LogicalSort(sort0=[$3], sort1=[$5], sort2=[$4], dir0=[DESC-nulls-last], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
   +- LogicalProject(total_sum=[$2], i_category=[$0], i_class=[$1], lochierarchy=[+($3, $4)], rank_within_parent=[RANK() OVER (PARTITION BY +($3, $4), CASE(=($4, 0), $0, null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE") ORDER BY $2 DESC NULLS LAST)], EXPR$5=[CASE(=(+($3, $4), 0), $0, null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE")])
      +- LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], total_sum=[SUM($2)], agg#1=[GROUPING($0)], agg#2=[GROUPING($1)])
         +- LogicalProject(i_category=[$74], i_class=[$72], ws_net_paid=[$29])
            +- LogicalFilter(condition=[AND(>=($37, 1212), <=($37, +(1212, 11)), =($34, $0), =($62, $3))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[total_sum, i_category, i_class, $3 AS lochierarchy, w0$o0 AS rank_within_parent])
+- SortLimit(orderBy=[$3 DESC, $5 ASC, w0$o0 ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[$3 DESC, $5 ASC, w0$o0 ASC], offset=[0], fetch=[100], global=[false])
         +- OverAggregate(partitionBy=[$3, $4], orderBy=[total_sum DESC], window#0=[RANK(*) AS w0$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[i_category, i_class, total_sum, $3, $4, $5, w0$o0])
            +- Sort(orderBy=[$3 ASC, $4 ASC, total_sum DESC])
               +- Exchange(distribution=[hash[$3, $4]])
                  +- Calc(select=[i_category, i_class, total_sum, (CASE(SEARCH($e, Sarg[0, 1]), 0, 1) + CASE(($e = 0), 0, 1)) AS $3, CASE((CASE(($e = 0), 0, 1) = 0), i_category, null:VARCHAR(2147483647)) AS $4, CASE(((CASE(SEARCH($e, Sarg[0, 1]), 0, 1) + CASE(($e = 0), 0, 1)) = 0), i_category, null:VARCHAR(2147483647)) AS $5])
                     +- HashAggregate(isMerge=[true], groupBy=[i_category, i_class, $e], select=[i_category, i_class, $e, Final_SUM(sum$0) AS total_sum])
                        +- Exchange(distribution=[hash[i_category, i_class, $e]])
                           +- LocalHashAggregate(groupBy=[i_category, i_class, $e], select=[i_category, i_class, $e, Partial_SUM(ws_net_paid) AS sum$0])
                              +- Expand(projects=[{i_category, i_class, ws_net_paid, 0 AS $e}, {i_category, null AS i_class, ws_net_paid, 1 AS $e}, {null AS i_category, null AS i_class, ws_net_paid, 3 AS $e}])
                                 +- Calc(select=[i_category, i_class, ws_net_paid])
                                    +- HashJoin(joinType=[InnerJoin], where=[(i_item_sk = ws_item_sk)], select=[ws_item_sk, ws_net_paid, i_item_sk, i_class, i_category], build=[right])
                                       :- Exchange(distribution=[hash[ws_item_sk]])
                                       :  +- Calc(select=[ws_item_sk, ws_net_paid])
                                       :     +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(d_date_sk = ws_sold_date_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_net_paid, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_net_paid]]], fields=[ws_sold_date_sk, ws_item_sk, ws_net_paid])\n+- [#2] Exchange(distribution=[broadcast])\n])
                                       :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_net_paid]]], fields=[ws_sold_date_sk, ws_item_sk, ws_net_paid])
                                       :        +- Exchange(distribution=[broadcast])
                                       :           +- Calc(select=[d_date_sk], where=[SEARCH(d_month_seq, Sarg[[1212..1223]])])
                                       :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_month_seq]]], fields=[d_date_sk, d_month_seq])
                                       +- Exchange(distribution=[hash[i_item_sk]])
                                          +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_class, i_category]]], fields=[i_item_sk, i_class, i_category])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q88]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query88.tpl and seed 318176889
select  *
from
 (select count(*) h8_30_to_9
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk   
     and ss_hdemo_sk = household_demographics.hd_demo_sk 
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 8
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2)) 
     and store.s_store_name = 'ese') s1,
 (select count(*) h9_to_9_30 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 9 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s2,
 (select count(*) h9_30_to_10 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 9
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s3,
 (select count(*) h10_to_10_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s4,
 (select count(*) h10_30_to_11
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s5,
 (select count(*) h11_to_11_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 11
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s6,
 (select count(*) h11_30_to_12
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 11
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s7,
 (select count(*) h12_to_12_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 12
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s8


-- end query 1 in stream 0 using template query88.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(h8_30_to_9=[$0], h9_to_9_30=[$1], h9_30_to_10=[$2], h10_to_10_30=[$3], h10_30_to_11=[$4], h11_to_11_30=[$5], h11_30_to_12=[$6], h12_to_12_30=[$7])
+- LogicalJoin(condition=[true], joinType=[inner])
   :- LogicalJoin(condition=[true], joinType=[inner])
   :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :  :  :- LogicalAggregate(group=[{}], h8_30_to_9=[COUNT()])
   :  :  :  :  :  :  :  +- LogicalProject($f0=[0])
   :  :  :  :  :  :  :     +- LogicalFilter(condition=[AND(=($1, $28), =($5, $23), =($7, $38), =($31, 8), >=($32, 30), OR(AND(=($26, 3), <=($27, +(3, 2))), AND(=($26, 0), <=($27, +(0, 2))), AND(=($26, 1), <=($27, +(1, 2)))), =($43, _UTF-16LE'ese'))])
   :  :  :  :  :  :  :        +- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :  :  :           :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :  :  :           :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :  :  :           :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
   :  :  :  :  :  :  :           :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
   :  :  :  :  :  :  :           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, time_dim]])
   :  :  :  :  :  :  :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
   :  :  :  :  :  :  +- LogicalAggregate(group=[{}], h9_to_9_30=[COUNT()])
   :  :  :  :  :  :     +- LogicalProject($f0=[0])
   :  :  :  :  :  :        +- LogicalFilter(condition=[AND(=($1, $28), =($5, $23), =($7, $38), =($31, 9), <($32, 30), OR(AND(=($26, 3), <=($27, +(3, 2))), AND(=($26, 0), <=($27, +(0, 2))), AND(=($26, 1), <=($27, +(1, 2)))), =($43, _UTF-16LE'ese'))])
   :  :  :  :  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :  :              :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
   :  :  :  :  :  :              :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
   :  :  :  :  :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, time_dim]])
   :  :  :  :  :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
   :  :  :  :  :  +- LogicalAggregate(group=[{}], h9_30_to_10=[COUNT()])
   :  :  :  :  :     +- LogicalProject($f0=[0])
   :  :  :  :  :        +- LogicalFilter(condition=[AND(=($1, $28), =($5, $23), =($7, $38), =($31, 9), >=($32, 30), OR(AND(=($26, 3), <=($27, +(3, 2))), AND(=($26, 0), <=($27, +(0, 2))), AND(=($26, 1), <=($27, +(1, 2)))), =($43, _UTF-16LE'ese'))])
   :  :  :  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :  :              :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
   :  :  :  :  :              :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
   :  :  :  :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, time_dim]])
   :  :  :  :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
   :  :  :  :  +- LogicalAggregate(group=[{}], h10_to_10_30=[COUNT()])
   :  :  :  :     +- LogicalProject($f0=[0])
   :  :  :  :        +- LogicalFilter(condition=[AND(=($1, $28), =($5, $23), =($7, $38), =($31, 10), <($32, 30), OR(AND(=($26, 3), <=($27, +(3, 2))), AND(=($26, 0), <=($27, +(0, 2))), AND(=($26, 1), <=($27, +(1, 2)))), =($43, _UTF-16LE'ese'))])
   :  :  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :  :              :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
   :  :  :  :              :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
   :  :  :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, time_dim]])
   :  :  :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
   :  :  :  +- LogicalAggregate(group=[{}], h10_30_to_11=[COUNT()])
   :  :  :     +- LogicalProject($f0=[0])
   :  :  :        +- LogicalFilter(condition=[AND(=($1, $28), =($5, $23), =($7, $38), =($31, 10), >=($32, 30), OR(AND(=($26, 3), <=($27, +(3, 2))), AND(=($26, 0), <=($27, +(0, 2))), AND(=($26, 1), <=($27, +(1, 2)))), =($43, _UTF-16LE'ese'))])
   :  :  :           +- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :              :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :  :              :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
   :  :  :              :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
   :  :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, time_dim]])
   :  :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
   :  :  +- LogicalAggregate(group=[{}], h11_to_11_30=[COUNT()])
   :  :     +- LogicalProject($f0=[0])
   :  :        +- LogicalFilter(condition=[AND(=($1, $28), =($5, $23), =($7, $38), =($31, 11), <($32, 30), OR(AND(=($26, 3), <=($27, +(3, 2))), AND(=($26, 0), <=($27, +(0, 2))), AND(=($26, 1), <=($27, +(1, 2)))), =($43, _UTF-16LE'ese'))])
   :  :           +- LogicalJoin(condition=[true], joinType=[inner])
   :  :              :- LogicalJoin(condition=[true], joinType=[inner])
   :  :              :  :- LogicalJoin(condition=[true], joinType=[inner])
   :  :              :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
   :  :              :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
   :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, time_dim]])
   :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
   :  +- LogicalAggregate(group=[{}], h11_30_to_12=[COUNT()])
   :     +- LogicalProject($f0=[0])
   :        +- LogicalFilter(condition=[AND(=($1, $28), =($5, $23), =($7, $38), =($31, 11), >=($32, 30), OR(AND(=($26, 3), <=($27, +(3, 2))), AND(=($26, 0), <=($27, +(0, 2))), AND(=($26, 1), <=($27, +(1, 2)))), =($43, _UTF-16LE'ese'))])
   :           +- LogicalJoin(condition=[true], joinType=[inner])
   :              :- LogicalJoin(condition=[true], joinType=[inner])
   :              :  :- LogicalJoin(condition=[true], joinType=[inner])
   :              :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
   :              :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
   :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, time_dim]])
   :              +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
   +- LogicalAggregate(group=[{}], h12_to_12_30=[COUNT()])
      +- LogicalProject($f0=[0])
         +- LogicalFilter(condition=[AND(=($1, $28), =($5, $23), =($7, $38), =($31, 12), <($32, 30), OR(AND(=($26, 3), <=($27, +(3, 2))), AND(=($26, 0), <=($27, +(0, 2))), AND(=($26, 1), <=($27, +(1, 2)))), =($43, _UTF-16LE'ese'))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
               :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
               :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, time_dim]])
               +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[h8_30_to_9, h9_to_9_30, h9_30_to_10, h10_to_10_30, h10_30_to_11, h11_to_11_30, h11_30_to_12, h12_to_12_30])
+- NestedLoopJoin(joinType=[InnerJoin], where=[true], select=[h8_30_to_9, h12_to_12_30, h11_30_to_12, h11_to_11_30, h10_30_to_11, h10_to_10_30, h9_30_to_10, h9_to_9_30], build=[right], singleRowJoin=[true])
   :- Exchange(distribution=[any])
   :  +- NestedLoopJoin(joinType=[InnerJoin], where=[true], select=[h8_30_to_9, h12_to_12_30, h11_30_to_12, h11_to_11_30, h10_30_to_11, h10_to_10_30, h9_30_to_10], build=[right], singleRowJoin=[true])
   :     :- Exchange(distribution=[any])
   :     :  +- NestedLoopJoin(joinType=[InnerJoin], where=[true], select=[h8_30_to_9, h12_to_12_30, h11_30_to_12, h11_to_11_30, h10_30_to_11, h10_to_10_30], build=[right], singleRowJoin=[true])
   :     :     :- Exchange(distribution=[any])
   :     :     :  +- NestedLoopJoin(joinType=[InnerJoin], where=[true], select=[h8_30_to_9, h12_to_12_30, h11_30_to_12, h11_to_11_30, h10_30_to_11], build=[right], singleRowJoin=[true])
   :     :     :     :- Exchange(distribution=[any])
   :     :     :     :  +- NestedLoopJoin(joinType=[InnerJoin], where=[true], select=[h8_30_to_9, h12_to_12_30, h11_30_to_12, h11_to_11_30], build=[right], singleRowJoin=[true])
   :     :     :     :     :- Exchange(distribution=[any])
   :     :     :     :     :  +- NestedLoopJoin(joinType=[InnerJoin], where=[true], select=[h8_30_to_9, h12_to_12_30, h11_30_to_12], build=[right], singleRowJoin=[true])
   :     :     :     :     :     :- Exchange(distribution=[any])
   :     :     :     :     :     :  +- NestedLoopJoin(joinType=[InnerJoin], where=[true], select=[h8_30_to_9, h12_to_12_30], build=[left], singleRowJoin=[true])
   :     :     :     :     :     :     :- Exchange(distribution=[broadcast])
   :     :     :     :     :     :     :  +- HashAggregate(isMerge=[true], select=[Final_COUNT(count1$0) AS h8_30_to_9])
   :     :     :     :     :     :     :     +- Exchange(distribution=[single])
   :     :     :     :     :     :     :        +- LocalHashAggregate(select=[Partial_COUNT(*) AS count1$0])
   :     :     :     :     :     :     :           +- Calc(select=[0 AS $f0])
   :     :     :     :     :     :     :              +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, s_store_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_hdemo_sk = hd_demo_sk)], select=[ss_hdemo_sk, ss_store_sk, hd_demo_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_hdemo_sk, ss_store_sk])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_time_sk = t_time_sk)], select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk, t_time_sk], isBroadcast=[true], build=[right])\n:     :     :- [#3] Calc(select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk], where=[ss_hdemo_sk IS NOT NULL])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
   :     :     :     :     :     :     :                 :- Exchange(distribution=[broadcast])(reuse_id=[1])
   :     :     :     :     :     :     :                 :  +- Calc(select=[s_store_sk], where=[(s_store_name = 'ese')])
   :     :     :     :     :     :     :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_store_name]]], fields=[s_store_sk, s_store_name])
   :     :     :     :     :     :     :                 :- Exchange(distribution=[broadcast])(reuse_id=[2])
   :     :     :     :     :     :     :                 :  +- Calc(select=[hd_demo_sk], where=[(((hd_dep_count = 3) AND (hd_vehicle_count <= 5)) OR ((hd_dep_count = 0) AND (hd_vehicle_count <= 2)) OR ((hd_dep_count = 1) AND (hd_vehicle_count <= 3)))])
   :     :     :     :     :     :     :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, household_demographics, project=[hd_demo_sk, hd_dep_count, hd_vehicle_count]]], fields=[hd_demo_sk, hd_dep_count, hd_vehicle_count])
   :     :     :     :     :     :     :                 :- Calc(select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk], where=[ss_hdemo_sk IS NOT NULL])(reuse_id=[3])
   :     :     :     :     :     :     :                 :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk]]], fields=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk])
   :     :     :     :     :     :     :                 +- Exchange(distribution=[broadcast])
   :     :     :     :     :     :     :                    +- Calc(select=[t_time_sk], where=[((t_hour = 8) AND (t_minute >= 30))])
   :     :     :     :     :     :     :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, time_dim, project=[t_time_sk, t_hour, t_minute]]], fields=[t_time_sk, t_hour, t_minute])
   :     :     :     :     :     :     +- Exchange(distribution=[any])
   :     :     :     :     :     :        +- HashAggregate(isMerge=[true], select=[Final_COUNT(count1$0) AS h12_to_12_30])
   :     :     :     :     :     :           +- Exchange(distribution=[single])
   :     :     :     :     :     :              +- LocalHashAggregate(select=[Partial_COUNT(*) AS count1$0])
   :     :     :     :     :     :                 +- Calc(select=[0 AS $f0])
   :     :     :     :     :     :                    +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, s_store_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_hdemo_sk = hd_demo_sk)], select=[ss_hdemo_sk, ss_store_sk, hd_demo_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_hdemo_sk, ss_store_sk])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_time_sk = t_time_sk)], select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk, t_time_sk], isBroadcast=[true], build=[right])\n:     :     :- [#3] Calc(select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk], where=[ss_hdemo_sk IS NOT NULL])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
   :     :     :     :     :     :                       :- Reused(reference_id=[1])
   :     :     :     :     :     :                       :- Reused(reference_id=[2])
   :     :     :     :     :     :                       :- Reused(reference_id=[3])
   :     :     :     :     :     :                       +- Exchange(distribution=[broadcast])
   :     :     :     :     :     :                          +- Calc(select=[t_time_sk], where=[((t_hour = 12) AND (t_minute < 30))])
   :     :     :     :     :     :                             +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, time_dim, project=[t_time_sk, t_hour, t_minute]]], fields=[t_time_sk, t_hour, t_minute])
   :     :     :     :     :     +- Exchange(distribution=[broadcast])
   :     :     :     :     :        +- HashAggregate(isMerge=[true], select=[Final_COUNT(count1$0) AS h11_30_to_12])
   :     :     :     :     :           +- Exchange(distribution=[single])
   :     :     :     :     :              +- LocalHashAggregate(select=[Partial_COUNT(*) AS count1$0])
   :     :     :     :     :                 +- Calc(select=[0 AS $f0])
   :     :     :     :     :                    +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, s_store_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_hdemo_sk = hd_demo_sk)], select=[ss_hdemo_sk, ss_store_sk, hd_demo_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_hdemo_sk, ss_store_sk])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_time_sk = t_time_sk)], select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk, t_time_sk], isBroadcast=[true], build=[right])\n:     :     :- [#3] Calc(select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk], where=[ss_hdemo_sk IS NOT NULL])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
   :     :     :     :     :                       :- Reused(reference_id=[1])
   :     :     :     :     :                       :- Reused(reference_id=[2])
   :     :     :     :     :                       :- Reused(reference_id=[3])
   :     :     :     :     :                       +- Exchange(distribution=[broadcast])
   :     :     :     :     :                          +- Calc(select=[t_time_sk], where=[((t_hour = 11) AND (t_minute >= 30))])
   :     :     :     :     :                             +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, time_dim, project=[t_time_sk, t_hour, t_minute]]], fields=[t_time_sk, t_hour, t_minute])
   :     :     :     :     +- Exchange(distribution=[broadcast])
   :     :     :     :        +- HashAggregate(isMerge=[true], select=[Final_COUNT(count1$0) AS h11_to_11_30])
   :     :     :     :           +- Exchange(distribution=[single])
   :     :     :     :              +- LocalHashAggregate(select=[Partial_COUNT(*) AS count1$0])
   :     :     :     :                 +- Calc(select=[0 AS $f0])
   :     :     :     :                    +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, s_store_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_hdemo_sk = hd_demo_sk)], select=[ss_hdemo_sk, ss_store_sk, hd_demo_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_hdemo_sk, ss_store_sk])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_time_sk = t_time_sk)], select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk, t_time_sk], isBroadcast=[true], build=[right])\n:     :     :- [#3] Calc(select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk], where=[ss_hdemo_sk IS NOT NULL])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
   :     :     :     :                       :- Reused(reference_id=[1])
   :     :     :     :                       :- Reused(reference_id=[2])
   :     :     :     :                       :- Reused(reference_id=[3])
   :     :     :     :                       +- Exchange(distribution=[broadcast])
   :     :     :     :                          +- Calc(select=[t_time_sk], where=[((t_hour = 11) AND (t_minute < 30))])
   :     :     :     :                             +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, time_dim, project=[t_time_sk, t_hour, t_minute]]], fields=[t_time_sk, t_hour, t_minute])
   :     :     :     +- Exchange(distribution=[broadcast])
   :     :     :        +- HashAggregate(isMerge=[true], select=[Final_COUNT(count1$0) AS h10_30_to_11])
   :     :     :           +- Exchange(distribution=[single])
   :     :     :              +- LocalHashAggregate(select=[Partial_COUNT(*) AS count1$0])
   :     :     :                 +- Calc(select=[0 AS $f0])
   :     :     :                    +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, s_store_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_hdemo_sk = hd_demo_sk)], select=[ss_hdemo_sk, ss_store_sk, hd_demo_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_hdemo_sk, ss_store_sk])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_time_sk = t_time_sk)], select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk, t_time_sk], isBroadcast=[true], build=[right])\n:     :     :- [#3] Calc(select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk], where=[ss_hdemo_sk IS NOT NULL])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
   :     :     :                       :- Reused(reference_id=[1])
   :     :     :                       :- Reused(reference_id=[2])
   :     :     :                       :- Reused(reference_id=[3])
   :     :     :                       +- Exchange(distribution=[broadcast])
   :     :     :                          +- Calc(select=[t_time_sk], where=[((t_hour = 10) AND (t_minute >= 30))])
   :     :     :                             +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, time_dim, project=[t_time_sk, t_hour, t_minute]]], fields=[t_time_sk, t_hour, t_minute])
   :     :     +- Exchange(distribution=[broadcast])
   :     :        +- HashAggregate(isMerge=[true], select=[Final_COUNT(count1$0) AS h10_to_10_30])
   :     :           +- Exchange(distribution=[single])
   :     :              +- LocalHashAggregate(select=[Partial_COUNT(*) AS count1$0])
   :     :                 +- Calc(select=[0 AS $f0])
   :     :                    +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, s_store_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_hdemo_sk = hd_demo_sk)], select=[ss_hdemo_sk, ss_store_sk, hd_demo_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_hdemo_sk, ss_store_sk])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_time_sk = t_time_sk)], select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk, t_time_sk], isBroadcast=[true], build=[right])\n:     :     :- [#3] Calc(select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk], where=[ss_hdemo_sk IS NOT NULL])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
   :     :                       :- Reused(reference_id=[1])
   :     :                       :- Reused(reference_id=[2])
   :     :                       :- Reused(reference_id=[3])
   :     :                       +- Exchange(distribution=[broadcast])
   :     :                          +- Calc(select=[t_time_sk], where=[((t_hour = 10) AND (t_minute < 30))])
   :     :                             +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, time_dim, project=[t_time_sk, t_hour, t_minute]]], fields=[t_time_sk, t_hour, t_minute])
   :     +- Exchange(distribution=[broadcast])
   :        +- HashAggregate(isMerge=[true], select=[Final_COUNT(count1$0) AS h9_30_to_10])
   :           +- Exchange(distribution=[single])
   :              +- LocalHashAggregate(select=[Partial_COUNT(*) AS count1$0])
   :                 +- Calc(select=[0 AS $f0])
   :                    +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, s_store_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_hdemo_sk = hd_demo_sk)], select=[ss_hdemo_sk, ss_store_sk, hd_demo_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_hdemo_sk, ss_store_sk])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_time_sk = t_time_sk)], select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk, t_time_sk], isBroadcast=[true], build=[right])\n:     :     :- [#3] Calc(select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk], where=[ss_hdemo_sk IS NOT NULL])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
   :                       :- Reused(reference_id=[1])
   :                       :- Reused(reference_id=[2])
   :                       :- Reused(reference_id=[3])
   :                       +- Exchange(distribution=[broadcast])
   :                          +- Calc(select=[t_time_sk], where=[((t_hour = 9) AND (t_minute >= 30))])
   :                             +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, time_dim, project=[t_time_sk, t_hour, t_minute]]], fields=[t_time_sk, t_hour, t_minute])
   +- Exchange(distribution=[broadcast])
      +- HashAggregate(isMerge=[true], select=[Final_COUNT(count1$0) AS h9_to_9_30])
         +- Exchange(distribution=[single])
            +- LocalHashAggregate(select=[Partial_COUNT(*) AS count1$0])
               +- Calc(select=[0 AS $f0])
                  +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, s_store_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_hdemo_sk = hd_demo_sk)], select=[ss_hdemo_sk, ss_store_sk, hd_demo_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_hdemo_sk, ss_store_sk])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_time_sk = t_time_sk)], select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk, t_time_sk], isBroadcast=[true], build=[right])\n:     :     :- [#3] Calc(select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk], where=[ss_hdemo_sk IS NOT NULL])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :- Reused(reference_id=[1])
                     :- Reused(reference_id=[2])
                     :- Reused(reference_id=[3])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[t_time_sk], where=[((t_hour = 9) AND (t_minute < 30))])
                           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, time_dim, project=[t_time_sk, t_hour, t_minute]]], fields=[t_time_sk, t_hour, t_minute])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q89]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query89.tpl and seed 1719819282
select  *
from(
select i_category, i_class, i_brand,
       s_store_name, s_company_name,
       d_moy,
       sum(ss_sales_price) sum_sales,
       avg(sum(ss_sales_price)) over
         (partition by i_category, i_brand, s_store_name, s_company_name)
         avg_monthly_sales
from item, store_sales, date_dim, store
where ss_item_sk = i_item_sk and
      ss_sold_date_sk = d_date_sk and
      ss_store_sk = s_store_sk and
      d_year in (2000) and
        ((i_category in ('Home','Books','Electronics') and
          i_class in ('wallpaper','parenting','musical')
         )
      or (i_category in ('Shoes','Jewelry','Men') and
          i_class in ('womens','birdal','pants') 
        ))
group by i_category, i_class, i_brand,
         s_store_name, s_company_name, d_moy) tmp1
where case when (avg_monthly_sales <> 0) then (abs(sum_sales - avg_monthly_sales) / avg_monthly_sales) else null end > 0.1
order by sum_sales - avg_monthly_sales, s_store_name
limit 100

-- end query 1 in stream 0 using template query89.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(i_category=[$0], i_class=[$1], i_brand=[$2], s_store_name=[$3], s_company_name=[$4], d_moy=[$5], sum_sales=[$6], avg_monthly_sales=[$7])
+- LogicalSort(sort0=[$8], sort1=[$3], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
   +- LogicalProject(i_category=[$0], i_class=[$1], i_brand=[$2], s_store_name=[$3], s_company_name=[$4], d_moy=[$5], sum_sales=[$6], avg_monthly_sales=[$7], EXPR$8=[-($6, $7)])
      +- LogicalFilter(condition=[>(CASE(<>($7, 0), /(ABS(-($6, $7)), $7), null:DOUBLE), 0.1:DECIMAL(2, 1))])
         +- LogicalProject(i_category=[$0], i_class=[$1], i_brand=[$2], s_store_name=[$3], s_company_name=[$4], d_moy=[$5], sum_sales=[$6], avg_monthly_sales=[/(CASE(>(COUNT($6) OVER (PARTITION BY $0, $2, $3, $4), 0), $SUM0($6) OVER (PARTITION BY $0, $2, $3, $4), null:DOUBLE), COUNT($6) OVER (PARTITION BY $0, $2, $3, $4))])
            +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5}], sum_sales=[SUM($6)])
               +- LogicalProject(i_category=[$12], i_class=[$10], i_brand=[$8], s_store_name=[$78], s_company_name=[$90], d_moy=[$53], ss_sales_price=[$35])
                  +- LogicalFilter(condition=[AND(=($24, $0), =($22, $45), =($29, $73), =($51, 2000), OR(AND(OR(=($12, _UTF-16LE'Home'), =($12, _UTF-16LE'Books'), =($12, _UTF-16LE'Electronics')), OR(=($10, _UTF-16LE'wallpaper'), =($10, _UTF-16LE'parenting'), =($10, _UTF-16LE'musical'))), AND(OR(=($12, _UTF-16LE'Shoes'), =($12, _UTF-16LE'Jewelry'), =($12, _UTF-16LE'Men')), OR(=($10, _UTF-16LE'womens'), =($10, _UTF-16LE'birdal'), =($10, _UTF-16LE'pants')))))])
                     +- LogicalJoin(condition=[true], joinType=[inner])
                        :- LogicalJoin(condition=[true], joinType=[inner])
                        :  :- LogicalJoin(condition=[true], joinType=[inner])
                        :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                        :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                        :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
                        +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[i_category, i_class, i_brand, s_store_name, s_company_name, d_moy, sum_sales, avg_monthly_sales])
+- SortLimit(orderBy=[EXPR$8 ASC, s_store_name ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[EXPR$8 ASC, s_store_name ASC], offset=[0], fetch=[100], global=[false])
         +- Calc(select=[i_category, i_class, i_brand, s_store_name, s_company_name, d_moy, sum_sales, (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0) AS avg_monthly_sales, (sum_sales - (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0)) AS EXPR$8], where=[CASE(((CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0) <> 0), ((ABS((sum_sales - (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0))) / (CASE((w0$o0 > 0), w0$o1, null:DOUBLE) / w0$o0)) > 0.1), false)])
            +- OverAggregate(partitionBy=[i_category, i_brand, s_store_name, s_company_name], window#0=[COUNT(sum_sales) AS w0$o0, $SUM0(sum_sales) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[i_category, i_class, i_brand, s_store_name, s_company_name, d_moy, sum_sales, w0$o0, w0$o1])
               +- Sort(orderBy=[i_category ASC, i_brand ASC, s_store_name ASC, s_company_name ASC])
                  +- Exchange(distribution=[hash[i_category, i_brand, s_store_name, s_company_name]])
                     +- HashAggregate(isMerge=[true], groupBy=[i_category, i_class, i_brand, s_store_name, s_company_name, d_moy], select=[i_category, i_class, i_brand, s_store_name, s_company_name, d_moy, Final_SUM(sum$0) AS sum_sales])
                        +- Exchange(distribution=[hash[i_category, i_class, i_brand, s_store_name, s_company_name, d_moy]])
                           +- LocalHashAggregate(groupBy=[i_category, i_class, i_brand, s_store_name, s_company_name, d_moy], select=[i_category, i_class, i_brand, s_store_name, s_company_name, d_moy, Partial_SUM(ss_sales_price) AS sum$0])
                              +- Calc(select=[i_category, i_class, i_brand, s_store_name, s_company_name, d_moy, ss_sales_price])
                                 +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, ss_sales_price, i_brand, i_class, i_category, d_moy, s_store_sk, s_store_name, s_company_name], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk, ss_sales_price, i_brand, i_class, i_category, d_moy])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_store_sk, ss_sales_price, i_brand, i_class, i_category, d_date_sk, d_moy], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_sales_price, i_brand, i_class, i_category])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price, i_item_sk, i_brand, i_class, i_category], isBroadcast=[true], build=[right])\n:     :     :- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                    :- Exchange(distribution=[broadcast])
                                    :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_store_name, s_company_name]]], fields=[s_store_sk, s_store_name, s_company_name])
                                    :- Exchange(distribution=[broadcast])
                                    :  +- Calc(select=[d_date_sk, d_moy], where=[(d_year = 2000)])
                                    :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                                    :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_store_sk, ss_sales_price])
                                    +- Exchange(distribution=[broadcast])
                                       +- Calc(select=[i_item_sk, i_brand, i_class, i_category], where=[((SEARCH(i_category, Sarg[_UTF-16LE'Books', _UTF-16LE'Electronics', _UTF-16LE'Home']) AND SEARCH(i_class, Sarg[_UTF-16LE'musical', _UTF-16LE'parenting', _UTF-16LE'wallpaper'])) OR (SEARCH(i_category, Sarg[_UTF-16LE'Jewelry', _UTF-16LE'Men', _UTF-16LE'Shoes']) AND SEARCH(i_class, Sarg[_UTF-16LE'birdal', _UTF-16LE'pants', _UTF-16LE'womens'])))])
                                          +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_brand, i_class, i_category]]], fields=[i_item_sk, i_brand, i_class, i_category])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q8]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query8.tpl and seed 1766988859
select  s_store_name
      ,sum(ss_net_profit)
 from store_sales
     ,date_dim
     ,store,
     (select ca_zip
     from (
     (SELECT substr(ca_zip,1,5) ca_zip
      FROM customer_address
      WHERE substr(ca_zip,1,5) IN (
                          '89436','30868','65085','22977','83927','77557',
                          '58429','40697','80614','10502','32779',
                          '91137','61265','98294','17921','18427',
                          '21203','59362','87291','84093','21505',
                          '17184','10866','67898','25797','28055',
                          '18377','80332','74535','21757','29742',
                          '90885','29898','17819','40811','25990',
                          '47513','89531','91068','10391','18846',
                          '99223','82637','41368','83658','86199',
                          '81625','26696','89338','88425','32200',
                          '81427','19053','77471','36610','99823',
                          '43276','41249','48584','83550','82276',
                          '18842','78890','14090','38123','40936',
                          '34425','19850','43286','80072','79188',
                          '54191','11395','50497','84861','90733',
                          '21068','57666','37119','25004','57835',
                          '70067','62878','95806','19303','18840',
                          '19124','29785','16737','16022','49613',
                          '89977','68310','60069','98360','48649',
                          '39050','41793','25002','27413','39736',
                          '47208','16515','94808','57648','15009',
                          '80015','42961','63982','21744','71853',
                          '81087','67468','34175','64008','20261',
                          '11201','51799','48043','45645','61163',
                          '48375','36447','57042','21218','41100',
                          '89951','22745','35851','83326','61125',
                          '78298','80752','49858','52940','96976',
                          '63792','11376','53582','18717','90226',
                          '50530','94203','99447','27670','96577',
                          '57856','56372','16165','23427','54561',
                          '28806','44439','22926','30123','61451',
                          '92397','56979','92309','70873','13355',
                          '21801','46346','37562','56458','28286',
                          '47306','99555','69399','26234','47546',
                          '49661','88601','35943','39936','25632',
                          '24611','44166','56648','30379','59785',
                          '11110','14329','93815','52226','71381',
                          '13842','25612','63294','14664','21077',
                          '82626','18799','60915','81020','56447',
                          '76619','11433','13414','42548','92713',
                          '70467','30884','47484','16072','38936',
                          '13036','88376','45539','35901','19506',
                          '65690','73957','71850','49231','14276',
                          '20005','18384','76615','11635','38177',
                          '55607','41369','95447','58581','58149',
                          '91946','33790','76232','75692','95464',
                          '22246','51061','56692','53121','77209',
                          '15482','10688','14868','45907','73520',
                          '72666','25734','17959','24677','66446',
                          '94627','53535','15560','41967','69297',
                          '11929','59403','33283','52232','57350',
                          '43933','40921','36635','10827','71286',
                          '19736','80619','25251','95042','15526',
                          '36496','55854','49124','81980','35375',
                          '49157','63512','28944','14946','36503',
                          '54010','18767','23969','43905','66979',
                          '33113','21286','58471','59080','13395',
                          '79144','70373','67031','38360','26705',
                          '50906','52406','26066','73146','15884',
                          '31897','30045','61068','45550','92454',
                          '13376','14354','19770','22928','97790',
                          '50723','46081','30202','14410','20223',
                          '88500','67298','13261','14172','81410',
                          '93578','83583','46047','94167','82564',
                          '21156','15799','86709','37931','74703',
                          '83103','23054','70470','72008','49247',
                          '91911','69998','20961','70070','63197',
                          '54853','88191','91830','49521','19454',
                          '81450','89091','62378','25683','61869',
                          '51744','36580','85778','36871','48121',
                          '28810','83712','45486','67393','26935',
                          '42393','20132','55349','86057','21309',
                          '80218','10094','11357','48819','39734',
                          '40758','30432','21204','29467','30214',
                          '61024','55307','74621','11622','68908',
                          '33032','52868','99194','99900','84936',
                          '69036','99149','45013','32895','59004',
                          '32322','14933','32936','33562','72550',
                          '27385','58049','58200','16808','21360',
                          '32961','18586','79307','15492'))
     intersect
     (select ca_zip
      from (SELECT substr(ca_zip,1,5) ca_zip,count(*) cnt
            FROM customer_address, customer
            WHERE ca_address_sk = c_current_addr_sk and
                  c_preferred_cust_flag='Y'
            group by ca_zip
            having count(*) > 10)A1))A2) V1
 where ss_store_sk = s_store_sk
  and ss_sold_date_sk = d_date_sk
  and d_qoy = 1 and d_year = 2002
  and (substr(s_zip,1,2) = substr(V1.ca_zip,1,2))
 group by s_store_name
 order by s_store_name
 limit 100

-- end query 1 in stream 0 using template query8.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
   +- LogicalProject(s_store_name=[$56], ss_net_profit=[$22])
      +- LogicalFilter(condition=[AND(=($7, $51), =($0, $23), =($33, 1), =($29, 2002), =(SUBSTR($76, 1, 2), SUBSTR($80, 1, 2)))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
            +- LogicalProject(ca_zip=[$0])
               +- LogicalIntersect(all=[false])
                  :- LogicalProject(ca_zip=[SUBSTR($9, 1, 5)])
                  :  +- LogicalFilter(condition=[OR(=(SUBSTR($9, 1, 5), _UTF-16LE'89436'), =(SUBSTR($9, 1, 5), _UTF-16LE'30868'), =(SUBSTR($9, 1, 5), _UTF-16LE'65085'), =(SUBSTR($9, 1, 5), _UTF-16LE'22977'), =(SUBSTR($9, 1, 5), _UTF-16LE'83927'), =(SUBSTR($9, 1, 5), _UTF-16LE'77557'), =(SUBSTR($9, 1, 5), _UTF-16LE'58429'), =(SUBSTR($9, 1, 5), _UTF-16LE'40697'), =(SUBSTR($9, 1, 5), _UTF-16LE'80614'), =(SUBSTR($9, 1, 5), _UTF-16LE'10502'), =(SUBSTR($9, 1, 5), _UTF-16LE'32779'), =(SUBSTR($9, 1, 5), _UTF-16LE'91137'), =(SUBSTR($9, 1, 5), _UTF-16LE'61265'), =(SUBSTR($9, 1, 5), _UTF-16LE'98294'), =(SUBSTR($9, 1, 5), _UTF-16LE'17921'), =(SUBSTR($9, 1, 5), _UTF-16LE'18427'), =(SUBSTR($9, 1, 5), _UTF-16LE'21203'), =(SUBSTR($9, 1, 5), _UTF-16LE'59362'), =(SUBSTR($9, 1, 5), _UTF-16LE'87291'), =(SUBSTR($9, 1, 5), _UTF-16LE'84093'), =(SUBSTR($9, 1, 5), _UTF-16LE'21505'), =(SUBSTR($9, 1, 5), _UTF-16LE'17184'), =(SUBSTR($9, 1, 5), _UTF-16LE'10866'), =(SUBSTR($9, 1, 5), _UTF-16LE'67898'), =(SUBSTR($9, 1, 5), _UTF-16LE'25797'), =(SUBSTR($9, 1, 5), _UTF-16LE'28055'), =(SUBSTR($9, 1, 5), _UTF-16LE'18377'), =(SUBSTR($9, 1, 5), _UTF-16LE'80332'), =(SUBSTR($9, 1, 5), _UTF-16LE'74535'), =(SUBSTR($9, 1, 5), _UTF-16LE'21757'), =(SUBSTR($9, 1, 5), _UTF-16LE'29742'), =(SUBSTR($9, 1, 5), _UTF-16LE'90885'), =(SUBSTR($9, 1, 5), _UTF-16LE'29898'), =(SUBSTR($9, 1, 5), _UTF-16LE'17819'), =(SUBSTR($9, 1, 5), _UTF-16LE'40811'), =(SUBSTR($9, 1, 5), _UTF-16LE'25990'), =(SUBSTR($9, 1, 5), _UTF-16LE'47513'), =(SUBSTR($9, 1, 5), _UTF-16LE'89531'), =(SUBSTR($9, 1, 5), _UTF-16LE'91068'), =(SUBSTR($9, 1, 5), _UTF-16LE'10391'), =(SUBSTR($9, 1, 5), _UTF-16LE'18846'), =(SUBSTR($9, 1, 5), _UTF-16LE'99223'), =(SUBSTR($9, 1, 5), _UTF-16LE'82637'), =(SUBSTR($9, 1, 5), _UTF-16LE'41368'), =(SUBSTR($9, 1, 5), _UTF-16LE'83658'), =(SUBSTR($9, 1, 5), _UTF-16LE'86199'), =(SUBSTR($9, 1, 5), _UTF-16LE'81625'), =(SUBSTR($9, 1, 5), _UTF-16LE'26696'), =(SUBSTR($9, 1, 5), _UTF-16LE'89338'), =(SUBSTR($9, 1, 5), _UTF-16LE'88425'), =(SUBSTR($9, 1, 5), _UTF-16LE'32200'), =(SUBSTR($9, 1, 5), _UTF-16LE'81427'), =(SUBSTR($9, 1, 5), _UTF-16LE'19053'), =(SUBSTR($9, 1, 5), _UTF-16LE'77471'), =(SUBSTR($9, 1, 5), _UTF-16LE'36610'), =(SUBSTR($9, 1, 5), _UTF-16LE'99823'), =(SUBSTR($9, 1, 5), _UTF-16LE'43276'), =(SUBSTR($9, 1, 5), _UTF-16LE'41249'), =(SUBSTR($9, 1, 5), _UTF-16LE'48584'), =(SUBSTR($9, 1, 5), _UTF-16LE'83550'), =(SUBSTR($9, 1, 5), _UTF-16LE'82276'), =(SUBSTR($9, 1, 5), _UTF-16LE'18842'), =(SUBSTR($9, 1, 5), _UTF-16LE'78890'), =(SUBSTR($9, 1, 5), _UTF-16LE'14090'), =(SUBSTR($9, 1, 5), _UTF-16LE'38123'), =(SUBSTR($9, 1, 5), _UTF-16LE'40936'), =(SUBSTR($9, 1, 5), _UTF-16LE'34425'), =(SUBSTR($9, 1, 5), _UTF-16LE'19850'), =(SUBSTR($9, 1, 5), _UTF-16LE'43286'), =(SUBSTR($9, 1, 5), _UTF-16LE'80072'), =(SUBSTR($9, 1, 5), _UTF-16LE'79188'), =(SUBSTR($9, 1, 5), _UTF-16LE'54191'), =(SUBSTR($9, 1, 5), _UTF-16LE'11395'), =(SUBSTR($9, 1, 5), _UTF-16LE'50497'), =(SUBSTR($9, 1, 5), _UTF-16LE'84861'), =(SUBSTR($9, 1, 5), _UTF-16LE'90733'), =(SUBSTR($9, 1, 5), _UTF-16LE'21068'), =(SUBSTR($9, 1, 5), _UTF-16LE'57666'), =(SUBSTR($9, 1, 5), _UTF-16LE'37119'), =(SUBSTR($9, 1, 5), _UTF-16LE'25004'), =(SUBSTR($9, 1, 5), _UTF-16LE'57835'), =(SUBSTR($9, 1, 5), _UTF-16LE'70067'), =(SUBSTR($9, 1, 5), _UTF-16LE'62878'), =(SUBSTR($9, 1, 5), _UTF-16LE'95806'), =(SUBSTR($9, 1, 5), _UTF-16LE'19303'), =(SUBSTR($9, 1, 5), _UTF-16LE'18840'), =(SUBSTR($9, 1, 5), _UTF-16LE'19124'), =(SUBSTR($9, 1, 5), _UTF-16LE'29785'), =(SUBSTR($9, 1, 5), _UTF-16LE'16737'), =(SUBSTR($9, 1, 5), _UTF-16LE'16022'), =(SUBSTR($9, 1, 5), _UTF-16LE'49613'), =(SUBSTR($9, 1, 5), _UTF-16LE'89977'), =(SUBSTR($9, 1, 5), _UTF-16LE'68310'), =(SUBSTR($9, 1, 5), _UTF-16LE'60069'), =(SUBSTR($9, 1, 5), _UTF-16LE'98360'), =(SUBSTR($9, 1, 5), _UTF-16LE'48649'), =(SUBSTR($9, 1, 5), _UTF-16LE'39050'), =(SUBSTR($9, 1, 5), _UTF-16LE'41793'), =(SUBSTR($9, 1, 5), _UTF-16LE'25002'), =(SUBSTR($9, 1, 5), _UTF-16LE'27413'), =(SUBSTR($9, 1, 5), _UTF-16LE'39736'), =(SUBSTR($9, 1, 5), _UTF-16LE'47208'), =(SUBSTR($9, 1, 5), _UTF-16LE'16515'), =(SUBSTR($9, 1, 5), _UTF-16LE'94808'), =(SUBSTR($9, 1, 5), _UTF-16LE'57648'), =(SUBSTR($9, 1, 5), _UTF-16LE'15009'), =(SUBSTR($9, 1, 5), _UTF-16LE'80015'), =(SUBSTR($9, 1, 5), _UTF-16LE'42961'), =(SUBSTR($9, 1, 5), _UTF-16LE'63982'), =(SUBSTR($9, 1, 5), _UTF-16LE'21744'), =(SUBSTR($9, 1, 5), _UTF-16LE'71853'), =(SUBSTR($9, 1, 5), _UTF-16LE'81087'), =(SUBSTR($9, 1, 5), _UTF-16LE'67468'), =(SUBSTR($9, 1, 5), _UTF-16LE'34175'), =(SUBSTR($9, 1, 5), _UTF-16LE'64008'), =(SUBSTR($9, 1, 5), _UTF-16LE'20261'), =(SUBSTR($9, 1, 5), _UTF-16LE'11201'), =(SUBSTR($9, 1, 5), _UTF-16LE'51799'), =(SUBSTR($9, 1, 5), _UTF-16LE'48043'), =(SUBSTR($9, 1, 5), _UTF-16LE'45645'), =(SUBSTR($9, 1, 5), _UTF-16LE'61163'), =(SUBSTR($9, 1, 5), _UTF-16LE'48375'), =(SUBSTR($9, 1, 5), _UTF-16LE'36447'), =(SUBSTR($9, 1, 5), _UTF-16LE'57042'), =(SUBSTR($9, 1, 5), _UTF-16LE'21218'), =(SUBSTR($9, 1, 5), _UTF-16LE'41100'), =(SUBSTR($9, 1, 5), _UTF-16LE'89951'), =(SUBSTR($9, 1, 5), _UTF-16LE'22745'), =(SUBSTR($9, 1, 5), _UTF-16LE'35851'), =(SUBSTR($9, 1, 5), _UTF-16LE'83326'), =(SUBSTR($9, 1, 5), _UTF-16LE'61125'), =(SUBSTR($9, 1, 5), _UTF-16LE'78298'), =(SUBSTR($9, 1, 5), _UTF-16LE'80752'), =(SUBSTR($9, 1, 5), _UTF-16LE'49858'), =(SUBSTR($9, 1, 5), _UTF-16LE'52940'), =(SUBSTR($9, 1, 5), _UTF-16LE'96976'), =(SUBSTR($9, 1, 5), _UTF-16LE'63792'), =(SUBSTR($9, 1, 5), _UTF-16LE'11376'), =(SUBSTR($9, 1, 5), _UTF-16LE'53582'), =(SUBSTR($9, 1, 5), _UTF-16LE'18717'), =(SUBSTR($9, 1, 5), _UTF-16LE'90226'), =(SUBSTR($9, 1, 5), _UTF-16LE'50530'), =(SUBSTR($9, 1, 5), _UTF-16LE'94203'), =(SUBSTR($9, 1, 5), _UTF-16LE'99447'), =(SUBSTR($9, 1, 5), _UTF-16LE'27670'), =(SUBSTR($9, 1, 5), _UTF-16LE'96577'), =(SUBSTR($9, 1, 5), _UTF-16LE'57856'), =(SUBSTR($9, 1, 5), _UTF-16LE'56372'), =(SUBSTR($9, 1, 5), _UTF-16LE'16165'), =(SUBSTR($9, 1, 5), _UTF-16LE'23427'), =(SUBSTR($9, 1, 5), _UTF-16LE'54561'), =(SUBSTR($9, 1, 5), _UTF-16LE'28806'), =(SUBSTR($9, 1, 5), _UTF-16LE'44439'), =(SUBSTR($9, 1, 5), _UTF-16LE'22926'), =(SUBSTR($9, 1, 5), _UTF-16LE'30123'), =(SUBSTR($9, 1, 5), _UTF-16LE'61451'), =(SUBSTR($9, 1, 5), _UTF-16LE'92397'), =(SUBSTR($9, 1, 5), _UTF-16LE'56979'), =(SUBSTR($9, 1, 5), _UTF-16LE'92309'), =(SUBSTR($9, 1, 5), _UTF-16LE'70873'), =(SUBSTR($9, 1, 5), _UTF-16LE'13355'), =(SUBSTR($9, 1, 5), _UTF-16LE'21801'), =(SUBSTR($9, 1, 5), _UTF-16LE'46346'), =(SUBSTR($9, 1, 5), _UTF-16LE'37562'), =(SUBSTR($9, 1, 5), _UTF-16LE'56458'), =(SUBSTR($9, 1, 5), _UTF-16LE'28286'), =(SUBSTR($9, 1, 5), _UTF-16LE'47306'), =(SUBSTR($9, 1, 5), _UTF-16LE'99555'), =(SUBSTR($9, 1, 5), _UTF-16LE'69399'), =(SUBSTR($9, 1, 5), _UTF-16LE'26234'), =(SUBSTR($9, 1, 5), _UTF-16LE'47546'), =(SUBSTR($9, 1, 5), _UTF-16LE'49661'), =(SUBSTR($9, 1, 5), _UTF-16LE'88601'), =(SUBSTR($9, 1, 5), _UTF-16LE'35943'), =(SUBSTR($9, 1, 5), _UTF-16LE'39936'), =(SUBSTR($9, 1, 5), _UTF-16LE'25632'), =(SUBSTR($9, 1, 5), _UTF-16LE'24611'), =(SUBSTR($9, 1, 5), _UTF-16LE'44166'), =(SUBSTR($9, 1, 5), _UTF-16LE'56648'), =(SUBSTR($9, 1, 5), _UTF-16LE'30379'), =(SUBSTR($9, 1, 5), _UTF-16LE'59785'), =(SUBSTR($9, 1, 5), _UTF-16LE'11110'), =(SUBSTR($9, 1, 5), _UTF-16LE'14329'), =(SUBSTR($9, 1, 5), _UTF-16LE'93815'), =(SUBSTR($9, 1, 5), _UTF-16LE'52226'), =(SUBSTR($9, 1, 5), _UTF-16LE'71381'), =(SUBSTR($9, 1, 5), _UTF-16LE'13842'), =(SUBSTR($9, 1, 5), _UTF-16LE'25612'), =(SUBSTR($9, 1, 5), _UTF-16LE'63294'), =(SUBSTR($9, 1, 5), _UTF-16LE'14664'), =(SUBSTR($9, 1, 5), _UTF-16LE'21077'), =(SUBSTR($9, 1, 5), _UTF-16LE'82626'), =(SUBSTR($9, 1, 5), _UTF-16LE'18799'), =(SUBSTR($9, 1, 5), _UTF-16LE'60915'), =(SUBSTR($9, 1, 5), _UTF-16LE'81020'), =(SUBSTR($9, 1, 5), _UTF-16LE'56447'), =(SUBSTR($9, 1, 5), _UTF-16LE'76619'), =(SUBSTR($9, 1, 5), _UTF-16LE'11433'), =(SUBSTR($9, 1, 5), _UTF-16LE'13414'), =(SUBSTR($9, 1, 5), _UTF-16LE'42548'), =(SUBSTR($9, 1, 5), _UTF-16LE'92713'), =(SUBSTR($9, 1, 5), _UTF-16LE'70467'), =(SUBSTR($9, 1, 5), _UTF-16LE'30884'), =(SUBSTR($9, 1, 5), _UTF-16LE'47484'), =(SUBSTR($9, 1, 5), _UTF-16LE'16072'), =(SUBSTR($9, 1, 5), _UTF-16LE'38936'), =(SUBSTR($9, 1, 5), _UTF-16LE'13036'), =(SUBSTR($9, 1, 5), _UTF-16LE'88376'), =(SUBSTR($9, 1, 5), _UTF-16LE'45539'), =(SUBSTR($9, 1, 5), _UTF-16LE'35901'), =(SUBSTR($9, 1, 5), _UTF-16LE'19506'), =(SUBSTR($9, 1, 5), _UTF-16LE'65690'), =(SUBSTR($9, 1, 5), _UTF-16LE'73957'), =(SUBSTR($9, 1, 5), _UTF-16LE'71850'), =(SUBSTR($9, 1, 5), _UTF-16LE'49231'), =(SUBSTR($9, 1, 5), _UTF-16LE'14276'), =(SUBSTR($9, 1, 5), _UTF-16LE'20005'), =(SUBSTR($9, 1, 5), _UTF-16LE'18384'), =(SUBSTR($9, 1, 5), _UTF-16LE'76615'), =(SUBSTR($9, 1, 5), _UTF-16LE'11635'), =(SUBSTR($9, 1, 5), _UTF-16LE'38177'), =(SUBSTR($9, 1, 5), _UTF-16LE'55607'), =(SUBSTR($9, 1, 5), _UTF-16LE'41369'), =(SUBSTR($9, 1, 5), _UTF-16LE'95447'), =(SUBSTR($9, 1, 5), _UTF-16LE'58581'), =(SUBSTR($9, 1, 5), _UTF-16LE'58149'), =(SUBSTR($9, 1, 5), _UTF-16LE'91946'), =(SUBSTR($9, 1, 5), _UTF-16LE'33790'), =(SUBSTR($9, 1, 5), _UTF-16LE'76232'), =(SUBSTR($9, 1, 5), _UTF-16LE'75692'), =(SUBSTR($9, 1, 5), _UTF-16LE'95464'), =(SUBSTR($9, 1, 5), _UTF-16LE'22246'), =(SUBSTR($9, 1, 5), _UTF-16LE'51061'), =(SUBSTR($9, 1, 5), _UTF-16LE'56692'), =(SUBSTR($9, 1, 5), _UTF-16LE'53121'), =(SUBSTR($9, 1, 5), _UTF-16LE'77209'), =(SUBSTR($9, 1, 5), _UTF-16LE'15482'), =(SUBSTR($9, 1, 5), _UTF-16LE'10688'), =(SUBSTR($9, 1, 5), _UTF-16LE'14868'), =(SUBSTR($9, 1, 5), _UTF-16LE'45907'), =(SUBSTR($9, 1, 5), _UTF-16LE'73520'), =(SUBSTR($9, 1, 5), _UTF-16LE'72666'), =(SUBSTR($9, 1, 5), _UTF-16LE'25734'), =(SUBSTR($9, 1, 5), _UTF-16LE'17959'), =(SUBSTR($9, 1, 5), _UTF-16LE'24677'), =(SUBSTR($9, 1, 5), _UTF-16LE'66446'), =(SUBSTR($9, 1, 5), _UTF-16LE'94627'), =(SUBSTR($9, 1, 5), _UTF-16LE'53535'), =(SUBSTR($9, 1, 5), _UTF-16LE'15560'), =(SUBSTR($9, 1, 5), _UTF-16LE'41967'), =(SUBSTR($9, 1, 5), _UTF-16LE'69297'), =(SUBSTR($9, 1, 5), _UTF-16LE'11929'), =(SUBSTR($9, 1, 5), _UTF-16LE'59403'), =(SUBSTR($9, 1, 5), _UTF-16LE'33283'), =(SUBSTR($9, 1, 5), _UTF-16LE'52232'), =(SUBSTR($9, 1, 5), _UTF-16LE'57350'), =(SUBSTR($9, 1, 5), _UTF-16LE'43933'), =(SUBSTR($9, 1, 5), _UTF-16LE'40921'), =(SUBSTR($9, 1, 5), _UTF-16LE'36635'), =(SUBSTR($9, 1, 5), _UTF-16LE'10827'), =(SUBSTR($9, 1, 5), _UTF-16LE'71286'), =(SUBSTR($9, 1, 5), _UTF-16LE'19736'), =(SUBSTR($9, 1, 5), _UTF-16LE'80619'), =(SUBSTR($9, 1, 5), _UTF-16LE'25251'), =(SUBSTR($9, 1, 5), _UTF-16LE'95042'), =(SUBSTR($9, 1, 5), _UTF-16LE'15526'), =(SUBSTR($9, 1, 5), _UTF-16LE'36496'), =(SUBSTR($9, 1, 5), _UTF-16LE'55854'), =(SUBSTR($9, 1, 5), _UTF-16LE'49124'), =(SUBSTR($9, 1, 5), _UTF-16LE'81980'), =(SUBSTR($9, 1, 5), _UTF-16LE'35375'), =(SUBSTR($9, 1, 5), _UTF-16LE'49157'), =(SUBSTR($9, 1, 5), _UTF-16LE'63512'), =(SUBSTR($9, 1, 5), _UTF-16LE'28944'), =(SUBSTR($9, 1, 5), _UTF-16LE'14946'), =(SUBSTR($9, 1, 5), _UTF-16LE'36503'), =(SUBSTR($9, 1, 5), _UTF-16LE'54010'), =(SUBSTR($9, 1, 5), _UTF-16LE'18767'), =(SUBSTR($9, 1, 5), _UTF-16LE'23969'), =(SUBSTR($9, 1, 5), _UTF-16LE'43905'), =(SUBSTR($9, 1, 5), _UTF-16LE'66979'), =(SUBSTR($9, 1, 5), _UTF-16LE'33113'), =(SUBSTR($9, 1, 5), _UTF-16LE'21286'), =(SUBSTR($9, 1, 5), _UTF-16LE'58471'), =(SUBSTR($9, 1, 5), _UTF-16LE'59080'), =(SUBSTR($9, 1, 5), _UTF-16LE'13395'), =(SUBSTR($9, 1, 5), _UTF-16LE'79144'), =(SUBSTR($9, 1, 5), _UTF-16LE'70373'), =(SUBSTR($9, 1, 5), _UTF-16LE'67031'), =(SUBSTR($9, 1, 5), _UTF-16LE'38360'), =(SUBSTR($9, 1, 5), _UTF-16LE'26705'), =(SUBSTR($9, 1, 5), _UTF-16LE'50906'), =(SUBSTR($9, 1, 5), _UTF-16LE'52406'), =(SUBSTR($9, 1, 5), _UTF-16LE'26066'), =(SUBSTR($9, 1, 5), _UTF-16LE'73146'), =(SUBSTR($9, 1, 5), _UTF-16LE'15884'), =(SUBSTR($9, 1, 5), _UTF-16LE'31897'), =(SUBSTR($9, 1, 5), _UTF-16LE'30045'), =(SUBSTR($9, 1, 5), _UTF-16LE'61068'), =(SUBSTR($9, 1, 5), _UTF-16LE'45550'), =(SUBSTR($9, 1, 5), _UTF-16LE'92454'), =(SUBSTR($9, 1, 5), _UTF-16LE'13376'), =(SUBSTR($9, 1, 5), _UTF-16LE'14354'), =(SUBSTR($9, 1, 5), _UTF-16LE'19770'), =(SUBSTR($9, 1, 5), _UTF-16LE'22928'), =(SUBSTR($9, 1, 5), _UTF-16LE'97790'), =(SUBSTR($9, 1, 5), _UTF-16LE'50723'), =(SUBSTR($9, 1, 5), _UTF-16LE'46081'), =(SUBSTR($9, 1, 5), _UTF-16LE'30202'), =(SUBSTR($9, 1, 5), _UTF-16LE'14410'), =(SUBSTR($9, 1, 5), _UTF-16LE'20223'), =(SUBSTR($9, 1, 5), _UTF-16LE'88500'), =(SUBSTR($9, 1, 5), _UTF-16LE'67298'), =(SUBSTR($9, 1, 5), _UTF-16LE'13261'), =(SUBSTR($9, 1, 5), _UTF-16LE'14172'), =(SUBSTR($9, 1, 5), _UTF-16LE'81410'), =(SUBSTR($9, 1, 5), _UTF-16LE'93578'), =(SUBSTR($9, 1, 5), _UTF-16LE'83583'), =(SUBSTR($9, 1, 5), _UTF-16LE'46047'), =(SUBSTR($9, 1, 5), _UTF-16LE'94167'), =(SUBSTR($9, 1, 5), _UTF-16LE'82564'), =(SUBSTR($9, 1, 5), _UTF-16LE'21156'), =(SUBSTR($9, 1, 5), _UTF-16LE'15799'), =(SUBSTR($9, 1, 5), _UTF-16LE'86709'), =(SUBSTR($9, 1, 5), _UTF-16LE'37931'), =(SUBSTR($9, 1, 5), _UTF-16LE'74703'), =(SUBSTR($9, 1, 5), _UTF-16LE'83103'), =(SUBSTR($9, 1, 5), _UTF-16LE'23054'), =(SUBSTR($9, 1, 5), _UTF-16LE'70470'), =(SUBSTR($9, 1, 5), _UTF-16LE'72008'), =(SUBSTR($9, 1, 5), _UTF-16LE'49247'), =(SUBSTR($9, 1, 5), _UTF-16LE'91911'), =(SUBSTR($9, 1, 5), _UTF-16LE'69998'), =(SUBSTR($9, 1, 5), _UTF-16LE'20961'), =(SUBSTR($9, 1, 5), _UTF-16LE'70070'), =(SUBSTR($9, 1, 5), _UTF-16LE'63197'), =(SUBSTR($9, 1, 5), _UTF-16LE'54853'), =(SUBSTR($9, 1, 5), _UTF-16LE'88191'), =(SUBSTR($9, 1, 5), _UTF-16LE'91830'), =(SUBSTR($9, 1, 5), _UTF-16LE'49521'), =(SUBSTR($9, 1, 5), _UTF-16LE'19454'), =(SUBSTR($9, 1, 5), _UTF-16LE'81450'), =(SUBSTR($9, 1, 5), _UTF-16LE'89091'), =(SUBSTR($9, 1, 5), _UTF-16LE'62378'), =(SUBSTR($9, 1, 5), _UTF-16LE'25683'), =(SUBSTR($9, 1, 5), _UTF-16LE'61869'), =(SUBSTR($9, 1, 5), _UTF-16LE'51744'), =(SUBSTR($9, 1, 5), _UTF-16LE'36580'), =(SUBSTR($9, 1, 5), _UTF-16LE'85778'), =(SUBSTR($9, 1, 5), _UTF-16LE'36871'), =(SUBSTR($9, 1, 5), _UTF-16LE'48121'), =(SUBSTR($9, 1, 5), _UTF-16LE'28810'), =(SUBSTR($9, 1, 5), _UTF-16LE'83712'), =(SUBSTR($9, 1, 5), _UTF-16LE'45486'), =(SUBSTR($9, 1, 5), _UTF-16LE'67393'), =(SUBSTR($9, 1, 5), _UTF-16LE'26935'), =(SUBSTR($9, 1, 5), _UTF-16LE'42393'), =(SUBSTR($9, 1, 5), _UTF-16LE'20132'), =(SUBSTR($9, 1, 5), _UTF-16LE'55349'), =(SUBSTR($9, 1, 5), _UTF-16LE'86057'), =(SUBSTR($9, 1, 5), _UTF-16LE'21309'), =(SUBSTR($9, 1, 5), _UTF-16LE'80218'), =(SUBSTR($9, 1, 5), _UTF-16LE'10094'), =(SUBSTR($9, 1, 5), _UTF-16LE'11357'), =(SUBSTR($9, 1, 5), _UTF-16LE'48819'), =(SUBSTR($9, 1, 5), _UTF-16LE'39734'), =(SUBSTR($9, 1, 5), _UTF-16LE'40758'), =(SUBSTR($9, 1, 5), _UTF-16LE'30432'), =(SUBSTR($9, 1, 5), _UTF-16LE'21204'), =(SUBSTR($9, 1, 5), _UTF-16LE'29467'), =(SUBSTR($9, 1, 5), _UTF-16LE'30214'), =(SUBSTR($9, 1, 5), _UTF-16LE'61024'), =(SUBSTR($9, 1, 5), _UTF-16LE'55307'), =(SUBSTR($9, 1, 5), _UTF-16LE'74621'), =(SUBSTR($9, 1, 5), _UTF-16LE'11622'), =(SUBSTR($9, 1, 5), _UTF-16LE'68908'), =(SUBSTR($9, 1, 5), _UTF-16LE'33032'), =(SUBSTR($9, 1, 5), _UTF-16LE'52868'), =(SUBSTR($9, 1, 5), _UTF-16LE'99194'), =(SUBSTR($9, 1, 5), _UTF-16LE'99900'), =(SUBSTR($9, 1, 5), _UTF-16LE'84936'), =(SUBSTR($9, 1, 5), _UTF-16LE'69036'), =(SUBSTR($9, 1, 5), _UTF-16LE'99149'), =(SUBSTR($9, 1, 5), _UTF-16LE'45013'), =(SUBSTR($9, 1, 5), _UTF-16LE'32895'), =(SUBSTR($9, 1, 5), _UTF-16LE'59004'), =(SUBSTR($9, 1, 5), _UTF-16LE'32322'), =(SUBSTR($9, 1, 5), _UTF-16LE'14933'), =(SUBSTR($9, 1, 5), _UTF-16LE'32936'), =(SUBSTR($9, 1, 5), _UTF-16LE'33562'), =(SUBSTR($9, 1, 5), _UTF-16LE'72550'), =(SUBSTR($9, 1, 5), _UTF-16LE'27385'), =(SUBSTR($9, 1, 5), _UTF-16LE'58049'), =(SUBSTR($9, 1, 5), _UTF-16LE'58200'), =(SUBSTR($9, 1, 5), _UTF-16LE'16808'), =(SUBSTR($9, 1, 5), _UTF-16LE'21360'), =(SUBSTR($9, 1, 5), _UTF-16LE'32961'), =(SUBSTR($9, 1, 5), _UTF-16LE'18586'), =(SUBSTR($9, 1, 5), _UTF-16LE'79307'), =(SUBSTR($9, 1, 5), _UTF-16LE'15492'))])
                  :     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
                  +- LogicalProject(ca_zip=[SUBSTR($0, 1, 5)])
                     +- LogicalFilter(condition=[>($1, 10)])
                        +- LogicalAggregate(group=[{0}], cnt=[COUNT()])
                           +- LogicalProject(ca_zip=[$9])
                              +- LogicalFilter(condition=[AND(=($0, $17), =($23, _UTF-16LE'Y'))])
                                 +- LogicalJoin(condition=[true], joinType=[inner])
                                    :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
                                    +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[s_store_name ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[s_store_name ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], groupBy=[s_store_name], select=[s_store_name, Final_SUM(sum$0) AS EXPR$1])
         +- Exchange(distribution=[hash[s_store_name]])
            +- LocalHashAggregate(groupBy=[s_store_name], select=[s_store_name, Partial_SUM(ss_net_profit) AS sum$0])
               +- Calc(select=[s_store_name, ss_net_profit])
                  +- MultipleInput(readOrder=[0,0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[($f80 = $f1)], select=[ss_net_profit, s_store_name, $f80, $f1], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_net_profit, s_store_name, SUBSTR(s_zip, 1, 2) AS $f80])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, ss_net_profit, s_store_sk, s_store_name, s_zip], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_store_sk, ss_net_profit])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_store_sk, ss_net_profit, d_date_sk], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[ss_sold_date_sk, ss_store_sk, ss_net_profit], where=[ss_sold_date_sk IS NOT NULL])\n:     :     :  +- [#4] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_store_sk, ss_net_profit]]], fields=[ss_sold_date_sk, ss_store_sk, ss_net_profit])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :- Exchange(distribution=[broadcast])
                     :  +- Calc(select=[SUBSTR(ca_zip, 1, 2) AS $f1])
                     :     +- HashAggregate(isMerge=[false], groupBy=[ca_zip], select=[ca_zip])
                     :        +- Exchange(distribution=[hash[ca_zip]])
                     :           +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[LeftSemiJoin], where=[IS NOT DISTINCT FROM(ca_zip, ca_zip0)], select=[ca_zip], isBroadcast=[true], build=[right], tryDistinctBuildRow=[true])\n:- Calc(select=[SUBSTR(ca_zip, 1, 5) AS ca_zip], where=[SEARCH(SUBSTR(ca_zip, 1, 5), Sarg[_UTF-16LE'10094', _UTF-16LE'10391', _UTF-16LE'10502', _UTF-16LE'10688', _UTF-16LE'10827', _UTF-16LE'10866', _UTF-16LE'11110', _UTF-16LE'11201', _UTF-16LE'11357', _UTF-16LE'11376', _UTF-16LE'11395', _UTF-16LE'11433', _UTF-16LE'11622', _UTF-16LE'11635', _UTF-16LE'11929', _UTF-16LE'13036', _UTF-16LE'13261', _UTF-16LE'13355', _UTF-16LE'13376', _UTF-16LE'13395', _UTF-16LE'13414', _UTF-16LE'13842', _UTF-16LE'14090', _UTF-16LE'14172', _UTF-16LE'14276', _UTF-16LE'14329', _UTF-16LE'14354', _UTF-16LE'14410', _UTF-16LE'14664', _UTF-16LE'14868', _UTF-16LE'14933', _UTF-16LE'14946', _UTF-16LE'15009', _UTF-16LE'15482', _UTF-16LE'15492', _UTF-16LE'15526', _UTF-16LE'15560', _UTF-16LE'15799', _UTF-16LE'15884', _UTF-16LE'16022', _UTF-16LE'16072', _UTF-16LE'16165', _UTF-16LE'16515', _UTF-16LE'16737', _UTF-16LE'16808', _UTF-16LE'17184', _UTF-16LE'17819', _UTF-16LE'17921', _UTF-16LE'17959', _UTF-16LE'18377', _UTF-16LE'18384', _UTF-16LE'18427', _UTF-16LE'18586', _UTF-16LE'18717', _UTF-16LE'18767', _UTF-16LE'18799', _UTF-16LE'18840', _UTF-16LE'18842', _UTF-16LE'18846', _UTF-16LE'19053', _UTF-16LE'19124', _UTF-16LE'19303', _UTF-16LE'19454', _UTF-16LE'19506', _UTF-16LE'19736', _UTF-16LE'19770', _UTF-16LE'19850', _UTF-16LE'20005', _UTF-16LE'20132', _UTF-16LE'20223', _UTF-16LE'20261', _UTF-16LE'20961', _UTF-16LE'21068', _UTF-16LE'21077', _UTF-16LE'21156', _UTF-16LE'21203', _UTF-16LE'21204', _UTF-16LE'21218', _UTF-16LE'21286', _UTF-16LE'21309', _UTF-16LE'21360', _UTF-16LE'21505', _UTF-16LE'21744', _UTF-16LE'21757', _UTF-16LE'21801', _UTF-16LE'22246', _UTF-16LE'22745', _UTF-16LE'22926', _UTF-16LE'22928', _UTF-16LE'22977', _UTF-16LE'23054', _UTF-16LE'23427', _UTF-16LE'23969', _UTF-16LE'24611', _UTF-16LE'24677', _UTF-16LE'25002', _UTF-16LE'25004', _UTF-16LE'25251', _UTF-16LE'25612', _UTF-16LE'25632', _UTF-16LE'25683', _UTF-16LE'25734', _UTF-16LE'25797', _UTF-16LE'25990', _UTF-16LE'26066', _UTF-16LE'26234', _UTF-16LE'26696', _UTF-16LE'26705', _UTF-16LE'26935', _UTF-16LE'27385', _UTF-16LE'27413', _UTF-16LE'27670', _UTF-16LE'28055', _UTF-16LE'28286', _UTF-16LE'28806', _UTF-16LE'28810', _UTF-16LE'28944', _UTF-16LE'29467', _UTF-16LE'29742', _UTF-16LE'29785', _UTF-16LE'29898', _UTF-16LE'30045', _UTF-16LE'30123', _UTF-16LE'30202', _UTF-16LE'30214', _UTF-16LE'30379', _UTF-16LE'30432', _UTF-16LE'30868', _UTF-16LE'30884', _UTF-16LE'31897', _UTF-16LE'32200', _UTF-16LE'32322', _UTF-16LE'32779', _UTF-16LE'32895', _UTF-16LE'32936', _UTF-16LE'32961', _UTF-16LE'33032', _UTF-16LE'33113', _UTF-16LE'33283', _UTF-16LE'33562', _UTF-16LE'33790', _UTF-16LE'34175', _UTF-16LE'34425', _UTF-16LE'35375', _UTF-16LE'35851', _UTF-16LE'35901', _UTF-16LE'35943', _UTF-16LE'36447', _UTF-16LE'36496', _UTF-16LE'36503', _UTF-16LE'36580', _UTF-16LE'36610', _UTF-16LE'36635', _UTF-16LE'36871', _UTF-16LE'37119', _UTF-16LE'37562', _UTF-16LE'37931', _UTF-16LE'38123', _UTF-16LE'38177', _UTF-16LE'38360', _UTF-16LE'38936', _UTF-16LE'39050', _UTF-16LE'39734', _UTF-16LE'39736', _UTF-16LE'39936', _UTF-16LE'40697', _UTF-16LE'40758', _UTF-16LE'40811', _UTF-16LE'40921', _UTF-16LE'40936', _UTF-16LE'41100', _UTF-16LE'41249', _UTF-16LE'41368', _UTF-16LE'41369', _UTF-16LE'41793', _UTF-16LE'41967', _UTF-16LE'42393', _UTF-16LE'42548', _UTF-16LE'42961', _UTF-16LE'43276', _UTF-16LE'43286', _UTF-16LE'43905', _UTF-16LE'43933', _UTF-16LE'44166', _UTF-16LE'44439', _UTF-16LE'45013', _UTF-16LE'45486', _UTF-16LE'45539', _UTF-16LE'45550', _UTF-16LE'45645', _UTF-16LE'45907', _UTF-16LE'46047', _UTF-16LE'46081', _UTF-16LE'46346', _UTF-16LE'47208', _UTF-16LE'47306', _UTF-16LE'47484', _UTF-16LE'47513', _UTF-16LE'47546', _UTF-16LE'48043', _UTF-16LE'48121', _UTF-16LE'48375', _UTF-16LE'48584', _UTF-16LE'48649', _UTF-16LE'48819', _UTF-16LE'49124', _UTF-16LE'49157', _UTF-16LE'49231', _UTF-16LE'49247', _UTF-16LE'49521', _UTF-16LE'49613', _UTF-16LE'49661', _UTF-16LE'49858', _UTF-16LE'50497', _UTF-16LE'50530', _UTF-16LE'50723', _UTF-16LE'50906', _UTF-16LE'51061', _UTF-16LE'51744', _UTF-16LE'51799', _UTF-16LE'52226', _UTF-16LE'52232', _UTF-16LE'52406', _UTF-16LE'52868', _UTF-16LE'52940', _UTF-16LE'53121', _UTF-16LE'53535', _UTF-16LE'53582', _UTF-16LE'54010', _UTF-16LE'54191', _UTF-16LE'54561', _UTF-16LE'54853', _UTF-16LE'55307', _UTF-16LE'55349', _UTF-16LE'55607', _UTF-16LE'55854', _UTF-16LE'56372', _UTF-16LE'56447', _UTF-16LE'56458', _UTF-16LE'56648', _UTF-16LE'56692', _UTF-16LE'56979', _UTF-16LE'57042', _UTF-16LE'57350', _UTF-16LE'57648', _UTF-16LE'57666', _UTF-16LE'57835', _UTF-16LE'57856', _UTF-16LE'58049', _UTF-16LE'58149', _UTF-16LE'58200', _UTF-16LE'58429', _UTF-16LE'58471', _UTF-16LE'58581', _UTF-16LE'59004', _UTF-16LE'59080', _UTF-16LE'59362', _UTF-16LE'59403', _UTF-16LE'59785', _UTF-16LE'60069', _UTF-16LE'60915', _UTF-16LE'61024', _UTF-16LE'61068', _UTF-16LE'61125', _UTF-16LE'61163', _UTF-16LE'61265', _UTF-16LE'61451', _UTF-16LE'61869', _UTF-16LE'62378', _UTF-16LE'62878', _UTF-16LE'63197', _UTF-16LE'63294', _UTF-16LE'63512', _UTF-16LE'63792', _UTF-16LE'63982', _UTF-16LE'64008', _UTF-16LE'65085', _UTF-16LE'65690', _UTF-16LE'66446', _UTF-16LE'66979', _UTF-16LE'67031', _UTF-16LE'67298', _UTF-16LE'67393', _UTF-16LE'67468', _UTF-16LE'67898', _UTF-16LE'68310', _UTF-16LE'68908', _UTF-16LE'69036', _UTF-16LE'69297', _UTF-16LE'69399', _UTF-16LE'69998', _UTF-16LE'70067', _UTF-16LE'70070', _UTF-16LE'70373', _UTF-16LE'70467', _UTF-16LE'70470', _UTF-16LE'70873', _UTF-16LE'71286', _UTF-16LE'71381', _UTF-16LE'71850', _UTF-16LE'71853', _UTF-16LE'72008', _UTF-16LE'72550', _UTF-16LE'72666', _UTF-16LE'73146', _UTF-16LE'73520', _UTF-16LE'73957', _UTF-16LE'74535', _UTF-16LE'74621', _UTF-16LE'74703', _UTF-16LE'75692', _UTF-16LE'76232', _UTF-16LE'76615', _UTF-16LE'76619', _UTF-16LE'77209', _UTF-16LE'77471', _UTF-16LE'77557', _UTF-16LE'78298', _UTF-16LE'78890', _UTF-16LE'79144', _UTF-16LE'79188', _UTF-16LE'79307', _UTF-16LE'80015', _UTF-16LE'80072', _UTF-16LE'80218', _UTF-16LE'80332', _UTF-16LE'80614', _UTF-16LE'80619', _UTF-16LE'80752', _UTF-16LE'81020', _UTF-16LE'81087', _UTF-16LE'81410', _UTF-16LE'81427', _UTF-16LE'81450', _UTF-16LE'81625', _UTF-16LE'81980', _UTF-16LE'82276', _UTF-16LE'82564', _UTF-16LE'82626', _UTF-16LE'82637', _UTF-16LE'83103', _UTF-16LE'83326', _UTF-16LE'83550', _UTF-16LE'83583', _UTF-16LE'83658', _UTF-16LE'83712', _UTF-16LE'83927', _UTF-16LE'84093', _UTF-16LE'84861', _UTF-16LE'84936', _UTF-16LE'85778', _UTF-16LE'86057', _UTF-16LE'86199', _UTF-16LE'86709', _UTF-16LE'87291', _UTF-16LE'88191', _UTF-16LE'88376', _UTF-16LE'88425', _UTF-16LE'88500', _UTF-16LE'88601', _UTF-16LE'89091', _UTF-16LE'89338', _UTF-16LE'89436', _UTF-16LE'89531', _UTF-16LE'89951', _UTF-16LE'89977', _UTF-16LE'90226', _UTF-16LE'90733', _UTF-16LE'90885', _UTF-16LE'91068', _UTF-16LE'91137', _UTF-16LE'91830', _UTF-16LE'91911', _UTF-16LE'91946', _UTF-16LE'92309', _UTF-16LE'92397', _UTF-16LE'92454', _UTF-16LE'92713', _UTF-16LE'93578', _UTF-16LE'93815', _UTF-16LE'94167', _UTF-16LE'94203', _UTF-16LE'94627', _UTF-16LE'94808', _UTF-16LE'95042', _UTF-16LE'95447', _UTF-16LE'95464', _UTF-16LE'95806', _UTF-16LE'96577', _UTF-16LE'96976', _UTF-16LE'97790', _UTF-16LE'98294', _UTF-16LE'98360', _UTF-16LE'99149', _UTF-16LE'99194', _UTF-16LE'99223', _UTF-16LE'99447', _UTF-16LE'99555', _UTF-16LE'99823', _UTF-16LE'99900'])])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_zip]]], fields=[ca_zip])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :              :- Exchange(distribution=[broadcast])
                     :              :  +- LocalHashAggregate(groupBy=[ca_zip], select=[ca_zip])
                     :              :     +- Calc(select=[SUBSTR(ca_zip, 1, 5) AS ca_zip], where=[(cnt > 10)])
                     :              :        +- HashAggregate(isMerge=[true], groupBy=[ca_zip], select=[ca_zip, Final_COUNT(count1$0) AS cnt])
                     :              :           +- Exchange(distribution=[hash[ca_zip]])
                     :              :              +- LocalHashAggregate(groupBy=[ca_zip], select=[ca_zip, Partial_COUNT(*) AS count1$0])
                     :              :                 +- Calc(select=[ca_zip])
                     :              :                    +- HashJoin(joinType=[InnerJoin], where=[(ca_address_sk = c_current_addr_sk)], select=[ca_address_sk, ca_zip, c_current_addr_sk], build=[right])
                     :              :                       :- Exchange(distribution=[hash[ca_address_sk]])
                     :              :                       :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_zip]]], fields=[ca_address_sk, ca_zip])
                     :              :                       +- Exchange(distribution=[hash[c_current_addr_sk]])
                     :              :                          +- Calc(select=[c_current_addr_sk], where=[(c_preferred_cust_flag = 'Y')])
                     :              :                             +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_current_addr_sk, c_preferred_cust_flag]]], fields=[c_current_addr_sk, c_preferred_cust_flag])
                     :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_zip]]], fields=[ca_zip])
                     :- Exchange(distribution=[broadcast])
                     :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_store_name, s_zip]]], fields=[s_store_sk, s_store_name, s_zip])
                     :- Exchange(distribution=[broadcast])
                     :  +- Calc(select=[d_date_sk], where=[((d_qoy = 1) AND (d_year = 2002))])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_qoy]]], fields=[d_date_sk, d_year, d_qoy])
                     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_store_sk, ss_net_profit]]], fields=[ss_sold_date_sk, ss_store_sk, ss_net_profit])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q9]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query9.tpl and seed 1490436826
select case when (select count(*) 
                  from store_sales 
                  where ss_quantity between 1 and 20) > 409437
            then (select avg(ss_ext_list_price) 
                  from store_sales 
                  where ss_quantity between 1 and 20) 
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 1 and 20) end bucket1 ,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 21 and 40) > 4595804
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 21 and 40) 
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 21 and 40) end bucket2,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 41 and 60) > 7887297
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 41 and 60)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 41 and 60) end bucket3,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 61 and 80) > 10872978
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 61 and 80)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 61 and 80) end bucket4,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 81 and 100) > 43571537
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 81 and 100)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 81 and 100) end bucket5
from reason
where r_reason_sk = 1


-- end query 1 in stream 0 using template query9.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(bucket1=[CASE(>($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[0])
    LogicalFilter(condition=[AND(>=($10, 1), <=($10, 20))])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
}), 409437), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_ext_list_price=[$17])
    LogicalFilter(condition=[AND(>=($10, 1), <=($10, 20))])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
}), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_net_paid_inc_tax=[$21])
    LogicalFilter(condition=[AND(>=($10, 1), <=($10, 20))])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
}))], bucket2=[CASE(>($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[0])
    LogicalFilter(condition=[AND(>=($10, 21), <=($10, 40))])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
}), 4595804), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_ext_list_price=[$17])
    LogicalFilter(condition=[AND(>=($10, 21), <=($10, 40))])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
}), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_net_paid_inc_tax=[$21])
    LogicalFilter(condition=[AND(>=($10, 21), <=($10, 40))])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
}))], bucket3=[CASE(>($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[0])
    LogicalFilter(condition=[AND(>=($10, 41), <=($10, 60))])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
}), 7887297), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_ext_list_price=[$17])
    LogicalFilter(condition=[AND(>=($10, 41), <=($10, 60))])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
}), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_net_paid_inc_tax=[$21])
    LogicalFilter(condition=[AND(>=($10, 41), <=($10, 60))])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
}))], bucket4=[CASE(>($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[0])
    LogicalFilter(condition=[AND(>=($10, 61), <=($10, 80))])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
}), 10872978), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_ext_list_price=[$17])
    LogicalFilter(condition=[AND(>=($10, 61), <=($10, 80))])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
}), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_net_paid_inc_tax=[$21])
    LogicalFilter(condition=[AND(>=($10, 61), <=($10, 80))])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
}))], bucket5=[CASE(>($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[0])
    LogicalFilter(condition=[AND(>=($10, 81), <=($10, 100))])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
}), 43571537), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_ext_list_price=[$17])
    LogicalFilter(condition=[AND(>=($10, 81), <=($10, 100))])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
}), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(ss_net_paid_inc_tax=[$21])
    LogicalFilter(condition=[AND(>=($10, 81), <=($10, 100))])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
}))])
+- LogicalFilter(condition=[=($0, 1)])
   +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, reason]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[CASE((EXPR$0 > 409437), EXPR$00, EXPR$01) AS bucket1, CASE((EXPR$02 > 4595804), EXPR$03, EXPR$04) AS bucket2, CASE((EXPR$05 > 7887297), EXPR$06, EXPR$07) AS bucket3, CASE((EXPR$08 > 10872978), EXPR$09, EXPR$010) AS bucket4, CASE((EXPR$011 > 43571537), EXPR$012, EXPR$013) AS bucket5])
+- MultipleInput(readOrder=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[true], select=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04, EXPR$05, EXPR$06, EXPR$07, EXPR$08, EXPR$09, EXPR$010, EXPR$011, EXPR$012, EXPR$013], build=[right], singleRowJoin=[true])\n:- NestedLoopJoin(joinType=[LeftOuterJoin], where=[true], select=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04, EXPR$05, EXPR$06, EXPR$07, EXPR$08, EXPR$09, EXPR$010, EXPR$011, EXPR$012], build=[right], singleRowJoin=[true])\n:  :- NestedLoopJoin(joinType=[LeftOuterJoin], where=[true], select=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04, EXPR$05, EXPR$06, EXPR$07, EXPR$08, EXPR$09, EXPR$010, EXPR$011], build=[right], singleRowJoin=[true])\n:  :  :- NestedLoopJoin(joinType=[LeftOuterJoin], where=[true], select=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04, EXPR$05, EXPR$06, EXPR$07, EXPR$08, EXPR$09, EXPR$010], build=[right], singleRowJoin=[true])\n:  :  :  :- NestedLoopJoin(joinType=[LeftOuterJoin], where=[true], select=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04, EXPR$05, EXPR$06, EXPR$07, EXPR$08, EXPR$09], build=[right], singleRowJoin=[true])\n:  :  :  :  :- NestedLoopJoin(joinType=[LeftOuterJoin], where=[true], select=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04, EXPR$05, EXPR$06, EXPR$07, EXPR$08], build=[right], singleRowJoin=[true])\n:  :  :  :  :  :- NestedLoopJoin(joinType=[LeftOuterJoin], where=[true], select=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04, EXPR$05, EXPR$06, EXPR$07], build=[right], singleRowJoin=[true])\n:  :  :  :  :  :  :- NestedLoopJoin(joinType=[LeftOuterJoin], where=[true], select=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04, EXPR$05, EXPR$06], build=[right], singleRowJoin=[true])\n:  :  :  :  :  :  :  :- NestedLoopJoin(joinType=[LeftOuterJoin], where=[true], select=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04, EXPR$05], build=[right], singleRowJoin=[true])\n:  :  :  :  :  :  :  :  :- NestedLoopJoin(joinType=[LeftOuterJoin], where=[true], select=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03, EXPR$04], build=[right], singleRowJoin=[true])\n:  :  :  :  :  :  :  :  :  :- NestedLoopJoin(joinType=[LeftOuterJoin], where=[true], select=[EXPR$0, EXPR$00, EXPR$01, EXPR$02, EXPR$03], build=[right], singleRowJoin=[true])\n:  :  :  :  :  :  :  :  :  :  :- NestedLoopJoin(joinType=[LeftOuterJoin], where=[true], select=[EXPR$0, EXPR$00, EXPR$01, EXPR$02], build=[right], singleRowJoin=[true])\n:  :  :  :  :  :  :  :  :  :  :  :- NestedLoopJoin(joinType=[LeftOuterJoin], where=[true], select=[EXPR$0, EXPR$00, EXPR$01], build=[right], singleRowJoin=[true])\n:  :  :  :  :  :  :  :  :  :  :  :  :- NestedLoopJoin(joinType=[LeftOuterJoin], where=[true], select=[EXPR$0, EXPR$00], build=[right], singleRowJoin=[true])\n:  :  :  :  :  :  :  :  :  :  :  :  :  :- Calc(select=[EXPR$0])\n:  :  :  :  :  :  :  :  :  :  :  :  :  :  +- NestedLoopJoin(joinType=[LeftOuterJoin], where=[true], select=[r_reason_sk, EXPR$0], build=[right], singleRowJoin=[true])\n:  :  :  :  :  :  :  :  :  :  :  :  :  :     :- Calc(select=[r_reason_sk], where=[(r_reason_sk = 1)])\n:  :  :  :  :  :  :  :  :  :  :  :  :  :     :  +- [#16] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, reason, project=[r_reason_sk]]], fields=[r_reason_sk])\n:  :  :  :  :  :  :  :  :  :  :  :  :  :     +- [#15] Exchange(distribution=[broadcast])\n:  :  :  :  :  :  :  :  :  :  :  :  :  +- [#14] Exchange(distribution=[broadcast])\n:  :  :  :  :  :  :  :  :  :  :  :  +- [#13] Exchange(distribution=[broadcast])\n:  :  :  :  :  :  :  :  :  :  :  +- [#12] Exchange(distribution=[broadcast])\n:  :  :  :  :  :  :  :  :  :  +- [#11] Exchange(distribution=[broadcast])\n:  :  :  :  :  :  :  :  :  +- [#10] Exchange(distribution=[broadcast])\n:  :  :  :  :  :  :  :  +- [#9] Exchange(distribution=[broadcast])\n:  :  :  :  :  :  :  +- [#8] Exchange(distribution=[broadcast])\n:  :  :  :  :  :  +- [#7] Exchange(distribution=[broadcast])\n:  :  :  :  :  +- [#6] Exchange(distribution=[broadcast])\n:  :  :  :  +- [#5] Exchange(distribution=[broadcast])\n:  :  :  +- [#4] Exchange(distribution=[broadcast])\n:  :  +- [#3] Exchange(distribution=[broadcast])\n:  +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :     +- Exchange(distribution=[single])
   :        +- LocalHashAggregate(select=[Partial_AVG(ss_net_paid_inc_tax) AS (sum$0, count$1)])
   :           +- Calc(select=[ss_net_paid_inc_tax], where=[SEARCH(ss_quantity, Sarg[[81..100]])])
   :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity, ss_net_paid_inc_tax]]], fields=[ss_quantity, ss_net_paid_inc_tax])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :     +- Exchange(distribution=[single])
   :        +- LocalHashAggregate(select=[Partial_AVG(ss_ext_list_price) AS (sum$0, count$1)])
   :           +- Calc(select=[ss_ext_list_price], where=[SEARCH(ss_quantity, Sarg[[81..100]])])
   :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity, ss_ext_list_price]]], fields=[ss_quantity, ss_ext_list_price])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[true], select=[Final_COUNT(count1$0) AS EXPR$0])
   :     +- Exchange(distribution=[single])
   :        +- LocalHashAggregate(select=[Partial_COUNT(*) AS count1$0])
   :           +- Calc(select=[0 AS $f0], where=[SEARCH(ss_quantity, Sarg[[81..100]])])
   :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity]]], fields=[ss_quantity])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :     +- Exchange(distribution=[single])
   :        +- LocalHashAggregate(select=[Partial_AVG(ss_net_paid_inc_tax) AS (sum$0, count$1)])
   :           +- Calc(select=[ss_net_paid_inc_tax], where=[SEARCH(ss_quantity, Sarg[[61..80]])])
   :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity, ss_net_paid_inc_tax]]], fields=[ss_quantity, ss_net_paid_inc_tax])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :     +- Exchange(distribution=[single])
   :        +- LocalHashAggregate(select=[Partial_AVG(ss_ext_list_price) AS (sum$0, count$1)])
   :           +- Calc(select=[ss_ext_list_price], where=[SEARCH(ss_quantity, Sarg[[61..80]])])
   :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity, ss_ext_list_price]]], fields=[ss_quantity, ss_ext_list_price])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[true], select=[Final_COUNT(count1$0) AS EXPR$0])
   :     +- Exchange(distribution=[single])
   :        +- LocalHashAggregate(select=[Partial_COUNT(*) AS count1$0])
   :           +- Calc(select=[0 AS $f0], where=[SEARCH(ss_quantity, Sarg[[61..80]])])
   :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity]]], fields=[ss_quantity])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :     +- Exchange(distribution=[single])
   :        +- LocalHashAggregate(select=[Partial_AVG(ss_net_paid_inc_tax) AS (sum$0, count$1)])
   :           +- Calc(select=[ss_net_paid_inc_tax], where=[SEARCH(ss_quantity, Sarg[[41..60]])])
   :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity, ss_net_paid_inc_tax]]], fields=[ss_quantity, ss_net_paid_inc_tax])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :     +- Exchange(distribution=[single])
   :        +- LocalHashAggregate(select=[Partial_AVG(ss_ext_list_price) AS (sum$0, count$1)])
   :           +- Calc(select=[ss_ext_list_price], where=[SEARCH(ss_quantity, Sarg[[41..60]])])
   :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity, ss_ext_list_price]]], fields=[ss_quantity, ss_ext_list_price])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[true], select=[Final_COUNT(count1$0) AS EXPR$0])
   :     +- Exchange(distribution=[single])
   :        +- LocalHashAggregate(select=[Partial_COUNT(*) AS count1$0])
   :           +- Calc(select=[0 AS $f0], where=[SEARCH(ss_quantity, Sarg[[41..60]])])
   :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity]]], fields=[ss_quantity])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :     +- Exchange(distribution=[single])
   :        +- LocalHashAggregate(select=[Partial_AVG(ss_net_paid_inc_tax) AS (sum$0, count$1)])
   :           +- Calc(select=[ss_net_paid_inc_tax], where=[SEARCH(ss_quantity, Sarg[[21..40]])])
   :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity, ss_net_paid_inc_tax]]], fields=[ss_quantity, ss_net_paid_inc_tax])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :     +- Exchange(distribution=[single])
   :        +- LocalHashAggregate(select=[Partial_AVG(ss_ext_list_price) AS (sum$0, count$1)])
   :           +- Calc(select=[ss_ext_list_price], where=[SEARCH(ss_quantity, Sarg[[21..40]])])
   :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity, ss_ext_list_price]]], fields=[ss_quantity, ss_ext_list_price])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[true], select=[Final_COUNT(count1$0) AS EXPR$0])
   :     +- Exchange(distribution=[single])
   :        +- LocalHashAggregate(select=[Partial_COUNT(*) AS count1$0])
   :           +- Calc(select=[0 AS $f0], where=[SEARCH(ss_quantity, Sarg[[21..40]])])
   :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity]]], fields=[ss_quantity])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :     +- Exchange(distribution=[single])
   :        +- LocalHashAggregate(select=[Partial_AVG(ss_net_paid_inc_tax) AS (sum$0, count$1)])
   :           +- Calc(select=[ss_net_paid_inc_tax], where=[SEARCH(ss_quantity, Sarg[[1..20]])])
   :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity, ss_net_paid_inc_tax]]], fields=[ss_quantity, ss_net_paid_inc_tax])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[true], select=[Final_AVG(sum$0, count$1) AS EXPR$0])
   :     +- Exchange(distribution=[single])
   :        +- LocalHashAggregate(select=[Partial_AVG(ss_ext_list_price) AS (sum$0, count$1)])
   :           +- Calc(select=[ss_ext_list_price], where=[SEARCH(ss_quantity, Sarg[[1..20]])])
   :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity, ss_ext_list_price]]], fields=[ss_quantity, ss_ext_list_price])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[true], select=[Final_COUNT(count1$0) AS EXPR$0])
   :     +- Exchange(distribution=[single])
   :        +- LocalHashAggregate(select=[Partial_COUNT(*) AS count1$0])
   :           +- Calc(select=[0 AS $f0], where=[SEARCH(ss_quantity, Sarg[[1..20]])])
   :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_quantity]]], fields=[ss_quantity])
   +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, reason, project=[r_reason_sk]]], fields=[r_reason_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q90]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query90.tpl and seed 2031708268
select  cast(amc as decimal(15,4))/cast(pmc as decimal(15,4)) am_pm_ratio
 from ( select count(*) amc
       from web_sales, household_demographics , time_dim, web_page
       where ws_sold_time_sk = time_dim.t_time_sk
         and ws_ship_hdemo_sk = household_demographics.hd_demo_sk
         and ws_web_page_sk = web_page.wp_web_page_sk
         and time_dim.t_hour between 6 and 6+1
         and household_demographics.hd_dep_count = 8
         and web_page.wp_char_count between 5000 and 5200) `at`,
      ( select count(*) pmc
       from web_sales, household_demographics , time_dim, web_page
       where ws_sold_time_sk = time_dim.t_time_sk
         and ws_ship_hdemo_sk = household_demographics.hd_demo_sk
         and ws_web_page_sk = web_page.wp_web_page_sk
         and time_dim.t_hour between 14 and 14+1
         and household_demographics.hd_dep_count = 8
         and web_page.wp_char_count between 5000 and 5200) pt
 order by am_pm_ratio
 limit 100

-- end query 1 in stream 0 using template query90.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalProject(am_pm_ratio=[/(CAST($0):DECIMAL(15, 4) NOT NULL, CAST($1):DECIMAL(15, 4) NOT NULL)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalAggregate(group=[{}], amc=[COUNT()])
      :  +- LogicalProject($f0=[0])
      :     +- LogicalFilter(condition=[AND(=($1, $39), =($10, $34), =($12, $49), >=($42, 6), <=($42, +(6, 1)), =($37, 8), >=($59, 5000), <=($59, 5200))])
      :        +- LogicalJoin(condition=[true], joinType=[inner])
      :           :- LogicalJoin(condition=[true], joinType=[inner])
      :           :  :- LogicalJoin(condition=[true], joinType=[inner])
      :           :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
      :           :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
      :           :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, time_dim]])
      :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_page]])
      +- LogicalAggregate(group=[{}], pmc=[COUNT()])
         +- LogicalProject($f0=[0])
            +- LogicalFilter(condition=[AND(=($1, $39), =($10, $34), =($12, $49), >=($42, 14), <=($42, +(14, 1)), =($37, 8), >=($59, 5000), <=($59, 5200))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
                  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
                  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, time_dim]])
                  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_page]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[am_pm_ratio ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[am_pm_ratio ASC], offset=[0], fetch=[100], global=[false])
      +- Calc(select=[(CAST(amc AS DECIMAL(15, 4)) / CAST(pmc AS DECIMAL(15, 4))) AS am_pm_ratio])
         +- NestedLoopJoin(joinType=[InnerJoin], where=[true], select=[amc, pmc], build=[left], singleRowJoin=[true])
            :- Exchange(distribution=[broadcast])
            :  +- HashAggregate(isMerge=[true], select=[Final_COUNT(count1$0) AS amc])
            :     +- Exchange(distribution=[single])
            :        +- LocalHashAggregate(select=[Partial_COUNT(*) AS count1$0])
            :           +- Calc(select=[0 AS $f0])
            :              +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_web_page_sk = wp_web_page_sk)], select=[ws_web_page_sk, wp_web_page_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ws_web_page_sk])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ws_sold_time_sk = t_time_sk)], select=[ws_sold_time_sk, ws_web_page_sk, t_time_sk], isBroadcast=[true], build=[right])\n:     :- [#2] Calc(select=[ws_sold_time_sk, ws_web_page_sk])\n:     +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :                 :- Exchange(distribution=[broadcast])(reuse_id=[1])
            :                 :  +- Calc(select=[wp_web_page_sk], where=[SEARCH(wp_char_count, Sarg[[5000..5200]])])
            :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_page, project=[wp_web_page_sk, wp_char_count]]], fields=[wp_web_page_sk, wp_char_count])
            :                 :- Calc(select=[ws_sold_time_sk, ws_web_page_sk])(reuse_id=[2])
            :                 :  +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_ship_hdemo_sk = hd_demo_sk)], select=[ws_sold_time_sk, ws_ship_hdemo_sk, ws_web_page_sk, hd_demo_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_time_sk, ws_ship_hdemo_sk, ws_web_page_sk]]], fields=[ws_sold_time_sk, ws_ship_hdemo_sk, ws_web_page_sk])\n+- [#2] Exchange(distribution=[broadcast])\n])
            :                 :     :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_time_sk, ws_ship_hdemo_sk, ws_web_page_sk]]], fields=[ws_sold_time_sk, ws_ship_hdemo_sk, ws_web_page_sk])
            :                 :     +- Exchange(distribution=[broadcast])
            :                 :        +- Calc(select=[hd_demo_sk], where=[SEARCH(hd_dep_count, Sarg[8])])
            :                 :           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, household_demographics, project=[hd_demo_sk, hd_dep_count]]], fields=[hd_demo_sk, hd_dep_count])
            :                 +- Exchange(distribution=[broadcast])
            :                    +- Calc(select=[t_time_sk], where=[SEARCH(t_hour, Sarg[[6..7]])])
            :                       +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, time_dim, project=[t_time_sk, t_hour]]], fields=[t_time_sk, t_hour])
            +- Exchange(distribution=[any])
               +- HashAggregate(isMerge=[true], select=[Final_COUNT(count1$0) AS pmc])
                  +- Exchange(distribution=[single])
                     +- LocalHashAggregate(select=[Partial_COUNT(*) AS count1$0])
                        +- Calc(select=[0 AS $f0])
                           +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_web_page_sk = wp_web_page_sk)], select=[ws_web_page_sk, wp_web_page_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ws_web_page_sk])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ws_sold_time_sk = t_time_sk)], select=[ws_sold_time_sk, ws_web_page_sk, t_time_sk], isBroadcast=[true], build=[right])\n:     :- [#2] Calc(select=[ws_sold_time_sk, ws_web_page_sk])\n:     +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                              :- Reused(reference_id=[1])
                              :- Reused(reference_id=[2])
                              +- Exchange(distribution=[broadcast])
                                 +- Calc(select=[t_time_sk], where=[SEARCH(t_hour, Sarg[[14..15]])])
                                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, time_dim, project=[t_time_sk, t_hour]]], fields=[t_time_sk, t_hour])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q91]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query91.tpl and seed 1930872976
select  
        cc_call_center_id Call_Center,
        cc_name Call_Center_Name,
        cc_manager Manager,
        sum(cr_net_loss) Returns_Loss
from
        call_center,
        catalog_returns,
        date_dim,
        customer,
        customer_address,
        customer_demographics,
        household_demographics
where
        cr_call_center_sk       = cc_call_center_sk
and     cr_returned_date_sk     = d_date_sk
and     cr_returning_customer_sk= c_customer_sk
and     cd_demo_sk              = c_current_cdemo_sk
and     hd_demo_sk              = c_current_hdemo_sk
and     ca_address_sk           = c_current_addr_sk
and     d_year                  = 1999 
and     d_moy                   = 11
and     ( (cd_marital_status       = 'M' and cd_education_status     = 'Unknown')
        or(cd_marital_status       = 'W' and cd_education_status     = 'Advanced Degree'))
and     hd_buy_potential like '0-500%'
and     ca_gmt_offset           = -7
group by cc_call_center_id,cc_name,cc_manager,cd_marital_status,cd_education_status
order by sum(cr_net_loss) desc

-- end query 1 in stream 0 using template query91.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$3], dir0=[DESC-nulls-last])
+- LogicalProject(Call_Center=[$0], Call_Center_Name=[$1], Manager=[$2], Returns_Loss=[$5])
   +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], Returns_Loss=[SUM($5)])
      +- LogicalProject(Call_Center=[$1], Call_Center_Name=[$6], Manager=[$11], cd_marital_status=[$119], cd_education_status=[$120], cr_net_loss=[$57])
         +- LogicalFilter(condition=[AND(=($42, $0), =($31, $58), =($38, $86), =($117, $88), =($126, $89), =($104, $90), =($64, 1999), =($66, 11), OR(AND(=($119, _UTF-16LE'M'), =($120, _UTF-16LE'Unknown')), AND(=($119, _UTF-16LE'W'), =($120, _UTF-16LE'Advanced Degree'))), LIKE($128, _UTF-16LE'0-500%'), =($115, -7))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, call_center]])
               :  :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns]])
               :  :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
               :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer]])
               :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
               :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics]])
               +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Sort(orderBy=[Returns_Loss DESC])
+- Exchange(distribution=[single])
   +- Calc(select=[cc_call_center_id AS Call_Center, cc_name AS Call_Center_Name, cc_manager AS Manager, Returns_Loss])
      +- HashAggregate(isMerge=[true], groupBy=[cd_marital_status, cd_education_status, cc_call_center_id, cc_name, cc_manager], select=[cd_marital_status, cd_education_status, cc_call_center_id, cc_name, cc_manager, Final_SUM(sum$0) AS Returns_Loss])
         +- Exchange(distribution=[hash[cd_marital_status, cd_education_status, cc_call_center_id, cc_name, cc_manager]])
            +- LocalHashAggregate(groupBy=[cd_marital_status, cd_education_status, cc_call_center_id, cc_name, cc_manager], select=[cd_marital_status, cd_education_status, cc_call_center_id, cc_name, cc_manager, Partial_SUM(Returns_Loss) AS sum$0])
               +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cr_call_center_sk = cc_call_center_sk)], select=[cr_call_center_sk, cd_marital_status, cd_education_status, Returns_Loss, cc_call_center_sk, cc_call_center_id, cc_name, cc_manager], isBroadcast=[true], build=[right])\n:- HashAggregate(isMerge=[true], groupBy=[cr_call_center_sk, cd_marital_status, cd_education_status], select=[cr_call_center_sk, cd_marital_status, cd_education_status, Final_SUM(sum$0) AS Returns_Loss])\n:  +- [#2] Exchange(distribution=[hash[cr_call_center_sk, cd_marital_status, cd_education_status]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :- Exchange(distribution=[broadcast])
                  :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, call_center, project=[cc_call_center_sk, cc_call_center_id, cc_name, cc_manager]]], fields=[cc_call_center_sk, cc_call_center_id, cc_name, cc_manager])
                  +- Exchange(distribution=[hash[cr_call_center_sk, cd_marital_status, cd_education_status]])
                     +- LocalHashAggregate(groupBy=[cr_call_center_sk, cd_marital_status, cd_education_status], select=[cr_call_center_sk, cd_marital_status, cd_education_status, Partial_SUM(cr_net_loss) AS sum$0])
                        +- Calc(select=[cr_call_center_sk, cr_net_loss, cd_marital_status, cd_education_status])
                           +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cr_returned_date_sk = d_date_sk)], select=[cr_returned_date_sk, cr_call_center_sk, cr_net_loss, cd_marital_status, cd_education_status, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cr_returned_date_sk, cr_call_center_sk, cr_net_loss, cd_marital_status, cd_education_status])\n:  +- HashJoin(joinType=[InnerJoin], where=[(cr_returning_customer_sk = c_customer_sk)], select=[cr_returned_date_sk, cr_returning_customer_sk, cr_call_center_sk, cr_net_loss, c_customer_sk, cd_marital_status, cd_education_status], isBroadcast=[true], build=[right])\n:     :- Calc(select=[cr_returned_date_sk, cr_returning_customer_sk, cr_call_center_sk, cr_net_loss], where=[cr_call_center_sk IS NOT NULL])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns, project=[cr_returned_date_sk, cr_returning_customer_sk, cr_call_center_sk, cr_net_loss]]], fields=[cr_returned_date_sk, cr_returning_customer_sk, cr_call_center_sk, cr_net_loss])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                              :- Exchange(distribution=[broadcast])
                              :  +- Calc(select=[d_date_sk], where=[((d_year = 1999) AND (d_moy = 11))])
                              :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                              :- Exchange(distribution=[broadcast])
                              :  +- Calc(select=[c_customer_sk, cd_marital_status, cd_education_status])
                              :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ca_address_sk = c_current_addr_sk)], select=[ca_address_sk, c_customer_sk, c_current_addr_sk, cd_marital_status, cd_education_status], isBroadcast=[true], build=[right])\n:- Calc(select=[ca_address_sk], where=[(ca_gmt_offset = -7)])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_gmt_offset]]], fields=[ca_address_sk, ca_gmt_offset])\n+- [#1] Exchange(distribution=[broadcast])\n])
                              :        :- Exchange(distribution=[broadcast])
                              :        :  +- Calc(select=[c_customer_sk, c_current_addr_sk, cd_marital_status, cd_education_status])
                              :        :     +- MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(hd_demo_sk = c_current_hdemo_sk)], select=[c_customer_sk, c_current_hdemo_sk, c_current_addr_sk, cd_marital_status, cd_education_status, hd_demo_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[c_customer_sk, c_current_hdemo_sk, c_current_addr_sk, cd_marital_status, cd_education_status])\n:  +- HashJoin(joinType=[InnerJoin], where=[(cd_demo_sk = c_current_cdemo_sk)], select=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk, cd_demo_sk, cd_marital_status, cd_education_status], isBroadcast=[true], build=[right])\n:     :- Calc(select=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk], where=[c_current_cdemo_sk IS NOT NULL])\n:     :  +- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk]]], fields=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                              :        :        :- Exchange(distribution=[broadcast])
                              :        :        :  +- Calc(select=[hd_demo_sk], where=[LIKE(hd_buy_potential, '0-500%')])
                              :        :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, household_demographics, project=[hd_demo_sk, hd_buy_potential]]], fields=[hd_demo_sk, hd_buy_potential])
                              :        :        :- Exchange(distribution=[broadcast])
                              :        :        :  +- Calc(select=[cd_demo_sk, cd_marital_status, cd_education_status], where=[(((cd_marital_status = 'M') AND (cd_education_status = 'Unknown')) OR ((cd_marital_status = 'W') AND (cd_education_status = 'Advanced Degree')))])
                              :        :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_demographics, project=[cd_demo_sk, cd_marital_status, cd_education_status]]], fields=[cd_demo_sk, cd_marital_status, cd_education_status])
                              :        :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer, project=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk]]], fields=[c_customer_sk, c_current_cdemo_sk, c_current_hdemo_sk, c_current_addr_sk])
                              :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_gmt_offset]]], fields=[ca_address_sk, ca_gmt_offset])
                              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_returns, project=[cr_returned_date_sk, cr_returning_customer_sk, cr_call_center_sk, cr_net_loss]]], fields=[cr_returned_date_sk, cr_returning_customer_sk, cr_call_center_sk, cr_net_loss])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q92]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query92.tpl and seed 2031708268
select  
   sum(ws_ext_discount_amt)  as `Excess Discount Amount` 
from 
    web_sales 
   ,item 
   ,date_dim
where
i_manufact_id = 269
and i_item_sk = ws_item_sk 
and d_date between '1998-03-18' and 
        (cast('1998-03-18' as date) + interval '90' day)
and d_date_sk = ws_sold_date_sk 
and ws_ext_discount_amt  
     > ( 
         SELECT 
            1.3 * avg(ws_ext_discount_amt) 
         FROM 
            web_sales 
           ,date_dim
         WHERE 
              ws_item_sk = i_item_sk 
          and d_date between '1998-03-18' and
                             (cast('1998-03-18' as date) + interval '90' day)
          and d_date_sk = ws_sold_date_sk 
      ) 
order by sum(ws_ext_discount_amt)
limit 100

-- end query 1 in stream 0 using template query92.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{}], Excess Discount Amount=[SUM($0)])
   +- LogicalProject(ws_ext_discount_amt=[$22])
      +- LogicalFilter(condition=[AND(=($47, 269), =($34, $3), >=($58, CAST(_UTF-16LE'1998-03-18'):DATE NOT NULL), <=($58, +(CAST(_UTF-16LE'1998-03-18'):DATE NOT NULL, 7776000000:INTERVAL DAY)), =($56, $0), >($22, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(1.3:DECIMAL(2, 1), $0)])
  LogicalAggregate(group=[{}], agg#0=[AVG($0)])
    LogicalProject(ws_ext_discount_amt=[$22])
      LogicalFilter(condition=[AND(=($3, $cor0.i_item_sk), >=($36, CAST(_UTF-16LE'1998-03-18'):DATE NOT NULL), <=($36, +(CAST(_UTF-16LE'1998-03-18'):DATE NOT NULL, 7776000000:INTERVAL DAY)), =($34, $0))])
        LogicalJoin(condition=[true], joinType=[inner])
          LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
          LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
})))], variablesSet=[[$cor0]])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[Excess Discount Amount ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[Excess Discount Amount ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS Excess Discount Amount])
         +- Exchange(distribution=[single])
            +- LocalHashAggregate(select=[Partial_SUM(ws_ext_discount_amt) AS sum$0])
               +- Calc(select=[ws_ext_discount_amt])
                  +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(d_date_sk = ws_sold_date_sk)], select=[ws_sold_date_sk, ws_ext_discount_amt, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ws_sold_date_sk, ws_ext_discount_amt])\n:  +- HashJoin(joinType=[InnerJoin], where=[((ws_ext_discount_amt > (1.3 * $f1)) AND (i_item_sk = ws_item_sk))], select=[ws_sold_date_sk, ws_ext_discount_amt, i_item_sk, ws_item_sk, $f1], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ws_sold_date_sk, ws_ext_discount_amt, i_item_sk])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(i_item_sk = ws_item_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_ext_discount_amt, i_item_sk], isBroadcast=[true], build=[right])\n:     :     :- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_ext_discount_amt]]], fields=[ws_sold_date_sk, ws_item_sk, ws_ext_discount_amt])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :- Exchange(distribution=[broadcast])(reuse_id=[1])
                     :  +- Calc(select=[d_date_sk], where=[SEARCH(d_date, Sarg[[1998-03-18..1998-06-16]])])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
                     :- Exchange(distribution=[broadcast])
                     :  +- HashAggregate(isMerge=[true], groupBy=[ws_item_sk], select=[ws_item_sk, Final_AVG(sum$0, count$1) AS $f1])
                     :     +- Exchange(distribution=[hash[ws_item_sk]])
                     :        +- LocalHashAggregate(groupBy=[ws_item_sk], select=[ws_item_sk, Partial_AVG(ws_ext_discount_amt) AS (sum$0, count$1)])
                     :           +- Calc(select=[ws_item_sk, ws_ext_discount_amt])
                     :              +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(d_date_sk = ws_sold_date_sk)], select=[ws_sold_date_sk, ws_item_sk, ws_ext_discount_amt, d_date_sk], isBroadcast=[true], build=[right])\n:- [#1] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_ext_discount_amt]]], fields=[ws_sold_date_sk, ws_item_sk, ws_ext_discount_amt])\n+- [#2] Exchange(distribution=[broadcast])\n])
                     :                 :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_ext_discount_amt]]], fields=[ws_sold_date_sk, ws_item_sk, ws_ext_discount_amt])
                     :                 +- Reused(reference_id=[1])
                     :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_sold_date_sk, ws_item_sk, ws_ext_discount_amt]]], fields=[ws_sold_date_sk, ws_item_sk, ws_ext_discount_amt])
                     +- Exchange(distribution=[broadcast])
                        +- Calc(select=[i_item_sk], where=[(i_manufact_id = 269)])
                           +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_manufact_id]]], fields=[i_item_sk, i_manufact_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q93]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query93.tpl and seed 1200409435
select  ss_customer_sk
            ,sum(act_sales) sumsales
      from (select ss_item_sk
                  ,ss_ticket_number
                  ,ss_customer_sk
                  ,case when sr_return_quantity is not null then (ss_quantity-sr_return_quantity)*ss_sales_price
                                                            else (ss_quantity*ss_sales_price) end act_sales
            from store_sales left outer join store_returns on (sr_item_sk = ss_item_sk
                                                               and sr_ticket_number = ss_ticket_number)
                ,reason
            where sr_reason_sk = r_reason_sk
              and r_reason_desc = 'Did not like the warranty') t
      group by ss_customer_sk
      order by sumsales, ss_customer_sk
limit 100

-- end query 1 in stream 0 using template query93.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$1], sort1=[$0], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0}], sumsales=[SUM($1)])
   +- LogicalProject(ss_customer_sk=[$3], act_sales=[CASE(IS NOT NULL($33), *(-($10, $33), $13), *($10, $13))])
      +- LogicalFilter(condition=[AND(=($31, $43), =($45, _UTF-16LE'Did not like the warranty'))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[AND(=($25, $2), =($32, $9))], joinType=[left])
            :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_returns]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, reason]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[sumsales ASC, ss_customer_sk ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[sumsales ASC, ss_customer_sk ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[false], groupBy=[ss_customer_sk], select=[ss_customer_sk, SUM(act_sales) AS sumsales])
         +- Exchange(distribution=[hash[ss_customer_sk]])
            +- Calc(select=[ss_customer_sk, CASE(sr_return_quantity IS NOT NULL, ((ss_quantity - sr_return_quantity) * ss_sales_price), (ss_quantity * ss_sales_price)) AS act_sales])
               +- MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(sr_reason_sk = r_reason_sk)], select=[ss_customer_sk, ss_quantity, ss_sales_price, sr_reason_sk, sr_return_quantity, r_reason_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_customer_sk, ss_quantity, ss_sales_price, sr_reason_sk, sr_return_quantity])\n:  +- HashJoin(joinType=[InnerJoin], where=[((sr_item_sk = ss_item_sk) AND (sr_ticket_number = ss_ticket_number))], select=[ss_item_sk, ss_customer_sk, ss_ticket_number, ss_quantity, ss_sales_price, sr_item_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity], build=[right])\n:     :- [#2] Exchange(distribution=[hash[ss_item_sk, ss_ticket_number]])\n:     +- [#3] Exchange(distribution=[hash[sr_item_sk, sr_ticket_number]])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :- Exchange(distribution=[broadcast])
                  :  +- Calc(select=[r_reason_sk], where=[(r_reason_desc = 'Did not like the warranty')])
                  :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, reason, project=[r_reason_sk, r_reason_desc]]], fields=[r_reason_sk, r_reason_desc])
                  :- Exchange(distribution=[hash[ss_item_sk, ss_ticket_number]])
                  :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_item_sk, ss_customer_sk, ss_ticket_number, ss_quantity, ss_sales_price]]], fields=[ss_item_sk, ss_customer_sk, ss_ticket_number, ss_quantity, ss_sales_price])
                  +- Exchange(distribution=[hash[sr_item_sk, sr_ticket_number]])
                     +- Calc(select=[sr_item_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity], where=[sr_reason_sk IS NOT NULL])
                        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_returns, project=[sr_item_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity]]], fields=[sr_item_sk, sr_reason_sk, sr_ticket_number, sr_return_quantity])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q94]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query94.tpl and seed 2031708268
select  
   count(distinct ws_order_number) as `order count`
  ,sum(ws_ext_ship_cost) as `total shipping cost`
  ,sum(ws_net_profit) as `total net profit`
from
   web_sales ws1
  ,date_dim
  ,customer_address
  ,web_site
where
    d_date between '1999-5-01' and 
           (cast('1999-5-01' as date) + interval '60' day)
and ws1.ws_ship_date_sk = d_date_sk
and ws1.ws_ship_addr_sk = ca_address_sk
and ca_state = 'TX'
and ws1.ws_web_site_sk = web_site_sk
and web_company_name = 'pri'
and exists (select *
            from web_sales ws2
            where ws1.ws_order_number = ws2.ws_order_number
              and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
and not exists(select *
               from web_returns wr1
               where ws1.ws_order_number = wr1.wr_order_number)
order by count(distinct ws_order_number)
limit 100

-- end query 1 in stream 0 using template query94.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{}], order count=[COUNT(DISTINCT $0)], total shipping cost=[SUM($1)], total net profit=[SUM($2)])
   +- LogicalProject(ws_order_number=[$17], ws_ext_ship_cost=[$28], ws_net_profit=[$33])
      +- LogicalFilter(condition=[AND(>=($36, CAST(_UTF-16LE'1999-5-01'):DATE NOT NULL), <=($36, +(CAST(_UTF-16LE'1999-5-01'):DATE NOT NULL, 5184000000:INTERVAL DAY)), =($2, $34), =($11, $62), =($70, _UTF-16LE'TX'), =($13, $75), =($89, _UTF-16LE'pri'), EXISTS({
LogicalFilter(condition=[AND(=($cor0.ws_order_number, $17), <>($cor0.ws_warehouse_sk, $15))])
  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
}), NOT(EXISTS({
LogicalFilter(condition=[=($cor0.ws_order_number, $13)])
  LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_returns]])
})))], variablesSet=[[$cor0]])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_site]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[order count ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[order count ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS order count, Final_MIN(min$1) AS total shipping cost, Final_MIN(min$2) AS total net profit])
         +- Exchange(distribution=[single])
            +- LocalHashAggregate(select=[Partial_COUNT(ws_order_number) FILTER $g_0 AS count$0, Partial_MIN(total shipping cost) FILTER $g_1 AS min$1, Partial_MIN(total net profit) FILTER $g_1 AS min$2])
               +- Calc(select=[ws_order_number, total shipping cost, total net profit, (CASE(($e = 0), 0, 1) = 0) AS $g_0, (CASE(($e = 0), 0, 1) = 1) AS $g_1])
                  +- HashAggregate(isMerge=[true], groupBy=[ws_order_number, $e], select=[ws_order_number, $e, Final_SUM(sum$0) AS total shipping cost, Final_SUM(sum$1) AS total net profit])
                     +- Exchange(distribution=[hash[ws_order_number, $e]])
                        +- LocalHashAggregate(groupBy=[ws_order_number, $e], select=[ws_order_number, $e, Partial_SUM(ws_ext_ship_cost) AS sum$0, Partial_SUM(ws_net_profit) AS sum$1])
                           +- Expand(projects=[{ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit, 0 AS $e}, {ws_warehouse_sk, null AS ws_order_number, ws_ext_ship_cost, ws_net_profit, 1 AS $e}])
                              +- MultipleInput(readOrder=[2,0,1], members=[\nHashJoin(joinType=[LeftAntiJoin], where=[(ws_order_number = wr_order_number)], select=[ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit], build=[left], tryDistinctBuildRow=[true])\n:- HashJoin(joinType=[LeftSemiJoin], where=[((ws_order_number = ws_order_number0) AND (ws_warehouse_sk <> ws_warehouse_sk0))], select=[ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit], build=[left])\n:  :- [#2] Exchange(distribution=[hash[ws_order_number]])\n:  +- [#3] Exchange(distribution=[hash[ws_order_number]])\n+- [#1] Exchange(distribution=[hash[wr_order_number]])\n])
                                 :- Exchange(distribution=[hash[wr_order_number]])
                                 :  +- LocalHashAggregate(groupBy=[wr_order_number], select=[wr_order_number])
                                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_returns, project=[wr_order_number]]], fields=[wr_order_number])
                                 :- Exchange(distribution=[hash[ws_order_number]])
                                 :  +- Calc(select=[ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit])
                                 :     +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_ship_date_sk = d_date_sk)], select=[ws_ship_date_sk, ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ws_ship_date_sk, ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ws_web_site_sk = web_site_sk)], select=[ws_ship_date_sk, ws_web_site_sk, ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit, web_site_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ws_ship_date_sk, ws_web_site_sk, ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ws_ship_addr_sk = ca_address_sk)], select=[ws_ship_date_sk, ws_ship_addr_sk, ws_web_site_sk, ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit, ca_address_sk], isBroadcast=[true], build=[right])\n:     :     :- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_ship_date_sk, ws_ship_addr_sk, ws_web_site_sk, ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit]]], fields=[ws_ship_date_sk, ws_ship_addr_sk, ws_web_site_sk, ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                 :        :- Exchange(distribution=[broadcast])
                                 :        :  +- Calc(select=[d_date_sk], where=[SEARCH(d_date, Sarg[[1999-05-01..1999-06-30]])])
                                 :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
                                 :        :- Exchange(distribution=[broadcast])
                                 :        :  +- Calc(select=[web_site_sk], where=[SEARCH(web_company_name, Sarg[_UTF-16LE'pri'])])
                                 :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_site, project=[web_site_sk, web_company_name]]], fields=[web_site_sk, web_company_name])
                                 :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_ship_date_sk, ws_ship_addr_sk, ws_web_site_sk, ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit]]], fields=[ws_ship_date_sk, ws_ship_addr_sk, ws_web_site_sk, ws_warehouse_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit])
                                 :        +- Exchange(distribution=[broadcast])
                                 :           +- Calc(select=[ca_address_sk], where=[SEARCH(ca_state, Sarg[_UTF-16LE'TX'])])
                                 :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state]]], fields=[ca_address_sk, ca_state])
                                 +- Exchange(distribution=[hash[ws_order_number]])
                                    +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_warehouse_sk, ws_order_number]]], fields=[ws_warehouse_sk, ws_order_number])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q95]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query95.tpl and seed 2031708268
with ws_wh as
(select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2
 from web_sales ws1,web_sales ws2
 where ws1.ws_order_number = ws2.ws_order_number
   and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)
 select  
   count(distinct ws_order_number) as `order count`
  ,sum(ws_ext_ship_cost) as `total shipping cost`
  ,sum(ws_net_profit) as `total net profit`
from
   web_sales ws1
  ,date_dim
  ,customer_address
  ,web_site
where
    d_date between '1999-5-01' and 
           (cast('1999-5-01' as date) + interval '60' day)
and ws1.ws_ship_date_sk = d_date_sk
and ws1.ws_ship_addr_sk = ca_address_sk
and ca_state = 'TX'
and ws1.ws_web_site_sk = web_site_sk
and web_company_name = 'pri'
and ws1.ws_order_number in (select ws_order_number
                            from ws_wh)
and ws1.ws_order_number in (select wr_order_number
                            from web_returns,ws_wh
                            where wr_order_number = ws_wh.ws_order_number)
order by count(distinct ws_order_number)
limit 100

-- end query 1 in stream 0 using template query95.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{}], order count=[COUNT(DISTINCT $0)], total shipping cost=[SUM($1)], total net profit=[SUM($2)])
   +- LogicalProject(ws_order_number=[$17], ws_ext_ship_cost=[$28], ws_net_profit=[$33])
      +- LogicalFilter(condition=[AND(>=($36, CAST(_UTF-16LE'1999-5-01'):DATE NOT NULL), <=($36, +(CAST(_UTF-16LE'1999-5-01'):DATE NOT NULL, 5184000000:INTERVAL DAY)), =($2, $34), =($11, $62), =($70, _UTF-16LE'TX'), =($13, $75), =($89, _UTF-16LE'pri'), IN($17, {
LogicalProject(ws_order_number=[$17])
  LogicalFilter(condition=[AND(=($17, $51), <>($15, $49))])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
}), IN($17, {
LogicalProject(wr_order_number=[$13])
  LogicalFilter(condition=[=($13, $24)])
    LogicalJoin(condition=[true], joinType=[inner])
      LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_returns]])
      LogicalProject(ws_order_number=[$17], wh1=[$15], wh2=[$49])
        LogicalFilter(condition=[AND(=($17, $51), <>($15, $49))])
          LogicalJoin(condition=[true], joinType=[inner])
            LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
            LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
}))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_sales]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, customer_address]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, web_site]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[order count ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[order count ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS order count, Final_MIN(min$1) AS total shipping cost, Final_MIN(min$2) AS total net profit])
         +- Exchange(distribution=[single])
            +- LocalHashAggregate(select=[Partial_COUNT(ws_order_number) FILTER $g_0 AS count$0, Partial_MIN(total shipping cost) FILTER $g_1 AS min$1, Partial_MIN(total net profit) FILTER $g_1 AS min$2])
               +- Calc(select=[ws_order_number, total shipping cost, total net profit, (CASE(($e = 0), 0, 1) = 0) AS $g_0, (CASE(($e = 0), 0, 1) = 1) AS $g_1])
                  +- HashAggregate(isMerge=[true], groupBy=[ws_order_number, $e], select=[ws_order_number, $e, Final_SUM(sum$0) AS total shipping cost, Final_SUM(sum$1) AS total net profit])
                     +- Exchange(distribution=[hash[ws_order_number, $e]])
                        +- LocalHashAggregate(groupBy=[ws_order_number, $e], select=[ws_order_number, $e, Partial_SUM(ws_ext_ship_cost) AS sum$0, Partial_SUM(ws_net_profit) AS sum$1])
                           +- Expand(projects=[{ws_order_number, ws_ext_ship_cost, ws_net_profit, 0 AS $e}, {null AS ws_order_number, ws_ext_ship_cost, ws_net_profit, 1 AS $e}])
                              +- MultipleInput(readOrder=[2,0,1], members=[\nHashJoin(joinType=[LeftSemiJoin], where=[(ws_order_number = wr_order_number)], select=[ws_order_number, ws_ext_ship_cost, ws_net_profit], build=[left], tryDistinctBuildRow=[true])\n:- HashJoin(joinType=[LeftSemiJoin], where=[(ws_order_number = ws_order_number0)], select=[ws_order_number, ws_ext_ship_cost, ws_net_profit], build=[left], tryDistinctBuildRow=[true])\n:  :- [#2] Exchange(distribution=[hash[ws_order_number]])\n:  +- [#3] LocalHashAggregate(groupBy=[ws_order_number], select=[ws_order_number])\n+- [#1] Exchange(distribution=[hash[wr_order_number]], shuffle_mode=[BATCH])\n])
                                 :- Exchange(distribution=[hash[wr_order_number]], shuffle_mode=[BATCH])
                                 :  +- LocalHashAggregate(groupBy=[wr_order_number], select=[wr_order_number])
                                 :     +- Calc(select=[wr_order_number])
                                 :        +- HashJoin(joinType=[InnerJoin], where=[(wr_order_number = ws_order_number)], select=[ws_order_number, wr_order_number], build=[right])
                                 :           :- Calc(select=[ws_order_number])(reuse_id=[1])
                                 :           :  +- HashJoin(joinType=[InnerJoin], where=[((ws_order_number = ws_order_number0) AND (ws_warehouse_sk <> ws_warehouse_sk0))], select=[ws_warehouse_sk, ws_order_number, ws_warehouse_sk0, ws_order_number0], build=[right])
                                 :           :     :- Exchange(distribution=[hash[ws_order_number]])
                                 :           :     :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_warehouse_sk, ws_order_number]]], fields=[ws_warehouse_sk, ws_order_number])
                                 :           :     +- Exchange(distribution=[hash[ws_order_number]])
                                 :           :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_warehouse_sk, ws_order_number]]], fields=[ws_warehouse_sk, ws_order_number])
                                 :           +- Exchange(distribution=[hash[wr_order_number]])
                                 :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_returns, project=[wr_order_number]]], fields=[wr_order_number])
                                 :- Exchange(distribution=[hash[ws_order_number]])
                                 :  +- Calc(select=[ws_order_number, ws_ext_ship_cost, ws_net_profit])
                                 :     +- MultipleInput(readOrder=[0,0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(ws_ship_date_sk = d_date_sk)], select=[ws_ship_date_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ws_ship_date_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ws_web_site_sk = web_site_sk)], select=[ws_ship_date_sk, ws_web_site_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit, web_site_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ws_ship_date_sk, ws_web_site_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ws_ship_addr_sk = ca_address_sk)], select=[ws_ship_date_sk, ws_ship_addr_sk, ws_web_site_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit, ca_address_sk], isBroadcast=[true], build=[right])\n:     :     :- [#3] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_ship_date_sk, ws_ship_addr_sk, ws_web_site_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit]]], fields=[ws_ship_date_sk, ws_ship_addr_sk, ws_web_site_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit])\n:     :     +- [#4] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                 :        :- Exchange(distribution=[broadcast])
                                 :        :  +- Calc(select=[d_date_sk], where=[SEARCH(d_date, Sarg[[1999-05-01..1999-06-30]])])
                                 :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
                                 :        :- Exchange(distribution=[broadcast])
                                 :        :  +- Calc(select=[web_site_sk], where=[SEARCH(web_company_name, Sarg[_UTF-16LE'pri'])])
                                 :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_site, project=[web_site_sk, web_company_name]]], fields=[web_site_sk, web_company_name])
                                 :        :- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, web_sales, project=[ws_ship_date_sk, ws_ship_addr_sk, ws_web_site_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit]]], fields=[ws_ship_date_sk, ws_ship_addr_sk, ws_web_site_sk, ws_order_number, ws_ext_ship_cost, ws_net_profit])
                                 :        +- Exchange(distribution=[broadcast])
                                 :           +- Calc(select=[ca_address_sk], where=[SEARCH(ca_state, Sarg[_UTF-16LE'TX'])])
                                 :              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, customer_address, project=[ca_address_sk, ca_state]]], fields=[ca_address_sk, ca_state])
                                 +- LocalHashAggregate(groupBy=[ws_order_number], select=[ws_order_number])
                                    +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q96]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query96.tpl and seed 1819994127
select  count(*) 
from store_sales
    ,household_demographics 
    ,time_dim, store
where ss_sold_time_sk = time_dim.t_time_sk   
    and ss_hdemo_sk = household_demographics.hd_demo_sk 
    and ss_store_sk = s_store_sk
    and time_dim.t_hour = 8
    and time_dim.t_minute >= 30
    and household_demographics.hd_dep_count = 5
    and store.s_store_name = 'ese'
order by count(*)
limit 100

-- end query 1 in stream 0 using template query96.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
   +- LogicalProject($f0=[0])
      +- LogicalFilter(condition=[AND(=($1, $28), =($5, $23), =($7, $38), =($31, 8), >=($32, 30), =($26, 5), =($43, _UTF-16LE'ese'))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, household_demographics]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, time_dim]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[EXPR$0 ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[EXPR$0 ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], select=[Final_COUNT(count1$0) AS EXPR$0])
         +- Exchange(distribution=[single])
            +- LocalHashAggregate(select=[Partial_COUNT(*) AS count1$0])
               +- Calc(select=[0 AS $f0])
                  +- MultipleInput(readOrder=[0,0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_store_sk = s_store_sk)], select=[ss_store_sk, s_store_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_store_sk])\n:  +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_time_sk = t_time_sk)], select=[ss_sold_time_sk, ss_store_sk, t_time_sk], isBroadcast=[true], build=[right])\n:     :- Calc(select=[ss_sold_time_sk, ss_store_sk])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(ss_hdemo_sk = hd_demo_sk)], select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk, hd_demo_sk], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk], where=[ss_hdemo_sk IS NOT NULL])\n:     :     :  +- [#4] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk]]], fields=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :- Exchange(distribution=[broadcast])
                     :  +- Calc(select=[s_store_sk], where=[(s_store_name = 'ese')])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store, project=[s_store_sk, s_store_name]]], fields=[s_store_sk, s_store_name])
                     :- Exchange(distribution=[broadcast])
                     :  +- Calc(select=[t_time_sk], where=[((t_hour = 8) AND (t_minute >= 30))])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, time_dim, project=[t_time_sk, t_hour, t_minute]]], fields=[t_time_sk, t_hour, t_minute])
                     :- Exchange(distribution=[broadcast])
                     :  +- Calc(select=[hd_demo_sk], where=[(hd_dep_count = 5)])
                     :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, household_demographics, project=[hd_demo_sk, hd_dep_count]]], fields=[hd_demo_sk, hd_dep_count])
                     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk]]], fields=[ss_sold_time_sk, ss_hdemo_sk, ss_store_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q97]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query97.tpl and seed 1819994127
with ssci as (
select ss_customer_sk customer_sk
      ,ss_item_sk item_sk
from store_sales,date_dim
where ss_sold_date_sk = d_date_sk
  and d_month_seq between 1212 and 1212 + 11
group by ss_customer_sk
        ,ss_item_sk),
csci as(
 select cs_bill_customer_sk customer_sk
      ,cs_item_sk item_sk
from catalog_sales,date_dim
where cs_sold_date_sk = d_date_sk
  and d_month_seq between 1212 and 1212 + 11
group by cs_bill_customer_sk
        ,cs_item_sk)
 select  sum(case when ssci.customer_sk is not null and csci.customer_sk is null then 1 else 0 end) store_only
      ,sum(case when ssci.customer_sk is null and csci.customer_sk is not null then 1 else 0 end) catalog_only
      ,sum(case when ssci.customer_sk is not null and csci.customer_sk is not null then 1 else 0 end) store_and_catalog
from ssci full outer join csci on (ssci.customer_sk=csci.customer_sk
                               and ssci.item_sk = csci.item_sk)
limit 100

-- end query 1 in stream 0 using template query97.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(fetch=[100])
+- LogicalAggregate(group=[{}], store_only=[SUM($0)], catalog_only=[SUM($1)], store_and_catalog=[SUM($2)])
   +- LogicalProject($f0=[CASE(AND(IS NOT NULL($0), IS NULL($2)), 1, 0)], $f1=[CASE(AND(IS NULL($0), IS NOT NULL($2)), 1, 0)], $f2=[CASE(AND(IS NOT NULL($0), IS NOT NULL($2)), 1, 0)])
      +- LogicalJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[full])
         :- LogicalAggregate(group=[{0, 1}])
         :  +- LogicalProject(customer_sk=[$3], item_sk=[$2])
         :     +- LogicalFilter(condition=[AND(=($0, $23), >=($26, 1212), <=($26, +(1212, 11)))])
         :        +- LogicalJoin(condition=[true], joinType=[inner])
         :           :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
         :           +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
         +- LogicalAggregate(group=[{0, 1}])
            +- LogicalProject(customer_sk=[$3], item_sk=[$15])
               +- LogicalFilter(condition=[AND(=($0, $34), >=($37, 1212), <=($37, +(1212, 11)))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
                     +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Limit(offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- Limit(offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS store_only, Final_SUM(sum$1) AS catalog_only, Final_SUM(sum$2) AS store_and_catalog])
         +- Exchange(distribution=[single])
            +- LocalHashAggregate(select=[Partial_SUM($f0) AS sum$0, Partial_SUM($f1) AS sum$1, Partial_SUM($f2) AS sum$2])
               +- Calc(select=[CASE((customer_sk IS NOT NULL AND customer_sk0 IS NULL), 1, 0) AS $f0, CASE((customer_sk IS NULL AND customer_sk0 IS NOT NULL), 1, 0) AS $f1, CASE((customer_sk IS NOT NULL AND customer_sk0 IS NOT NULL), 1, 0) AS $f2])
                  +- MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[FullOuterJoin], where=[((customer_sk = customer_sk0) AND (item_sk = item_sk0))], select=[customer_sk, item_sk, customer_sk0, item_sk0], build=[right])\n:- HashAggregate(isMerge=[false], groupBy=[customer_sk, item_sk], select=[customer_sk, item_sk])\n:  +- [#1] Exchange(distribution=[hash[customer_sk, item_sk]])\n+- HashAggregate(isMerge=[false], groupBy=[customer_sk, item_sk], select=[customer_sk, item_sk])\n   +- [#2] Exchange(distribution=[hash[customer_sk, item_sk]])\n])
                     :- Exchange(distribution=[hash[customer_sk, item_sk]])
                     :  +- Calc(select=[ss_customer_sk AS customer_sk, ss_item_sk AS item_sk])
                     :     +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_customer_sk], where=[ss_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_customer_sk]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk])\n+- [#1] Exchange(distribution=[broadcast])\n])
                     :        :- Exchange(distribution=[broadcast])(reuse_id=[1])
                     :        :  +- Calc(select=[d_date_sk], where=[SEARCH(d_month_seq, Sarg[[1212..1223]])])
                     :        :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_month_seq]]], fields=[d_date_sk, d_month_seq])
                     :        +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_customer_sk]]], fields=[ss_sold_date_sk, ss_item_sk, ss_customer_sk])
                     +- Exchange(distribution=[hash[customer_sk, item_sk]])
                        +- Calc(select=[cs_bill_customer_sk AS customer_sk, cs_item_sk AS item_sk])
                           +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk], where=[cs_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk])\n+- [#1] Exchange(distribution=[broadcast])\n])
                              :- Reused(reference_id=[1])
                              +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk]]], fields=[cs_sold_date_sk, cs_bill_customer_sk, cs_item_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q98]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query98.tpl and seed 345591136
select i_item_desc 
      ,i_category 
      ,i_class 
      ,i_current_price
      ,sum(ss_ext_sales_price) as itemrevenue 
      ,sum(ss_ext_sales_price)*100/sum(sum(ss_ext_sales_price)) over
          (partition by i_class) as revenueratio
from	
	store_sales
    	,item 
    	,date_dim
where 
	ss_item_sk = i_item_sk 
  	and i_category in ('Jewelry', 'Sports', 'Books')
  	and ss_sold_date_sk = d_date_sk
	and d_date between cast('2001-01-12' as date) 
				and (cast('2001-01-12' as date) + interval '30' day)
group by 
	i_item_id
        ,i_item_desc 
        ,i_category
        ,i_class
        ,i_current_price
order by 
	i_category
        ,i_class
        ,i_item_id
        ,i_item_desc
        ,revenueratio

-- end query 1 in stream 0 using template query98.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(i_item_desc=[$0], i_category=[$1], i_class=[$2], i_current_price=[$3], itemrevenue=[$4], revenueratio=[$5])
+- LogicalSort(sort0=[$1], sort1=[$2], sort2=[$6], sort3=[$0], sort4=[$5], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first])
   +- LogicalProject(i_item_desc=[$1], i_category=[$2], i_class=[$3], i_current_price=[$4], itemrevenue=[$5], revenueratio=[/(*($5, 100), CASE(>(COUNT($5) OVER (PARTITION BY $3), 0), $SUM0($5) OVER (PARTITION BY $3), null:DOUBLE))], i_item_id=[$0])
      +- LogicalAggregate(group=[{0, 1, 2, 3, 4}], itemrevenue=[SUM($5)])
         +- LogicalProject(i_item_id=[$24], i_item_desc=[$27], i_category=[$35], i_class=[$33], i_current_price=[$28], ss_ext_sales_price=[$15])
            +- LogicalFilter(condition=[AND(=($2, $23), OR(=($35, _UTF-16LE'Jewelry'), =($35, _UTF-16LE'Sports'), =($35, _UTF-16LE'Books')), =($0, $45), >=($47, CAST(_UTF-16LE'2001-01-12'):DATE NOT NULL), <=($47, +(CAST(_UTF-16LE'2001-01-12'):DATE NOT NULL, 2592000000:INTERVAL DAY)))])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, store_sales]])
                  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, item]])
                  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[i_item_desc, i_category, i_class, i_current_price, itemrevenue, revenueratio])
+- Sort(orderBy=[i_category ASC, i_class ASC, i_item_id ASC, i_item_desc ASC, revenueratio ASC])
   +- Exchange(distribution=[single])
      +- Calc(select=[i_item_desc, i_category, i_class, i_current_price, itemrevenue, ($6 / CASE((w0$o0 > 0), w0$o1, null:DOUBLE)) AS revenueratio, i_item_id])
         +- OverAggregate(partitionBy=[i_class], window#0=[COUNT(itemrevenue) AS w0$o0, $SUM0(itemrevenue) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, itemrevenue, $6, w0$o0, w0$o1])
            +- Calc(select=[i_item_id, i_item_desc, i_category, i_class, i_current_price, itemrevenue, (itemrevenue * 100) AS $6])
               +- Sort(orderBy=[i_class ASC])
                  +- Exchange(distribution=[hash[i_class]])
                     +- HashAggregate(isMerge=[true], groupBy=[i_item_id, i_item_desc, i_current_price, i_class, i_category], select=[i_item_id, i_item_desc, i_current_price, i_class, i_category, Final_SUM(sum$0) AS itemrevenue])
                        +- Exchange(distribution=[hash[i_item_id, i_item_desc, i_current_price, i_class, i_category]])
                           +- LocalHashAggregate(groupBy=[i_item_id, i_item_desc, i_current_price, i_class, i_category], select=[i_item_id, i_item_desc, i_current_price, i_class, i_category, Partial_SUM(itemrevenue) AS sum$0])
                              +- MultipleInput(members=[\nSortMergeJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, itemrevenue, i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category])\n:- HashAggregate(isMerge=[true], groupBy=[ss_item_sk], select=[ss_item_sk, Final_SUM(sum$0) AS itemrevenue])\n:  +- [#2] Exchange(distribution=[hash[ss_item_sk]])\n+- [#1] Exchange(distribution=[hash[i_item_sk]])\n])
                                 :- Exchange(distribution=[hash[i_item_sk]])
                                 :  +- Calc(select=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category], where=[SEARCH(i_category, Sarg[_UTF-16LE'Books', _UTF-16LE'Jewelry', _UTF-16LE'Sports'])])
                                 :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, item, project=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category]]], fields=[i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category])
                                 +- Exchange(distribution=[hash[ss_item_sk]])
                                    +- LocalHashAggregate(groupBy=[ss_item_sk], select=[ss_item_sk, Partial_SUM(ss_ext_sales_price) AS sum$0])
                                       +- Calc(select=[ss_item_sk, ss_ext_sales_price])
                                          +- MultipleInput(readOrder=[0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price, d_date_sk], isBroadcast=[true], build=[right])\n:- Calc(select=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price], where=[ss_sold_date_sk IS NOT NULL])\n:  +- [#2] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])\n+- [#1] Exchange(distribution=[broadcast])\n])
                                             :- Exchange(distribution=[broadcast])
                                             :  +- Calc(select=[d_date_sk], where=[SEARCH(d_date, Sarg[[2001-01-12..2001-02-11]])])
                                             :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
                                             +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, store_sales, project=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price]]], fields=[ss_sold_date_sk, ss_item_sk, ss_ext_sales_price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="getExecPlan[q99]">
    <Resource name="sql">
      <![CDATA[-- start query 1 in stream 0 using template query99.tpl and seed 1819994127
select  
   substr(w_warehouse_name,1,20) 
  ,sm_type
  ,cc_name
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk <= 30 ) then 1 else 0 end)  as `30 days`
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 30) and 
                 (cs_ship_date_sk - cs_sold_date_sk <= 60) then 1 else 0 end )  as `31-60 days` 
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 60) and 
                 (cs_ship_date_sk - cs_sold_date_sk <= 90) then 1 else 0 end)  as `61-90 days`
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk > 90) and
                 (cs_ship_date_sk - cs_sold_date_sk <= 120) then 1 else 0 end)  as `91-120 days` 
  ,sum(case when (cs_ship_date_sk - cs_sold_date_sk  > 120) then 1 else 0 end)  as `>120 days` 
from
   catalog_sales
  ,warehouse
  ,ship_mode
  ,call_center
  ,date_dim
where
    d_month_seq between 1212 and 1212 + 11
and cs_ship_date_sk   = d_date_sk
and cs_warehouse_sk   = w_warehouse_sk
and cs_ship_mode_sk   = sm_ship_mode_sk
and cs_call_center_sk = cc_call_center_sk
group by
   substr(w_warehouse_name,1,20)
  ,sm_type
  ,cc_name
order by substr(w_warehouse_name,1,20)
        ,sm_type
        ,cc_name
limit 100

-- end query 1 in stream 0 using template query99.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1, 2}], 30 days=[SUM($3)], 31-60 days=[SUM($4)], 61-90 days=[SUM($5)], 91-120 days=[SUM($6)], >120 days=[SUM($7)])
   +- LogicalProject(EXPR$0=[SUBSTR($36, 1, 20)], sm_type=[$50], cc_name=[$60], $f3=[CASE(<=(-($2, $0), 30), 1, 0)], $f4=[CASE(AND(>(-($2, $0), 30), <=(-($2, $0), 60)), 1, 0)], $f5=[CASE(AND(>(-($2, $0), 60), <=(-($2, $0), 90)), 1, 0)], $f6=[CASE(AND(>(-($2, $0), 90), <=(-($2, $0), 120)), 1, 0)], $f7=[CASE(>(-($2, $0), 120), 1, 0)])
      +- LogicalFilter(condition=[AND(>=($88, 1212), <=($88, +(1212, 11)), =($2, $85), =($14, $34), =($13, $48), =($11, $54))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :- LogicalJoin(condition=[true], joinType=[inner])
            :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales]])
            :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, warehouse]])
            :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, ship_mode]])
            :  +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, call_center]])
            +- LogicalTableScan(table=[[hive, tpcds_bin_orc_10000, date_dim]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[EXPR$0 ASC, sm_type ASC, cc_name ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[EXPR$0 ASC, sm_type ASC, cc_name ASC], offset=[0], fetch=[100], global=[false])
      +- HashAggregate(isMerge=[false], groupBy=[EXPR$0, sm_type, cc_name], select=[EXPR$0, sm_type, cc_name, SUM($f3) AS 30 days, SUM($f4) AS 31-60 days, SUM($f5) AS 61-90 days, SUM($f6) AS 91-120 days, SUM($f7) AS >120 days])
         +- Exchange(distribution=[hash[EXPR$0, sm_type, cc_name]])
            +- Calc(select=[SUBSTR(w_warehouse_name, 1, 20) AS EXPR$0, sm_type, cc_name, CASE(((cs_ship_date_sk - cs_sold_date_sk) <= 30), 1, 0) AS $f3, CASE((((cs_ship_date_sk - cs_sold_date_sk) > 30) AND ((cs_ship_date_sk - cs_sold_date_sk) <= 60)), 1, 0) AS $f4, CASE((((cs_ship_date_sk - cs_sold_date_sk) > 60) AND ((cs_ship_date_sk - cs_sold_date_sk) <= 90)), 1, 0) AS $f5, CASE((((cs_ship_date_sk - cs_sold_date_sk) > 90) AND ((cs_ship_date_sk - cs_sold_date_sk) <= 120)), 1, 0) AS $f6, CASE(((cs_ship_date_sk - cs_sold_date_sk) > 120), 1, 0) AS $f7])
               +- MultipleInput(readOrder=[0,0,0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(cs_warehouse_sk = w_warehouse_sk)], select=[cs_sold_date_sk, cs_ship_date_sk, cs_warehouse_sk, cc_name, sm_type, w_warehouse_sk, w_warehouse_name], isBroadcast=[true], build=[right])\n:- Calc(select=[cs_sold_date_sk, cs_ship_date_sk, cs_warehouse_sk, cc_name, sm_type])\n:  +- HashJoin(joinType=[InnerJoin], where=[(cs_ship_mode_sk = sm_ship_mode_sk)], select=[cs_sold_date_sk, cs_ship_date_sk, cs_ship_mode_sk, cs_warehouse_sk, cc_name, sm_ship_mode_sk, sm_type], isBroadcast=[true], build=[right])\n:     :- Calc(select=[cs_sold_date_sk, cs_ship_date_sk, cs_ship_mode_sk, cs_warehouse_sk, cc_name])\n:     :  +- HashJoin(joinType=[InnerJoin], where=[(cs_call_center_sk = cc_call_center_sk)], select=[cs_sold_date_sk, cs_ship_date_sk, cs_call_center_sk, cs_ship_mode_sk, cs_warehouse_sk, cc_call_center_sk, cc_name], isBroadcast=[true], build=[right])\n:     :     :- Calc(select=[cs_sold_date_sk, cs_ship_date_sk, cs_call_center_sk, cs_ship_mode_sk, cs_warehouse_sk])\n:     :     :  +- HashJoin(joinType=[InnerJoin], where=[(cs_ship_date_sk = d_date_sk)], select=[cs_sold_date_sk, cs_ship_date_sk, cs_call_center_sk, cs_ship_mode_sk, cs_warehouse_sk, d_date_sk], isBroadcast=[true], build=[right])\n:     :     :     :- Calc(select=[cs_sold_date_sk, cs_ship_date_sk, cs_call_center_sk, cs_ship_mode_sk, cs_warehouse_sk], where=[cs_warehouse_sk IS NOT NULL])\n:     :     :     :  +- [#5] TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_ship_date_sk, cs_call_center_sk, cs_ship_mode_sk, cs_warehouse_sk]]], fields=[cs_sold_date_sk, cs_ship_date_sk, cs_call_center_sk, cs_ship_mode_sk, cs_warehouse_sk])\n:     :     :     +- [#4] Exchange(distribution=[broadcast])\n:     :     +- [#3] Exchange(distribution=[broadcast])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
                  :- Exchange(distribution=[broadcast])
                  :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, warehouse, project=[w_warehouse_sk, w_warehouse_name]]], fields=[w_warehouse_sk, w_warehouse_name])
                  :- Exchange(distribution=[broadcast])
                  :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, ship_mode, project=[sm_ship_mode_sk, sm_type]]], fields=[sm_ship_mode_sk, sm_type])
                  :- Exchange(distribution=[broadcast])
                  :  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, call_center, project=[cc_call_center_sk, cc_name]]], fields=[cc_call_center_sk, cc_name])
                  :- Exchange(distribution=[broadcast])
                  :  +- Calc(select=[d_date_sk], where=[SEARCH(d_month_seq, Sarg[[1212..1223]])])
                  :     +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, date_dim, project=[d_date_sk, d_month_seq]]], fields=[d_date_sk, d_month_seq])
                  +- TableSourceScan(table=[[hive, tpcds_bin_orc_10000, catalog_sales, project=[cs_sold_date_sk, cs_ship_date_sk, cs_call_center_sk, cs_ship_mode_sk, cs_warehouse_sk]]], fields=[cs_sold_date_sk, cs_ship_date_sk, cs_call_center_sk, cs_ship_mode_sk, cs_warehouse_sk])
]]>
    </Resource>
  </TestCase>
</Root>
