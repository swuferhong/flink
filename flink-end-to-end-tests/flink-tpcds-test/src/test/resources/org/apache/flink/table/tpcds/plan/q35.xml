  <TestCase name="getExecPlan[q35]">
    <Resource name="sql">
      <![CDATA[/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

-- start query 1 in stream 0 using template query35.tpl and seed 1930872976
select   
  ca_state,
  cd_gender,
  cd_marital_status,
  count(*) cnt1,
  avg(cd_dep_count),
  max(cd_dep_count),
  sum(cd_dep_count),
  cd_dep_employed_count,
  count(*) cnt2,
  avg(cd_dep_employed_count),
  max(cd_dep_employed_count),
  sum(cd_dep_employed_count),
  cd_dep_college_count,
  count(*) cnt3,
  avg(cd_dep_college_count),
  max(cd_dep_college_count),
  sum(cd_dep_college_count)
 from
  customer c,customer_address ca,customer_demographics
 where
  c.c_current_addr_sk = ca.ca_address_sk and
  cd_demo_sk = c.c_current_cdemo_sk and 
  exists (select *
          from store_sales,date_dim
          where c.c_customer_sk = ss_customer_sk and
                ss_sold_date_sk = d_date_sk and
                d_year = 1999 and
                d_qoy < 4) and
   (exists (select *
            from web_sales,date_dim
            where c.c_customer_sk = ws_bill_customer_sk and
                  ws_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_qoy < 4) or 
    exists (select * 
            from catalog_sales,date_dim
            where c.c_customer_sk = cs_ship_customer_sk and
                  cs_sold_date_sk = d_date_sk and
                  d_year = 1999 and
                  d_qoy < 4))
 group by ca_state,
          cd_gender,
          cd_marital_status,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 order by ca_state,
          cd_gender,
          cd_marital_status,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 limit 100

-- end query 1 in stream 0 using template query35.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(ca_state=[$0], cd_gender=[$1], cd_marital_status=[$2], cnt1=[$3], EXPR$4=[$4], EXPR$5=[$5], EXPR$6=[$6], cd_dep_employed_count=[$7], cnt2=[$8], EXPR$9=[$9], EXPR$10=[$10], EXPR$11=[$11], cd_dep_college_count=[$12], cnt3=[$13], EXPR$14=[$14], EXPR$15=[$15], EXPR$16=[$16])
+- LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$17], sort4=[$7], sort5=[$12], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], fetch=[100])
   +- LogicalProject(ca_state=[$0], cd_gender=[$1], cd_marital_status=[$2], cnt1=[$6], EXPR$4=[$7], EXPR$5=[$8], EXPR$6=[$9], cd_dep_employed_count=[$4], cnt2=[$6], EXPR$9=[$10], EXPR$10=[$11], EXPR$11=[$12], cd_dep_college_count=[$5], cnt3=[$6], EXPR$14=[$13], EXPR$15=[$14], EXPR$16=[$15], cd_dep_count=[$3])
      +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5}], cnt3=[COUNT()], EXPR$4=[AVG($3)], EXPR$5=[MAX($3)], EXPR$6=[SUM($3)], EXPR$9=[AVG($4)], EXPR$10=[MAX($4)], EXPR$11=[SUM($4)], EXPR$14=[AVG($5)], EXPR$15=[MAX($5)], EXPR$16=[SUM($5)])
         +- LogicalProject(ca_state=[$26], cd_gender=[$32], cd_marital_status=[$33], cd_dep_count=[$37], cd_dep_employed_count=[$38], cd_dep_college_count=[$39])
            +- LogicalFilter(condition=[AND(=($4, $18), =($31, $2), EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $2), =($22, $23), =($29, 1999), <($33, 4))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store_sales]])
    LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
}), OR(EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $3), =($33, $34), =($40, 1999), <($44, 4))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, web_sales]])
    LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
}), EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $6), =($33, $34), =($40, 1999), <($44, 4))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, catalog_sales]])
    LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
})))], variablesSet=[[$cor0]])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalJoin(condition=[true], joinType=[inner])
                  :  :- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, customer]])
                  :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, customer_address]])
                  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, customer_demographics]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[ca_state, cd_gender, cd_marital_status, cnt3 AS cnt1, EXPR$4, EXPR$5, EXPR$6, cd_dep_employed_count, cnt3 AS cnt2, EXPR$9, EXPR$10, EXPR$11, cd_dep_college_count, cnt3, EXPR$14, EXPR$15, EXPR$16])
+- SortLimit(orderBy=[ca_state ASC, cd_gender ASC, cd_marital_status ASC, cd_dep_count ASC, cd_dep_employed_count ASC, cd_dep_college_count ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[ca_state ASC, cd_gender ASC, cd_marital_status ASC, cd_dep_count ASC, cd_dep_employed_count ASC, cd_dep_college_count ASC], offset=[0], fetch=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], select=[ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, Final_COUNT(count1$0) AS cnt3, Final_AVG(sum$1, count$2) AS EXPR$4, Final_MAX(max$3) AS EXPR$5, Final_SUM(sum$4) AS EXPR$6, Final_AVG(sum$5, count$6) AS EXPR$9, Final_MAX(max$7) AS EXPR$10, Final_SUM(sum$8) AS EXPR$11, Final_AVG(sum$9, count$10) AS EXPR$14, Final_MAX(max$11) AS EXPR$15, Final_SUM(sum$12) AS EXPR$16])
            +- Exchange(distribution=[hash[ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count]])
               +- LocalHashAggregate(groupBy=[ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], select=[ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, Partial_COUNT(*) AS count1$0, Partial_AVG(cd_dep_count) AS (sum$1, count$2), Partial_MAX(cd_dep_count) AS max$3, Partial_SUM(cd_dep_count) AS sum$4, Partial_AVG(cd_dep_employed_count) AS (sum$5, count$6), Partial_MAX(cd_dep_employed_count) AS max$7, Partial_SUM(cd_dep_employed_count) AS sum$8, Partial_AVG(cd_dep_college_count) AS (sum$9, count$10), Partial_MAX(cd_dep_college_count) AS max$11, Partial_SUM(cd_dep_college_count) AS sum$12])
                  +- Calc(select=[ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], where=[($f10 IS NOT NULL OR $f1 IS NOT NULL)])
                     +- HashJoin(joinType=[LeftOuterJoin], where=[(c_customer_sk = cs_ship_customer_sk)], select=[c_customer_sk, ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, $f10, cs_ship_customer_sk, $f1], build=[right])
                        :- Exchange(distribution=[hash[c_customer_sk]])
                        :  +- Calc(select=[c_customer_sk, ca_state, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, $f10])
                        :     +- HashJoin(joinType=[InnerJoin], where=[(c_current_addr_sk = ca_address_sk)], select=[c_customer_sk, c_current_addr_sk, $f10, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, ca_address_sk, ca_state], build=[right])
                        :        :- Exchange(distribution=[hash[c_current_addr_sk]])
                        :        :  +- Calc(select=[c_customer_sk, c_current_addr_sk, $f10, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count])
                        :        :     +- HashJoin(joinType=[InnerJoin], where=[(cd_demo_sk = c_current_cdemo_sk)], select=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, $f10, cd_demo_sk, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], build=[right])
                        :        :        :- Exchange(distribution=[hash[c_current_cdemo_sk]])
                        :        :        :  +- Calc(select=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, $f1 AS $f10])
                        :        :        :     +- HashJoin(joinType=[LeftOuterJoin], where=[(c_customer_sk = ws_bill_customer_sk)], select=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, ws_bill_customer_sk, $f1], build=[right])
                        :        :        :        :- Calc(select=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk])
                        :        :        :        :  +- HashJoin(joinType=[InnerJoin], where=[(c_customer_sk = ss_customer_sk)], select=[ss_customer_sk, c_customer_sk, c_current_cdemo_sk, c_current_addr_sk], build=[left])
                        :        :        :        :     :- HashAggregate(isMerge=[false], groupBy=[ss_customer_sk], select=[ss_customer_sk])
                        :        :        :        :     :  +- Exchange(distribution=[hash[ss_customer_sk]])
                        :        :        :        :     :     +- Calc(select=[ss_customer_sk])
                        :        :        :        :     :        +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_customer_sk, ss_sold_date_sk, d_date_sk], isBroadcast=[true], build=[right])
                        :        :        :        :     :           :- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store_sales, project=[ss_customer_sk, ss_sold_date_sk], project=[ss_customer_sk, ss_sold_date_sk]]], fields=[ss_customer_sk, ss_sold_date_sk], dpp=[d_date_sk])
                        :        :        :        :     :           +- Exchange(distribution=[broadcast])(reuse_id=[1])
                        :        :        :        :     :              +- Calc(select=[d_date_sk], where=[((d_year = 1999) AND (d_qoy < 4))])
                        :        :        :        :     :                 +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim, project=[d_date_sk, d_year, d_qoy]]], fields=[d_date_sk, d_year, d_qoy])
                        :        :        :        :     +- Exchange(distribution=[hash[c_customer_sk]])
                        :        :        :        :        +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, customer, project=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk]]], fields=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk])
                        :        :        :        +- Calc(select=[ws_bill_customer_sk, true AS $f1])
                        :        :        :           +- HashAggregate(isMerge=[true], groupBy=[ws_bill_customer_sk], select=[ws_bill_customer_sk])
                        :        :        :              +- Exchange(distribution=[hash[ws_bill_customer_sk]])
                        :        :        :                 +- LocalHashAggregate(groupBy=[ws_bill_customer_sk], select=[ws_bill_customer_sk])
                        :        :        :                    +- Calc(select=[ws_bill_customer_sk])
                        :        :        :                       +- HashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_bill_customer_sk, ws_sold_date_sk, d_date_sk], isBroadcast=[true], build=[right])
                        :        :        :                          :- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, web_sales, project=[ws_bill_customer_sk, ws_sold_date_sk], project=[ws_bill_customer_sk, ws_sold_date_sk]]], fields=[ws_bill_customer_sk, ws_sold_date_sk], dpp=[d_date_sk])
                        :        :        :                          +- Reused(reference_id=[1])
                        :        :        +- Exchange(distribution=[hash[cd_demo_sk]])
                        :        :           +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, customer_demographics, project=[cd_demo_sk, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count]]], fields=[cd_demo_sk, cd_gender, cd_marital_status, cd_dep_count, cd_dep_employed_count, cd_dep_college_count])
                        :        +- Exchange(distribution=[hash[ca_address_sk]])
                        :           +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, customer_address, project=[ca_address_sk, ca_state]]], fields=[ca_address_sk, ca_state])
                        +- Calc(select=[cs_ship_customer_sk, true AS $f1])
                           +- HashAggregate(isMerge=[false], groupBy=[cs_ship_customer_sk], select=[cs_ship_customer_sk])
                              +- Exchange(distribution=[hash[cs_ship_customer_sk]])
                                 +- Calc(select=[cs_ship_customer_sk])
                                    +- HashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_ship_customer_sk, cs_sold_date_sk, d_date_sk], isBroadcast=[true], build=[right])
                                       :- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, catalog_sales, project=[cs_ship_customer_sk, cs_sold_date_sk], project=[cs_ship_customer_sk, cs_sold_date_sk]]], fields=[cs_ship_customer_sk, cs_sold_date_sk], dpp=[d_date_sk])
                                       +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
