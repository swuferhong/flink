  <TestCase name="getExecPlan[q5]">
    <Resource name="sql">
      <![CDATA[/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

-- start query 1 in stream 0 using template query5.tpl and seed 1819994127
with ssr as
 (select s_store_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as `returns`,
        sum(net_loss) as profit_loss
 from
  ( select  ss_store_sk as store_sk,
            ss_sold_date_sk  as date_sk,
            ss_ext_sales_price as sales_price,
            ss_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from store_sales
    union all
    select sr_store_sk as store_sk,
           sr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           sr_return_amt as return_amt,
           sr_net_loss as net_loss
    from store_returns
   ) salesreturns,
     date_dim,
     store
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date) 
                  and (cast('1998-08-04' as date) +  interval '14' day)
       and store_sk = s_store_sk
 group by s_store_id)
 ,
 csr as
 (select cp_catalog_page_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as `returns`,
        sum(net_loss) as profit_loss
 from
  ( select  cs_catalog_page_sk as page_sk,
            cs_sold_date_sk  as date_sk,
            cs_ext_sales_price as sales_price,
            cs_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from catalog_sales
    union all
    select cr_catalog_page_sk as page_sk,
           cr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           cr_return_amount as return_amt,
           cr_net_loss as net_loss
    from catalog_returns
   ) salesreturns,
     date_dim,
     catalog_page
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  interval '14' day)
       and page_sk = cp_catalog_page_sk
 group by cp_catalog_page_id)
 ,
 wsr as
 (select web_site_id,
        sum(sales_price) as sales,
        sum(profit) as profit,
        sum(return_amt) as `returns`,
        sum(net_loss) as profit_loss
 from
  ( select  ws_web_site_sk as wsr_web_site_sk,
            ws_sold_date_sk  as date_sk,
            ws_ext_sales_price as sales_price,
            ws_net_profit as profit,
            cast(0 as decimal(7,2)) as return_amt,
            cast(0 as decimal(7,2)) as net_loss
    from web_sales
    union all
    select ws_web_site_sk as wsr_web_site_sk,
           wr_returned_date_sk as date_sk,
           cast(0 as decimal(7,2)) as sales_price,
           cast(0 as decimal(7,2)) as profit,
           wr_return_amt as return_amt,
           wr_net_loss as net_loss
    from web_returns left outer join web_sales on
         ( wr_item_sk = ws_item_sk
           and wr_order_number = ws_order_number)
   ) salesreturns,
     date_dim,
     web_site
 where date_sk = d_date_sk
       and d_date between cast('1998-08-04' as date)
                  and (cast('1998-08-04' as date) +  interval '14' day)
       and wsr_web_site_sk = web_site_sk
 group by web_site_id)
  select  channel
        , id
        , sum(sales) as sales
        , sum(`returns`) as `returns`
        , sum(profit) as profit
 from 
 (select 'store channel' as channel
        , 'store' || s_store_id as id
        , sales
        , `returns`
        , (profit - profit_loss) as profit
 from   ssr
 union all
 select 'catalog channel' as channel
        , 'catalog_page' || cp_catalog_page_id as id
        , sales
        , `returns`
        , (profit - profit_loss) as profit
 from  csr
 union all
 select 'web channel' as channel
        , 'web_site' || web_site_id as id
        , sales
        , `returns`
        , (profit - profit_loss) as profit
 from   wsr
 ) x
 group by rollup (channel, id)
 order by channel
         ,id
 limit 100

-- end query 1 in stream 0 using template query5.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], fetch=[100])
+- LogicalAggregate(group=[{0, 1}], groups=[[{0, 1}, {0}, {}]], sales=[SUM($2)], returns=[SUM($3)], profit=[SUM($4)])
   +- LogicalUnion(all=[true])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(channel=[_UTF-16LE'store channel'], id=[||(_UTF-16LE'store', $0)], sales=[$1], returns=[$3], profit=[-($2, $4)])
      :  :  +- LogicalAggregate(group=[{0}], sales=[SUM($1)], profit=[SUM($2)], returns=[SUM($3)], profit_loss=[SUM($4)])
      :  :     +- LogicalProject(s_store_id=[$35], sales_price=[$2], profit=[$3], return_amt=[$4], net_loss=[$5])
      :  :        +- LogicalFilter(condition=[AND(=($1, $6), >=($8, CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL), <=($8, +(CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL, 1209600000:INTERVAL DAY)), =($0, $34))])
      :  :           +- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :- LogicalJoin(condition=[true], joinType=[inner])
      :  :              :  :- LogicalUnion(all=[true])
      :  :              :  :  :- LogicalProject(store_sk=[$6], date_sk=[$22], sales_price=[$14], profit=[$21], return_amt=[0:DECIMAL(7, 2)], net_loss=[0:DECIMAL(7, 2)])
      :  :              :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store_sales]])
      :  :              :  :  +- LogicalProject(store_sk=[$6], date_sk=[$19], sales_price=[0:DECIMAL(7, 2)], profit=[0:DECIMAL(7, 2)], return_amt=[$10], net_loss=[$18])
      :  :              :  :     +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store_returns]])
      :  :              :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
      :  :              +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store]])
      :  +- LogicalProject(channel=[_UTF-16LE'catalog channel'], id=[||(_UTF-16LE'catalog_page', $0)], sales=[$1], returns=[$3], profit=[-($2, $4)])
      :     +- LogicalAggregate(group=[{0}], sales=[SUM($1)], profit=[SUM($2)], returns=[SUM($3)], profit_loss=[SUM($4)])
      :        +- LogicalProject(cp_catalog_page_id=[$35], sales_price=[$2], profit=[$3], return_amt=[$4], net_loss=[$5])
      :           +- LogicalFilter(condition=[AND(=($1, $6), >=($8, CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL), <=($8, +(CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL, 1209600000:INTERVAL DAY)), =($0, $34))])
      :              +- LogicalJoin(condition=[true], joinType=[inner])
      :                 :- LogicalJoin(condition=[true], joinType=[inner])
      :                 :  :- LogicalUnion(all=[true])
      :                 :  :  :- LogicalProject(page_sk=[$11], date_sk=[$33], sales_price=[$22], profit=[$32], return_amt=[0:DECIMAL(7, 2)], net_loss=[0:DECIMAL(7, 2)])
      :                 :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, catalog_sales]])
      :                 :  :  +- LogicalProject(page_sk=[$11], date_sk=[$26], sales_price=[0:DECIMAL(7, 2)], profit=[0:DECIMAL(7, 2)], return_amt=[$17], net_loss=[$25])
      :                 :  :     +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, catalog_returns]])
      :                 :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
      :                 +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, catalog_page]])
      +- LogicalProject(channel=[_UTF-16LE'web channel'], id=[||(_UTF-16LE'web_site', $0)], sales=[$1], returns=[$3], profit=[-($2, $4)])
         +- LogicalAggregate(group=[{0}], sales=[SUM($1)], profit=[SUM($2)], returns=[SUM($3)], profit_loss=[SUM($4)])
            +- LogicalProject(web_site_id=[$35], sales_price=[$2], profit=[$3], return_amt=[$4], net_loss=[$5])
               +- LogicalFilter(condition=[AND(=($1, $6), >=($8, CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL), <=($8, +(CAST(_UTF-16LE'1998-08-04'):DATE NOT NULL, 1209600000:INTERVAL DAY)), =($0, $34))])
                  +- LogicalJoin(condition=[true], joinType=[inner])
                     :- LogicalJoin(condition=[true], joinType=[inner])
                     :  :- LogicalUnion(all=[true])
                     :  :  :- LogicalProject(wsr_web_site_sk=[$12], date_sk=[$33], sales_price=[$22], profit=[$32], return_amt=[0:DECIMAL(7, 2)], net_loss=[0:DECIMAL(7, 2)])
                     :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, web_sales]])
                     :  :  +- LogicalProject(wsr_web_site_sk=[$36], date_sk=[$23], sales_price=[0:DECIMAL(7, 2)], profit=[0:DECIMAL(7, 2)], return_amt=[$14], net_loss=[$22])
                     :  :     +- LogicalJoin(condition=[AND(=($1, $26), =($12, $40))], joinType=[left])
                     :  :        :- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, web_returns]])
                     :  :        +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, web_sales]])
                     :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
                     +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, web_site]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[channel, id, sales, returns, profit])
+- SortLimit(orderBy=[channel ASC, id ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[channel ASC, id ASC], offset=[0], fetch=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[channel, id, $e], select=[channel, id, $e, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS returns, Final_SUM(sum$2) AS profit])
            +- Exchange(distribution=[hash[channel, id, $e]])
               +- LocalHashAggregate(groupBy=[channel, id, $e], select=[channel, id, $e, Partial_SUM(sales) AS sum$0, Partial_SUM(returns) AS sum$1, Partial_SUM(profit) AS sum$2])
                  +- Expand(projects=[{channel, id, sales, returns, profit, 0 AS $e}, {channel, null AS id, sales, returns, profit, 1 AS $e}, {null AS channel, null AS id, sales, returns, profit, 3 AS $e}])
                     +- Union(all=[true], union=[channel, id, sales, returns, profit])
                        :- Union(all=[true], union=[channel, id, sales, returns, profit])
                        :  :- Calc(select=['store channel' AS channel, ||('store', s_store_id) AS id, sales, returns, (profit - profit_loss) AS profit])
                        :  :  +- HashAggregate(isMerge=[true], groupBy=[s_store_id], select=[s_store_id, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit, Final_SUM(sum$2) AS returns, Final_SUM(sum$3) AS profit_loss])
                        :  :     +- Exchange(distribution=[hash[s_store_id]])
                        :  :        +- LocalHashAggregate(groupBy=[s_store_id], select=[s_store_id, Partial_SUM(sales) AS sum$0, Partial_SUM(profit) AS sum$1, Partial_SUM(returns) AS sum$2, Partial_SUM(profit_loss) AS sum$3])
                        :  :           +- HashJoin(joinType=[InnerJoin], where=[(store_sk = s_store_sk)], select=[store_sk, sales, profit, returns, profit_loss, s_store_sk, s_store_id], isBroadcast=[true], build=[right])
                        :  :              :- HashAggregate(isMerge=[true], groupBy=[store_sk], select=[store_sk, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit, Final_SUM(sum$2) AS returns, Final_SUM(sum$3) AS profit_loss])
                        :  :              :  +- Exchange(distribution=[hash[store_sk]])
                        :  :              :     +- LocalHashAggregate(groupBy=[store_sk], select=[store_sk, Partial_SUM(sales_price) AS sum$0, Partial_SUM(profit) AS sum$1, Partial_SUM(return_amt) AS sum$2, Partial_SUM(net_loss) AS sum$3])
                        :  :              :        +- Calc(select=[store_sk, sales_price, profit, return_amt, net_loss])
                        :  :              :           +- HashJoin(joinType=[InnerJoin], where=[(date_sk = d_date_sk)], select=[store_sk, date_sk, sales_price, profit, return_amt, net_loss, d_date_sk], isBroadcast=[true], build=[right])
                        :  :              :              :- Union(all=[true], union=[store_sk, date_sk, sales_price, profit, return_amt, net_loss])
                        :  :              :              :  :- Calc(select=[ss_store_sk AS store_sk, ss_sold_date_sk AS date_sk, ss_ext_sales_price AS sales_price, ss_net_profit AS profit, CAST(0E0 AS DOUBLE) AS return_amt, CAST(0E0 AS DOUBLE) AS net_loss])
                        :  :              :              :  :  +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store_sales, project=[ss_store_sk, ss_sold_date_sk, ss_ext_sales_price, ss_net_profit]]], fields=[ss_store_sk, ss_sold_date_sk, ss_ext_sales_price, ss_net_profit])
                        :  :              :              :  +- Calc(select=[sr_store_sk AS store_sk, sr_returned_date_sk AS date_sk, CAST(0E0 AS DOUBLE) AS sales_price, CAST(0E0 AS DOUBLE) AS profit, sr_return_amt AS return_amt, sr_net_loss AS net_loss])
                        :  :              :              :     +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store_returns, project=[sr_store_sk, sr_returned_date_sk, sr_return_amt, sr_net_loss]]], fields=[sr_store_sk, sr_returned_date_sk, sr_return_amt, sr_net_loss])
                        :  :              :              +- Exchange(distribution=[broadcast])(reuse_id=[1])
                        :  :              :                 +- Calc(select=[d_date_sk], where=[SEARCH(d_date, Sarg[[1998-08-04..1998-08-18]])])
                        :  :              :                    +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim, project=[d_date_sk, d_date]]], fields=[d_date_sk, d_date])
                        :  :              +- Exchange(distribution=[broadcast])
                        :  :                 +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store, project=[s_store_sk, s_store_id]]], fields=[s_store_sk, s_store_id])
                        :  +- Calc(select=['catalog channel' AS channel, ||('catalog_page', cp_catalog_page_id) AS id, sales, returns, (profit - profit_loss) AS profit])
                        :     +- HashAggregate(isMerge=[true], groupBy=[cp_catalog_page_id], select=[cp_catalog_page_id, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit, Final_SUM(sum$2) AS returns, Final_SUM(sum$3) AS profit_loss])
                        :        +- Exchange(distribution=[hash[cp_catalog_page_id]])
                        :           +- LocalHashAggregate(groupBy=[cp_catalog_page_id], select=[cp_catalog_page_id, Partial_SUM(sales) AS sum$0, Partial_SUM(profit) AS sum$1, Partial_SUM(returns) AS sum$2, Partial_SUM(profit_loss) AS sum$3])
                        :              +- HashJoin(joinType=[InnerJoin], where=[(page_sk = cp_catalog_page_sk)], select=[page_sk, sales, profit, returns, profit_loss, cp_catalog_page_sk, cp_catalog_page_id], isBroadcast=[true], build=[left])
                        :                 :- Exchange(distribution=[broadcast])
                        :                 :  +- HashAggregate(isMerge=[true], groupBy=[page_sk], select=[page_sk, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit, Final_SUM(sum$2) AS returns, Final_SUM(sum$3) AS profit_loss])
                        :                 :     +- Exchange(distribution=[hash[page_sk]])
                        :                 :        +- LocalHashAggregate(groupBy=[page_sk], select=[page_sk, Partial_SUM(sales_price) AS sum$0, Partial_SUM(profit) AS sum$1, Partial_SUM(return_amt) AS sum$2, Partial_SUM(net_loss) AS sum$3])
                        :                 :           +- Calc(select=[page_sk, sales_price, profit, return_amt, net_loss])
                        :                 :              +- HashJoin(joinType=[InnerJoin], where=[(date_sk = d_date_sk)], select=[page_sk, date_sk, sales_price, profit, return_amt, net_loss, d_date_sk], isBroadcast=[true], build=[right])
                        :                 :                 :- Union(all=[true], union=[page_sk, date_sk, sales_price, profit, return_amt, net_loss])
                        :                 :                 :  :- Calc(select=[cs_catalog_page_sk AS page_sk, cs_sold_date_sk AS date_sk, cs_ext_sales_price AS sales_price, cs_net_profit AS profit, CAST(0E0 AS DOUBLE) AS return_amt, CAST(0E0 AS DOUBLE) AS net_loss])
                        :                 :                 :  :  +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, catalog_sales, project=[cs_catalog_page_sk, cs_sold_date_sk, cs_ext_sales_price, cs_net_profit]]], fields=[cs_catalog_page_sk, cs_sold_date_sk, cs_ext_sales_price, cs_net_profit])
                        :                 :                 :  +- Calc(select=[cr_catalog_page_sk AS page_sk, cr_returned_date_sk AS date_sk, CAST(0E0 AS DOUBLE) AS sales_price, CAST(0E0 AS DOUBLE) AS profit, cr_return_amount AS return_amt, cr_net_loss AS net_loss])
                        :                 :                 :     +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, catalog_returns, project=[cr_catalog_page_sk, cr_returned_date_sk, cr_return_amount, cr_net_loss]]], fields=[cr_catalog_page_sk, cr_returned_date_sk, cr_return_amount, cr_net_loss])
                        :                 :                 +- Reused(reference_id=[1])
                        :                 +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, catalog_page, project=[cp_catalog_page_sk, cp_catalog_page_id]]], fields=[cp_catalog_page_sk, cp_catalog_page_id])
                        +- Calc(select=['web channel' AS channel, ||('web_site', web_site_id) AS id, sales, returns, (profit - profit_loss) AS profit])
                           +- HashAggregate(isMerge=[true], groupBy=[web_site_id], select=[web_site_id, Final_SUM(sum$0) AS sales, Final_SUM(sum$1) AS profit, Final_SUM(sum$2) AS returns, Final_SUM(sum$3) AS profit_loss])
                              +- Exchange(distribution=[hash[web_site_id]])
                                 +- LocalHashAggregate(groupBy=[web_site_id], select=[web_site_id, Partial_SUM(sales_price) AS sum$0, Partial_SUM(profit) AS sum$1, Partial_SUM(return_amt) AS sum$2, Partial_SUM(net_loss) AS sum$3])
                                    +- Calc(select=[web_site_id, sales_price, profit, return_amt, net_loss])
                                       +- HashJoin(joinType=[InnerJoin], where=[(wsr_web_site_sk = web_site_sk)], select=[wsr_web_site_sk, sales_price, profit, return_amt, net_loss, web_site_sk, web_site_id], isBroadcast=[true], build=[right])
                                          :- Calc(select=[wsr_web_site_sk, sales_price, profit, return_amt, net_loss])
                                          :  +- HashJoin(joinType=[InnerJoin], where=[(date_sk = d_date_sk)], select=[wsr_web_site_sk, date_sk, sales_price, profit, return_amt, net_loss, d_date_sk], isBroadcast=[true], build=[right])
                                          :     :- Union(all=[true], union=[wsr_web_site_sk, date_sk, sales_price, profit, return_amt, net_loss])
                                          :     :  :- Calc(select=[ws_web_site_sk AS wsr_web_site_sk, ws_sold_date_sk AS date_sk, ws_ext_sales_price AS sales_price, ws_net_profit AS profit, CAST(0E0 AS DOUBLE) AS return_amt, CAST(0E0 AS DOUBLE) AS net_loss])
                                          :     :  :  +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, web_sales, project=[ws_web_site_sk, ws_sold_date_sk, ws_ext_sales_price, ws_net_profit]]], fields=[ws_web_site_sk, ws_sold_date_sk, ws_ext_sales_price, ws_net_profit])
                                          :     :  +- Calc(select=[ws_web_site_sk AS wsr_web_site_sk, wr_returned_date_sk AS date_sk, CAST(0E0 AS DOUBLE) AS sales_price, CAST(0E0 AS DOUBLE) AS profit, wr_return_amt AS return_amt, wr_net_loss AS net_loss])
                                          :     :  +- Calc(select=[ws_web_site_sk AS wsr_web_site_sk, wr_returned_date_sk AS date_sk, CAST(0E0 AS DOUBLE) AS sales_price, CAST(0E0 AS DOUBLE) AS profit, wr_return_amt AS return_amt, wr_net_loss AS net_loss])
                                          :     :     +- HashJoin(joinType=[RightOuterJoin], where=[((wr_item_sk = ws_item_sk) AND (wr_order_number = ws_order_number))], select=[ws_item_sk, ws_web_site_sk, ws_order_number, wr_item_sk, wr_order_number, wr_return_amt, wr_net_loss, wr_returned_date_sk], build=[right])
                                          :     :        :- Exchange(distribution=[hash[ws_item_sk, ws_order_number]])
                                          :     :        :  +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, web_sales, project=[ws_item_sk, ws_web_site_sk, ws_order_number]]], fields=[ws_item_sk, ws_web_site_sk, ws_order_number])
                                          :     :        +- Exchange(distribution=[hash[wr_item_sk, wr_order_number]])
                                          :     :           +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, web_returns, project=[wr_item_sk, wr_order_number, wr_return_amt, wr_net_loss, wr_returned_date_sk]]], fields=[wr_item_sk, wr_order_number, wr_return_amt, wr_net_loss, wr_returned_date_sk])
                                          :     +- Reused(reference_id=[1])
                                          +- Exchange(distribution=[broadcast])
                                             +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, web_site, project=[web_site_sk, web_site_id]]], fields=[web_site_sk, web_site_id])
]]>
    </Resource>
  </TestCase>
