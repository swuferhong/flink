  <TestCase name="getExecPlan[q6]">
    <Resource name="sql">
      <![CDATA[/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

-- start query 1 in stream 0 using template query6.tpl and seed 1819994127
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100

-- end query 1 in stream 0 using template query6.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[100])
+- LogicalFilter(condition=[>=($1, 10)])
   +- LogicalAggregate(group=[{0}], cnt=[COUNT()])
      +- LogicalProject(state=[$8])
         +- LogicalFilter(condition=[AND(=($0, $17), =($13, $33), =($53, $54), =($32, $82), =($57, $SCALAR_QUERY({
LogicalAggregate(group=[{0}])
  LogicalProject(d_month_seq=[$3])
    LogicalFilter(condition=[AND(=($6, 2000), =($8, 2))])
      LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
})), >($87, *(1.2:DECIMAL(2, 1), $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(i_current_price=[$5])
    LogicalFilter(condition=[=($12, $cor0.i_category)])
      LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, item]])
}))))], variablesSet=[[$cor0]])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :- LogicalJoin(condition=[true], joinType=[inner])
               :  :  :  :- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, customer_address]])
               :  :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, customer]])
               :  :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store_sales]])
               :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
               +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, item]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
SortLimit(orderBy=[cnt ASC], offset=[0], fetch=[100], global=[true])
+- Exchange(distribution=[single])
   +- SortLimit(orderBy=[cnt ASC], offset=[0], fetch=[100], global=[false])
      +- Calc(select=[state, cnt], where=[(cnt >= 10)])
         +- HashAggregate(isMerge=[true], groupBy=[state], select=[state, Final_COUNT(count1$0) AS cnt])
            +- Exchange(distribution=[hash[state]])
               +- LocalHashAggregate(groupBy=[state], select=[state, Partial_COUNT(*) AS count1$0])
                  +- Calc(select=[ca_state AS state])
                     +- HashJoin(joinType=[InnerJoin], where=[(ss_item_sk = i_item_sk)], select=[ss_item_sk, ca_state, i_item_sk], isBroadcast=[true], build=[right])
                        :- Calc(select=[ss_item_sk, ca_state])
                        :  +- HashJoin(joinType=[InnerJoin], where=[(c_customer_sk = ss_customer_sk)], select=[ss_item_sk, ss_customer_sk, c_customer_sk, ca_state], build=[right])
                        :     :- Exchange(distribution=[hash[ss_customer_sk]])
                        :     :  +- Calc(select=[ss_item_sk, ss_customer_sk])
                        :     :     +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_item_sk, ss_customer_sk, ss_sold_date_sk, d_date_sk], isBroadcast=[true], build=[right])
                        :     :        :- Calc(select=[ss_item_sk, ss_customer_sk, ss_sold_date_sk], where=[ss_customer_sk IS NOT NULL])
                        :     :        :  +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store_sales, project=[ss_item_sk, ss_customer_sk, ss_sold_date_sk]]], fields=[ss_item_sk, ss_customer_sk, ss_sold_date_sk])
                        :     :        +- Exchange(distribution=[broadcast])
                        :     :           +- Calc(select=[d_date_sk])
                        :     :              +- NestedLoopJoin(joinType=[InnerJoin], where=[(d_month_seq = $f0)], select=[d_date_sk, d_month_seq, $f0], build=[right], singleRowJoin=[true])
                        :     :                 :- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim, project=[d_date_sk, d_month_seq]]], fields=[d_date_sk, d_month_seq])
                        :     :                 +- Exchange(distribution=[broadcast])
                        :     :                    +- HashAggregate(isMerge=[true], select=[Final_SINGLE_VALUE(value$0, count$1) AS $f0])
                        :     :                       +- Exchange(distribution=[single])
                        :     :                          +- LocalHashAggregate(select=[Partial_SINGLE_VALUE(d_month_seq) AS (value$0, count$1)])
                        :     :                             +- HashAggregate(isMerge=[false], groupBy=[d_month_seq], select=[d_month_seq])
                        :     :                                +- Exchange(distribution=[hash[d_month_seq]])
                        :     :                                   +- Calc(select=[d_month_seq], where=[((d_year = 2000) AND (d_moy = 2))])
                        :     :                                      +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim, project=[d_month_seq, d_year, d_moy]]], fields=[d_month_seq, d_year, d_moy])
                        :     +- Exchange(distribution=[hash[c_customer_sk]])
                        :        +- Calc(select=[c_customer_sk, ca_state])
                        :           +- HashJoin(joinType=[InnerJoin], where=[(ca_address_sk = c_current_addr_sk)], select=[c_customer_sk, c_current_addr_sk, ca_address_sk, ca_state], build=[right])
                        :              :- Exchange(distribution=[hash[c_current_addr_sk]])
                        :              :  +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, customer, project=[c_customer_sk, c_current_addr_sk]]], fields=[c_customer_sk, c_current_addr_sk])
                        :              +- Exchange(distribution=[hash[ca_address_sk]])
                        :                 +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, customer_address, project=[ca_address_sk, ca_state]]], fields=[ca_address_sk, ca_state])
                        +- Exchange(distribution=[broadcast])
                           +- Calc(select=[i_item_sk])
                              +- HashJoin(joinType=[InnerJoin], where=[((i_category = i_category0) AND (i_current_price > (1.2 * EXPR$0)))], select=[i_item_sk, i_current_price, i_category, i_category0, EXPR$0], isBroadcast=[true], build=[right])
                                 :- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, item, project=[i_item_sk, i_current_price, i_category]]], fields=[i_item_sk, i_current_price, i_category])
                                 +- Exchange(distribution=[broadcast])
                                    +- HashAggregate(isMerge=[true], groupBy=[i_category], select=[i_category, Final_AVG(sum$0, count$1) AS EXPR$0])
                                       +- Exchange(distribution=[hash[i_category]])
                                          +- LocalHashAggregate(groupBy=[i_category], select=[i_category, Partial_AVG(i_current_price) AS (sum$0, count$1)])
                                             +- Calc(select=[i_current_price, i_category], where=[i_category IS NOT NULL])
                                                +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, item, project=[i_current_price, i_category]]], fields=[i_current_price, i_category])
]]>
    </Resource>
  </TestCase>
