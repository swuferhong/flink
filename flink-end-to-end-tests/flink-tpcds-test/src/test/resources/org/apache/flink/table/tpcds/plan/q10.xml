  <TestCase name="getExecPlan[q10]">
    <Resource name="sql">
      <![CDATA[/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

-- start query 1 in stream 0 using template query10.tpl and seed 797269820
select  
  cd_gender,
  cd_marital_status,
  cd_education_status,
  count(*) cnt1,
  cd_purchase_estimate,
  count(*) cnt2,
  cd_credit_rating,
  count(*) cnt3,
  cd_dep_count,
  count(*) cnt4,
  cd_dep_employed_count,
  count(*) cnt5,
  cd_dep_college_count,
  count(*) cnt6
 from
  customer c,customer_address ca,customer_demographics
 where
  c.c_current_addr_sk = ca.ca_address_sk and
  ca_county in ('Walker County','Richland County','Gaines County','Douglas County','Dona Ana County') and
  cd_demo_sk = c.c_current_cdemo_sk and 
  exists (select *
          from store_sales,date_dim
          where c.c_customer_sk = ss_customer_sk and
                ss_sold_date_sk = d_date_sk and
                d_year = 2002 and
                d_moy between 4 and 4+3) and
   (exists (select *
            from web_sales,date_dim
            where c.c_customer_sk = ws_bill_customer_sk and
                  ws_sold_date_sk = d_date_sk and
                  d_year = 2002 and
                  d_moy between 4 ANd 4+3) or 
    exists (select * 
            from catalog_sales,date_dim
            where c.c_customer_sk = cs_ship_customer_sk and
                  cs_sold_date_sk = d_date_sk and
                  d_year = 2002 and
                  d_moy between 4 and 4+3))
 group by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
 order by cd_gender,
          cd_marital_status,
          cd_education_status,
          cd_purchase_estimate,
          cd_credit_rating,
          cd_dep_count,
          cd_dep_employed_count,
          cd_dep_college_count
limit 100

-- end query 1 in stream 0 using template query10.tpl
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSort(sort0=[$0], sort1=[$1], sort2=[$2], sort3=[$4], sort4=[$6], sort5=[$8], sort6=[$10], sort7=[$12], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first], dir4=[ASC-nulls-first], dir5=[ASC-nulls-first], dir6=[ASC-nulls-first], dir7=[ASC-nulls-first], fetch=[100])
+- LogicalProject(cd_gender=[$0], cd_marital_status=[$1], cd_education_status=[$2], cnt1=[$8], cd_purchase_estimate=[$3], cnt2=[$8], cd_credit_rating=[$4], cnt3=[$8], cd_dep_count=[$5], cnt4=[$8], cd_dep_employed_count=[$6], cnt5=[$8], cd_dep_college_count=[$7], cnt6=[$8])
   +- LogicalAggregate(group=[{0, 1, 2, 3, 4, 5, 6, 7}], cnt6=[COUNT()])
      +- LogicalProject(cd_gender=[$32], cd_marital_status=[$33], cd_education_status=[$34], cd_purchase_estimate=[$35], cd_credit_rating=[$36], cd_dep_count=[$37], cd_dep_employed_count=[$38], cd_dep_college_count=[$39])
         +- LogicalFilter(condition=[AND(=($4, $18), OR(=($25, _UTF-16LE'Walker County'), =($25, _UTF-16LE'Richland County'), =($25, _UTF-16LE'Gaines County'), =($25, _UTF-16LE'Douglas County'), =($25, _UTF-16LE'Dona Ana County')), =($31, $2), EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $2), =($22, $23), =($29, 2002), >=($31, 4), <=($31, +(4, 3)))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store_sales]])
    LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
}), OR(EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $3), =($33, $34), =($40, 2002), >=($42, 4), <=($42, +(4, 3)))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, web_sales]])
    LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
}), EXISTS({
LogicalFilter(condition=[AND(=($cor0.c_customer_sk, $6), =($33, $34), =($40, 2002), >=($42, 4), <=($42, +(4, 3)))])
  LogicalJoin(condition=[true], joinType=[inner])
    LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, catalog_sales]])
    LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim]])
})))], variablesSet=[[$cor0]])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalJoin(condition=[true], joinType=[inner])
               :  :- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, customer]])
               :  +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, customer_address]])
               +- LogicalTableScan(table=[[hive, tpcds_bin_partitioned_orc_10000, customer_demographics]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[cd_gender, cd_marital_status, cd_education_status, cnt6 AS cnt1, cd_purchase_estimate, cnt6 AS cnt2, cd_credit_rating, cnt6 AS cnt3, cd_dep_count, cnt6 AS cnt4, cd_dep_employed_count, cnt6 AS cnt5, cd_dep_college_count, cnt6])
+- SortLimit(orderBy=[cd_gender ASC, cd_marital_status ASC, cd_education_status ASC, cd_purchase_estimate ASC, cd_credit_rating ASC, cd_dep_count ASC, cd_dep_employed_count ASC, cd_dep_college_count ASC], offset=[0], fetch=[100], global=[true])
   +- Exchange(distribution=[single])
      +- SortLimit(orderBy=[cd_gender ASC, cd_marital_status ASC, cd_education_status ASC, cd_purchase_estimate ASC, cd_credit_rating ASC, cd_dep_count ASC, cd_dep_employed_count ASC, cd_dep_college_count ASC], offset=[0], fetch=[100], global=[false])
         +- HashAggregate(isMerge=[true], groupBy=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], select=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, Final_COUNT(count1$0) AS cnt6])
            +- Exchange(distribution=[hash[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count]])
               +- LocalHashAggregate(groupBy=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], select=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, Partial_COUNT(*) AS count1$0])
                  +- Calc(select=[cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count], where=[($f10 IS NOT NULL OR $f1 IS NOT NULL)])
                     +- HashJoin(joinType=[RightOuterJoin], where=[(c_customer_sk = cs_ship_customer_sk)], select=[cs_ship_customer_sk, $f1, c_customer_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, $f10], build=[right])
                        :- Calc(select=[cs_ship_customer_sk, true AS $f1])
                        :  +- HashAggregate(isMerge=[false], groupBy=[cs_ship_customer_sk], select=[cs_ship_customer_sk])
                        :     +- Exchange(distribution=[hash[cs_ship_customer_sk]])
                        :        +- Calc(select=[cs_ship_customer_sk])
                        :           +- HashJoin(joinType=[InnerJoin], where=[(cs_sold_date_sk = d_date_sk)], select=[cs_ship_customer_sk, cs_sold_date_sk, d_date_sk], isBroadcast=[true], build=[right])
                        :              :- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, catalog_sales, project=[cs_ship_customer_sk, cs_sold_date_sk], project=[cs_ship_customer_sk, cs_sold_date_sk]]], fields=[cs_ship_customer_sk, cs_sold_date_sk], dpp=[d_date_sk])
                        :              +- Exchange(distribution=[broadcast])(reuse_id=[1])
                        :                 +- Calc(select=[d_date_sk], where=[(SEARCH(d_year, Sarg[2002]) AND SEARCH(d_moy, Sarg[[4..7]]))])
                        :                    +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, date_dim, project=[d_date_sk, d_year, d_moy]]], fields=[d_date_sk, d_year, d_moy])
                        +- Exchange(distribution=[hash[c_customer_sk]])
                           +- Calc(select=[c_customer_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, $f1 AS $f10])
                              +- HashJoin(joinType=[InnerJoin], where=[(cd_demo_sk = c_current_cdemo_sk)], select=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count, $f1, c_customer_sk, c_current_cdemo_sk], isBroadcast=[true], build=[right])
                                 :- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, customer_demographics]], fields=[cd_demo_sk, cd_gender, cd_marital_status, cd_education_status, cd_purchase_estimate, cd_credit_rating, cd_dep_count, cd_dep_employed_count, cd_dep_college_count])
                                 +- Exchange(distribution=[broadcast])
                                    +- Calc(select=[$f1, c_customer_sk, c_current_cdemo_sk])
                                       +- HashJoin(joinType=[RightOuterJoin], where=[(c_customer_sk = ws_bill_customer_sk)], select=[ws_bill_customer_sk, $f1, c_customer_sk, c_current_cdemo_sk], build=[right])
                                          :- Calc(select=[ws_bill_customer_sk, true AS $f1])
                                          :  +- HashAggregate(isMerge=[true], groupBy=[ws_bill_customer_sk], select=[ws_bill_customer_sk])
                                          :     +- Exchange(distribution=[hash[ws_bill_customer_sk]])
                                          :        +- LocalHashAggregate(groupBy=[ws_bill_customer_sk], select=[ws_bill_customer_sk])
                                          :           +- Calc(select=[ws_bill_customer_sk])
                                          :              +- HashJoin(joinType=[InnerJoin], where=[(ws_sold_date_sk = d_date_sk)], select=[ws_bill_customer_sk, ws_sold_date_sk, d_date_sk], isBroadcast=[true], build=[right])
                                          :                 :- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, web_sales, project=[ws_bill_customer_sk, ws_sold_date_sk], project=[ws_bill_customer_sk, ws_sold_date_sk]]], fields=[ws_bill_customer_sk, ws_sold_date_sk], dpp=[d_date_sk])
                                          :                 +- Reused(reference_id=[1])
                                          +- Exchange(distribution=[hash[c_customer_sk]])
                                             +- Calc(select=[c_customer_sk, c_current_cdemo_sk])
                                                +- HashJoin(joinType=[InnerJoin], where=[(c_customer_sk = ss_customer_sk)], select=[ss_customer_sk, c_customer_sk, c_current_cdemo_sk], isBroadcast=[true], build=[right])
                                                   :- HashAggregate(isMerge=[false], groupBy=[ss_customer_sk], select=[ss_customer_sk])
                                                   :  +- Exchange(distribution=[hash[ss_customer_sk]])
                                                   :     +- Calc(select=[ss_customer_sk])
                                                   :        +- HashJoin(joinType=[InnerJoin], where=[(ss_sold_date_sk = d_date_sk)], select=[ss_customer_sk, ss_sold_date_sk, d_date_sk], isBroadcast=[true], build=[right])
                                                   :           :- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, store_sales, project=[ss_customer_sk, ss_sold_date_sk], project=[ss_customer_sk, ss_sold_date_sk]]], fields=[ss_customer_sk, ss_sold_date_sk], dpp=[d_date_sk])
                                                   :           +- Reused(reference_id=[1])
                                                   +- Exchange(distribution=[broadcast])
                                                      +- Calc(select=[c_customer_sk, c_current_cdemo_sk])
                                                         +- HashJoin(joinType=[InnerJoin], where=[(c_current_addr_sk = ca_address_sk)], select=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk, ca_address_sk], isBroadcast=[true], build=[right])
                                                            :- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, customer, project=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk]]], fields=[c_customer_sk, c_current_cdemo_sk, c_current_addr_sk])
                                                            +- Exchange(distribution=[broadcast])
                                                               +- Calc(select=[ca_address_sk], where=[SEARCH(ca_county, Sarg[_UTF-16LE'Dona Ana County', _UTF-16LE'Douglas County', _UTF-16LE'Gaines County', _UTF-16LE'Richland County', _UTF-16LE'Walker County'])])
                                                                  +- TableSourceScan(table=[[hive, tpcds_bin_partitioned_orc_10000, customer_address, project=[ca_address_sk, ca_county]]], fields=[ca_address_sk, ca_county])
]]>
    </Resource>
  </TestCase>
